
RNB_SENB_V2_1.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a480  0800a480  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a488  0800a488  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000994c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200099d8  200099d8  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022b9a  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c07  00000000  00000000  00042c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00047860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d0  00000000  00000000  00049308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027275  00000000  00000000  0004abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f8c  00000000  00000000  00071e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daf60  00000000  00000000  00092dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016dd39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077b8  00000000  00000000  0016dd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0f4 	.word	0x0800a0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800a0f4 	.word	0x0800a0f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <apps_process_task>:
********************************************************************************************************************************
********************************************************************************************************************************
*/

void apps_process_task(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	static msg_t msg;
	static u32 param1, param2;
	static u8 process_index = 0;

	init_apps_init_app();
 8000b88:	f000 f8da 	bl	8000d40 <init_apps_init_app>

	apps_start_app(APPS_INIT_APP, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f85a 	bl	8000c48 <apps_start_app>
	/********** timer init ***********/
	timers_init();
 8000b94:	f001 fcd0 	bl	8002538 <timers_init>
	//timers_register_timer(UTIL_TIMER_10ms, apps_timer_10ms);
	timers_register_timer(UTIL_TIMER_100ms, apps_timer_100ms);
 8000b98:	4918      	ldr	r1, [pc, #96]	; (8000bfc <apps_process_task+0x7c>)
 8000b9a:	200a      	movs	r0, #10
 8000b9c:	f001 fcd6 	bl	800254c <timers_register_timer>
	timers_register_timer(UTIL_TIMER_1s, apps_timer_1s);
 8000ba0:	4917      	ldr	r1, [pc, #92]	; (8000c00 <apps_process_task+0x80>)
 8000ba2:	2064      	movs	r0, #100	; 0x64
 8000ba4:	f001 fcd2 	bl	800254c <timers_register_timer>
	//timers_register_timer(UTIL_TIMER_5s, apps_timer_5s);
	timers_register_timer(UTIL_TIMER_1min, apps_timer_1min);
 8000ba8:	4916      	ldr	r1, [pc, #88]	; (8000c04 <apps_process_task+0x84>)
 8000baa:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bae:	f001 fccd 	bl	800254c <timers_register_timer>

	while(1)
	{
		//printf("apps_process_task %d 1s\r\n",process_index);
		switch(process_index++)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <apps_process_task+0x88>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	b2d1      	uxtb	r1, r2
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <apps_process_task+0x88>)
 8000bbc:	7011      	strb	r1, [r2, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d005      	beq.n	8000bce <apps_process_task+0x4e>
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d104      	bne.n	8000bd0 <apps_process_task+0x50>
		{
			case 1:
				//ret = sensor_read(SENSOR_A_NOISE, (u32)&sensors.c_val[SENSOR_NOISE], 0, 0);
				break;
			case 2 :
				process_index = 0;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <apps_process_task+0x88>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
				break;
 8000bcc:	e000      	b.n	8000bd0 <apps_process_task+0x50>
				break;
 8000bce:	bf00      	nop
		}

		if(msgs_get_msg(&msg, &param1, &param2) == true) apps_on_msg_app(msg, param1, param2);
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <apps_process_task+0x8c>)
 8000bd2:	490f      	ldr	r1, [pc, #60]	; (8000c10 <apps_process_task+0x90>)
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <apps_process_task+0x94>)
 8000bd6:	f000 f94f 	bl	8000e78 <msgs_get_msg>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <apps_process_task+0x72>
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <apps_process_task+0x94>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <apps_process_task+0x90>)
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <apps_process_task+0x8c>)
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f84d 	bl	8000c8c <apps_on_msg_app>
		osDelay(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f005 fa7a 	bl	80060ee <osDelay>
		switch(process_index++)
 8000bfa:	e7da      	b.n	8000bb2 <apps_process_task+0x32>
 8000bfc:	08000cd5 	.word	0x08000cd5
 8000c00:	08000d11 	.word	0x08000d11
 8000c04:	08000d29 	.word	0x08000d29
 8000c08:	200000b2 	.word	0x200000b2
 8000c0c:	200000b8 	.word	0x200000b8
 8000c10:	200000b4 	.word	0x200000b4
 8000c14:	200000b3 	.word	0x200000b3

08000c18 <apps_init_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_init_app(app_t *app)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if(app == NULL) return;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <apps_init_app+0x1e>
	apps[app->id] = app;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <apps_init_app+0x2c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000c34:	e000      	b.n	8000c38 <apps_init_app+0x20>
	if(app == NULL) return;
 8000c36:	bf00      	nop
}
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200000a8 	.word	0x200000a8

08000c48 <apps_start_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
bool apps_start_app(app_id_t id, u32 param1)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
	if(apps[id]->start == NULL) return false;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <apps_start_app+0x3c>)
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <apps_start_app+0x1e>
 8000c62:	2300      	movs	r3, #0
 8000c64:	e00a      	b.n	8000c7c <apps_start_app+0x34>

	current_app_id = id;
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <apps_start_app+0x40>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	7013      	strb	r3, [r2, #0]
	apps[id]->start(param1);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <apps_start_app+0x3c>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	6838      	ldr	r0, [r7, #0]
 8000c78:	4798      	blx	r3

	return true;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000a8 	.word	0x200000a8
 8000c88:	20000000 	.word	0x20000000

08000c8c <apps_on_msg_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_on_msg_app(msg_t msg, u32 param1, u32 param2)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
	if(apps[current_app_id]->on_msg == NULL) return;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <apps_on_msg_app+0x40>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <apps_on_msg_app+0x44>)
 8000ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00b      	beq.n	8000cc4 <apps_on_msg_app+0x38>
	apps[current_app_id]->on_msg(msg, param1, param2);
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <apps_on_msg_app+0x40>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <apps_on_msg_app+0x44>)
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	7bf8      	ldrb	r0, [r7, #15]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	68b9      	ldr	r1, [r7, #8]
 8000cc0:	4798      	blx	r3
 8000cc2:	e000      	b.n	8000cc6 <apps_on_msg_app+0x3a>
	if(apps[current_app_id]->on_msg == NULL) return;
 8000cc4:	bf00      	nop
}
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	200000a8 	.word	0x200000a8

08000cd4 <apps_timer_100ms>:
//	BeltControl();
//	EyeControl();
	//printf("500ms ULTRA[%03d][%03d]\r\n",gv.ultrasonic_1,gv.ultrasonic_2);
}
static void apps_timer_100ms(s8 timer_id, u32 param1)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
	DBG_MSG("ULTRA[%04d][%04d]\r\n",gv.ultrasonic_1,gv.ultrasonic_2);
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <apps_timer_100ms+0x34>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <apps_timer_100ms+0x28>
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <apps_timer_100ms+0x34>)
 8000cea:	885b      	ldrh	r3, [r3, #2]
 8000cec:	4619      	mov	r1, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <apps_timer_100ms+0x34>)
 8000cf0:	889b      	ldrh	r3, [r3, #4]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <apps_timer_100ms+0x38>)
 8000cf6:	f008 fb53 	bl	80093a0 <iprintf>
}
 8000cfa:	e000      	b.n	8000cfe <apps_timer_100ms+0x2a>
	DBG_MSG("ULTRA[%04d][%04d]\r\n",gv.ultrasonic_1,gv.ultrasonic_2);
 8000cfc:	bf00      	nop
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	0800a10c 	.word	0x0800a10c

08000d10 <apps_timer_1s>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_1s(s8 timer_id, u32 param1)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
	//DBG_MSG("apps_timer_1s\r\n");
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <apps_timer_1min>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_1min(s8 timer_id, u32 param1)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
	//DBG_MSG("apps_timer_1min\r\n");
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <init_apps_init_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_apps_init_app(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  apps_init_app(&this);
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <init_apps_init_app+0x14>)
 8000d46:	f7ff ff67 	bl	8000c18 <apps_init_app>
  default_global_volatile();
 8000d4a:	f000 f805 	bl	8000d58 <default_global_volatile>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000004 	.word	0x20000004

08000d58 <default_global_volatile>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void default_global_volatile(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

	gv.debug_mode = false;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <default_global_volatile+0x2c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	705a      	strb	r2, [r3, #1]
	gv.testmode = false;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <default_global_volatile+0x2c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
	gv.ultrasonic_1 = 9999;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <default_global_volatile+0x2c>)
 8000d6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d6e:	805a      	strh	r2, [r3, #2]
	gv.ultrasonic_2 = 9999;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <default_global_volatile+0x2c>)
 8000d72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d76:	809a      	strh	r2, [r3, #4]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000ac 	.word	0x200000ac

08000d88 <start>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void start(u32 param1)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	//

	htim1.Instance->CCR1 = htim1.Instance->ARR;
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <start+0xa8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <start+0xa8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = htim1.Instance->ARR;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <start+0xa8>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <start+0xa8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = htim1.Instance->ARR;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <start+0xa8>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <start+0xa8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c

    init_ultrasonic_hg_c40u();
 8000db4:	f001 fe7c 	bl	8002ab0 <init_ultrasonic_hg_c40u>
    init_p_interfaceboard();
 8000db8:	f001 fcf2 	bl	80027a0 <init_p_interfaceboard>
    init_p_uart_test();
 8000dbc:	f001 fdb6 	bl	800292c <init_p_uart_test>

    // FRONT LIGHT
    FrontLight_Enable(true);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 f987 	bl	80010d4 <FrontLight_Enable>
    FrontLight_SetPWM(FRONTLIGHTON);
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <start+0xac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fcbb 	bl	8000748 <__aeabi_ui2d>
 8000dd2:	a315      	add	r3, pc, #84	; (adr r3, 8000e28 <start+0xa0>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fa4a 	bl	8000270 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fd2a 	bl	800083c <__aeabi_d2uiz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f95f 	bl	80010b0 <FrontLight_SetPWM>



//
    Belt_Rotate_Init();
 8000df2:	f000 f8bb 	bl	8000f6c <Belt_Rotate_Init>
    Ring_Rotate_Init();
 8000df6:	f000 f909 	bl	800100c <Ring_Rotate_Init>
    LED_PWM_init();
 8000dfa:	f000 f88b 	bl	8000f14 <LED_PWM_init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1); // eye1 en
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <start+0xb0>)
 8000e06:	f002 fea9 	bl	8003b5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 1); // eye2 en
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <start+0xb0>)
 8000e12:	f002 fea3 	bl	8003b5c <HAL_GPIO_WritePin>
    osDelay(1000);
 8000e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1a:	f005 f968 	bl	80060ee <osDelay>
//	DOT_MATRIX2_Init(hspi1);
//	MATRIX1_CLEAR(0);
//	MATRIX2_CLEAR(0);
//	ledCategory = (uint8_t)LEDCATEGORYEYE;//temp
//	eyeStatus = (uint8_t)EYESTATUSHELLO;//temp
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	66666666 	.word	0x66666666
 8000e2c:	3fee6666 	.word	0x3fee6666
 8000e30:	200006fc 	.word	0x200006fc
 8000e34:	20000744 	.word	0x20000744
 8000e38:	40020c00 	.word	0x40020c00

08000e3c <stop>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void stop(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <on_msg>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void on_msg(msg_t msg, u32 param1, u32 param2)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  switch(msg)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d002      	beq.n	8000e64 <on_msg+0x1a>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d002      	beq.n	8000e68 <on_msg+0x1e>

    case MSG_SEND_ULTEASONIC_VALUE:
    	break;

    default:
      break;
 8000e62:	e002      	b.n	8000e6a <on_msg+0x20>
    	break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <on_msg+0x20>
    	break;
 8000e68:	bf00      	nop
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <msgs_get_msg>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
bool msgs_get_msg(msg_t *msg, u32 *param1, u32 *param2)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  if(g_msgs_queue_head == g_msgs_queue_tail)
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <msgs_get_msg+0x90>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <msgs_get_msg+0x94>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d101      	bne.n	8000e94 <msgs_get_msg+0x1c>
    return false;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e033      	b.n	8000efc <msgs_get_msg+0x84>

  *msg = g_msgs_queue[g_msgs_queue_tail].msg;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <msgs_get_msg+0x94>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <msgs_get_msg+0x98>)
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	440b      	add	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	701a      	strb	r2, [r3, #0]
  *param1 = g_msgs_queue[g_msgs_queue_tail].param1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <msgs_get_msg+0x94>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <msgs_get_msg+0x98>)
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	601a      	str	r2, [r3, #0]
  *param2 = g_msgs_queue[g_msgs_queue_tail].param2;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <msgs_get_msg+0x94>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <msgs_get_msg+0x98>)
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3308      	adds	r3, #8
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]

  g_msgs_queue_tail++;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <msgs_get_msg+0x94>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <msgs_get_msg+0x94>)
 8000eea:	701a      	strb	r2, [r3, #0]

  if(g_msgs_queue_tail >= MSGS_QUEUE_LEN)
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <msgs_get_msg+0x94>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef2:	d902      	bls.n	8000efa <msgs_get_msg+0x82>
    g_msgs_queue_tail = 0;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <msgs_get_msg+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]

  return true;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200003bc 	.word	0x200003bc
 8000f0c:	200003bd 	.word	0x200003bd
 8000f10:	200000bc 	.word	0x200000bc

08000f14 <LED_PWM_init>:
uint8_t ledCategory = LEDCATEGORYEYE;
uint8_t ledMode = EYESTATUSHELLO;
uint8_t ledAction = 0;

void LED_PWM_init()
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	LED_PWM_low = TIM1_PWM_LED_LOW;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <LED_PWM_init+0x48>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <LED_PWM_init+0x4c>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	085b      	lsrs	r3, r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <LED_PWM_init+0x50>)
 8000f30:	801a      	strh	r2, [r3, #0]
	LED_PWM_high = TIM1_PWM_LED_HIGH;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <LED_PWM_init+0x48>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <LED_PWM_init+0x4c>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	085b      	lsrs	r3, r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <LED_PWM_init+0x54>)
 8000f4e:	801a      	strh	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200006fc 	.word	0x200006fc
 8000f60:	aaaaaaab 	.word	0xaaaaaaab
 8000f64:	200006a0 	.word	0x200006a0
 8000f68:	200006a2 	.word	0x200006a2

08000f6c <Belt_Rotate_Init>:
		Ring2_LED_Data[i][2] = 0;
	}
}

void Belt_Rotate_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_LED_BELT; i += 10)
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e03d      	b.n	8000ff4 <Belt_Rotate_Init+0x88>
	{
		Belt_LED_rotateData[i] = 50;
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2132      	movs	r1, #50	; 0x32
 8000f7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+1] = 50;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000f88:	2132      	movs	r1, #50	; 0x32
 8000f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+2] = 50;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3302      	adds	r3, #2
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+3] = 50;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fa0:	2132      	movs	r1, #50	; 0x32
 8000fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+4] = 50;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fac:	2132      	movs	r1, #50	; 0x32
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+5] = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3305      	adds	r3, #5
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+6] = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3306      	adds	r3, #6
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+7] = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3307      	adds	r3, #7
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+8] = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+9] = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3309      	adds	r3, #9
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <Belt_Rotate_Init+0x9c>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_LED_BELT; i += 10)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	330a      	adds	r3, #10
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b77      	cmp	r3, #119	; 0x77
 8000ff8:	ddbe      	ble.n	8000f78 <Belt_Rotate_Init+0xc>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200003c0 	.word	0x200003c0

0800100c <Ring_Rotate_Init>:

void Ring_Rotate_Init(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_LED_RING; i += 5)
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e03c      	b.n	8001092 <Ring_Rotate_Init+0x86>
	{
		Ring1_LED_rotateData[i] = 50;
 8001018:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <Ring_Rotate_Init+0x9c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2132      	movs	r1, #50	; 0x32
 800101e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+1] = 50;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <Ring_Rotate_Init+0x9c>)
 8001028:	2132      	movs	r1, #50	; 0x32
 800102a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+2] = 50;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <Ring_Rotate_Init+0x9c>)
 8001034:	2132      	movs	r1, #50	; 0x32
 8001036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+3] = 0;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3303      	adds	r3, #3
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <Ring_Rotate_Init+0x9c>)
 8001040:	2100      	movs	r1, #0
 8001042:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+4] = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <Ring_Rotate_Init+0x9c>)
 800104c:	2100      	movs	r1, #0
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		Ring2_LED_rotateData[i] = 50;
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <Ring_Rotate_Init+0xa0>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2132      	movs	r1, #50	; 0x32
 8001058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+1] = 50;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <Ring_Rotate_Init+0xa0>)
 8001062:	2132      	movs	r1, #50	; 0x32
 8001064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+2] = 50;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <Ring_Rotate_Init+0xa0>)
 800106e:	2132      	movs	r1, #50	; 0x32
 8001070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+3] = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3303      	adds	r3, #3
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <Ring_Rotate_Init+0xa0>)
 800107a:	2100      	movs	r1, #0
 800107c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+4] = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <Ring_Rotate_Init+0xa0>)
 8001086:	2100      	movs	r1, #0
 8001088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_LED_RING; i += 5)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3305      	adds	r3, #5
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b1d      	cmp	r3, #29
 8001096:	ddbf      	ble.n	8001018 <Ring_Rotate_Init+0xc>

	}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200005a4 	.word	0x200005a4
 80010ac:	20000620 	.word	0x20000620

080010b0 <FrontLight_SetPWM>:
}


/*FrontLight*/
void FrontLight_SetPWM(uint16_t _pwm)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR1 = _pwm;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <FrontLight_SetPWM+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000744 	.word	0x20000744

080010d4 <FrontLight_Enable>:
void FrontLight_Enable(bool _bool)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if(_bool == true)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d104      	bne.n	80010ee <FrontLight_Enable+0x1a>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <FrontLight_Enable+0x2c>)
 80010e8:	f003 fbb4 	bl	8004854 <HAL_TIM_PWM_Start>
	else
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
}
 80010ec:	e003      	b.n	80010f6 <FrontLight_Enable+0x22>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <FrontLight_Enable+0x2c>)
 80010f2:	f003 fc77 	bl	80049e4 <HAL_TIM_PWM_Stop>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000744 	.word	0x20000744

08001104 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <_write+0x34>)
 800111c:	f004 fb31 	bl	8005782 <HAL_UART_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK ? len : 0);
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <_write+0x2a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e000      	b.n	8001130 <_write+0x2c>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200009c0 	.word	0x200009c0

0800113c <HAL_TIM_PWM_PulseFinishedCallback>:
//  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
//  au32_microseconds *= au32_ticks;
//  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10a      	bne.n	8001164 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7f1b      	ldrb	r3, [r3, #28]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d106      	bne.n	8001164 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800115a:	f003 fcb3 	bl	8004ac4 <HAL_TIM_PWM_Stop_DMA>
		beltdatasentflag=1;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10a      	bne.n	8001184 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d106      	bne.n	8001184 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001176:	2104      	movs	r1, #4
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800117a:	f003 fca3 	bl	8004ac4 <HAL_TIM_PWM_Stop_DMA>
		ring1datasentflag=1;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10a      	bne.n	80011a4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7f1b      	ldrb	r3, [r3, #28]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d106      	bne.n	80011a4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8001196:	2108      	movs	r1, #8
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800119a:	f003 fc93 	bl	8004ac4 <HAL_TIM_PWM_Stop_DMA>
		ring2datasentflag=1;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	}

}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010000 	.word	0x40010000
 80011b0:	200006fc 	.word	0x200006fc
 80011b4:	2000069c 	.word	0x2000069c
 80011b8:	2000069d 	.word	0x2000069d
 80011bc:	2000069e 	.word	0x2000069e

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f001 fefe 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f8aa 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 fb38 	bl	8001840 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011d0:	f000 f910 	bl	80013f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80011d4:	f000 f944 	bl	8001460 <MX_TIM1_Init>
  MX_TIM4_Init();
 80011d8:	f000 f9dc 	bl	8001594 <MX_TIM4_Init>
  MX_UART4_Init();
 80011dc:	f000 fa58 	bl	8001690 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80011e0:	f000 fa80 	bl	80016e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011e4:	f000 faa8 	bl	8001738 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80011e8:	f000 fafa 	bl	80017e0 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80011ec:	f000 face 	bl	800178c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80011f0:	f000 fa2a 	bl	8001648 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n\r\n\r\n\r\n\r\n");
 80011f4:	482d      	ldr	r0, [pc, #180]	; (80012ac <main+0xec>)
 80011f6:	f008 f959 	bl	80094ac <puts>
  printf("****************************************\r\n");
 80011fa:	482d      	ldr	r0, [pc, #180]	; (80012b0 <main+0xf0>)
 80011fc:	f008 f956 	bl	80094ac <puts>
  printf("*  NEUBILITY 1.5  %s / %s *\r\n", FW_VERSION,FW_DATE);
 8001200:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <main+0xf4>)
 8001202:	492d      	ldr	r1, [pc, #180]	; (80012b8 <main+0xf8>)
 8001204:	482d      	ldr	r0, [pc, #180]	; (80012bc <main+0xfc>)
 8001206:	f008 f8cb 	bl	80093a0 <iprintf>
  printf("****************************************\r\n\r\n");
 800120a:	482d      	ldr	r0, [pc, #180]	; (80012c0 <main+0x100>)
 800120c:	f008 f94e 	bl	80094ac <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001210:	f004 fe70 	bl	8005ef4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_ultrasonic1 */
  queue_ultrasonic1Handle = osMessageQueueNew (128, sizeof(uint16_t), &queue_ultrasonic1_attributes);
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <main+0x104>)
 8001216:	2102      	movs	r1, #2
 8001218:	2080      	movs	r0, #128	; 0x80
 800121a:	f004 ff83 	bl	8006124 <osMessageQueueNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <main+0x108>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of queue_ultrasonic2 */
  queue_ultrasonic2Handle = osMessageQueueNew (128, sizeof(uint16_t), &queue_ultrasonic2_attributes);
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <main+0x10c>)
 8001226:	2102      	movs	r1, #2
 8001228:	2080      	movs	r0, #128	; 0x80
 800122a:	f004 ff7b 	bl	8006124 <osMessageQueueNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <main+0x110>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of queue_interfaceBD */
  queue_interfaceBDHandle = osMessageQueueNew (1024, sizeof(uint16_t), &queue_interfaceBD_attributes);
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <main+0x114>)
 8001236:	2102      	movs	r1, #2
 8001238:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800123c:	f004 ff72 	bl	8006124 <osMessageQueueNew>
 8001240:	4603      	mov	r3, r0
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <main+0x118>)
 8001244:	6013      	str	r3, [r2, #0]

  /* creation of queue_debug_test */
  queue_debug_testHandle = osMessageQueueNew (128, sizeof(uint16_t), &queue_debug_test_attributes);
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <main+0x11c>)
 8001248:	2102      	movs	r1, #2
 800124a:	2080      	movs	r0, #128	; 0x80
 800124c:	f004 ff6a 	bl	8006124 <osMessageQueueNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <main+0x120>)
 8001254:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of apps_process */
  apps_processHandle = osThreadNew(apps_process_task, NULL, &apps_process_attributes);
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <main+0x124>)
 8001258:	2100      	movs	r1, #0
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <main+0x128>)
 800125c:	f004 fe94 	bl	8005f88 <osThreadNew>
 8001260:	4603      	mov	r3, r0
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <main+0x12c>)
 8001264:	6013      	str	r3, [r2, #0]

  /* creation of apps_timer */
  apps_timerHandle = osThreadNew(apps_timer_task, NULL, &apps_timer_attributes);
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <main+0x130>)
 8001268:	2100      	movs	r1, #0
 800126a:	4822      	ldr	r0, [pc, #136]	; (80012f4 <main+0x134>)
 800126c:	f004 fe8c 	bl	8005f88 <osThreadNew>
 8001270:	4603      	mov	r3, r0
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <main+0x138>)
 8001274:	6013      	str	r3, [r2, #0]

  /* creation of p_ultrasonic */
  p_ultrasonicHandle = osThreadNew(p_ultrasonic_task, NULL, &p_ultrasonic_attributes);
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <main+0x13c>)
 8001278:	2100      	movs	r1, #0
 800127a:	4821      	ldr	r0, [pc, #132]	; (8001300 <main+0x140>)
 800127c:	f004 fe84 	bl	8005f88 <osThreadNew>
 8001280:	4603      	mov	r3, r0
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <main+0x144>)
 8001284:	6013      	str	r3, [r2, #0]

  /* creation of p_interfaceBD */
  p_interfaceBDHandle = osThreadNew(p_interfaceBD_task, NULL, &p_interfaceBD_attributes);
 8001286:	4a20      	ldr	r2, [pc, #128]	; (8001308 <main+0x148>)
 8001288:	2100      	movs	r1, #0
 800128a:	4820      	ldr	r0, [pc, #128]	; (800130c <main+0x14c>)
 800128c:	f004 fe7c 	bl	8005f88 <osThreadNew>
 8001290:	4603      	mov	r3, r0
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <main+0x150>)
 8001294:	6013      	str	r3, [r2, #0]

  /* creation of p_uart_test */
  p_uart_testHandle = osThreadNew(p_uart_test_task, NULL, &p_uart_test_attributes);
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <main+0x154>)
 8001298:	2100      	movs	r1, #0
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <main+0x158>)
 800129c:	f004 fe74 	bl	8005f88 <osThreadNew>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <main+0x15c>)
 80012a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012a6:	f004 fe49 	bl	8005f3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <main+0xea>
 80012ac:	0800a1b8 	.word	0x0800a1b8
 80012b0:	0800a1c4 	.word	0x0800a1c4
 80012b4:	0800a1f0 	.word	0x0800a1f0
 80012b8:	0800a1fc 	.word	0x0800a1fc
 80012bc:	0800a204 	.word	0x0800a204
 80012c0:	0800a224 	.word	0x0800a224
 80012c4:	0800a368 	.word	0x0800a368
 80012c8:	20000a18 	.word	0x20000a18
 80012cc:	0800a380 	.word	0x0800a380
 80012d0:	20000a1c 	.word	0x20000a1c
 80012d4:	0800a398 	.word	0x0800a398
 80012d8:	20000a20 	.word	0x20000a20
 80012dc:	0800a3b0 	.word	0x0800a3b0
 80012e0:	20000a24 	.word	0x20000a24
 80012e4:	0800a2b4 	.word	0x0800a2b4
 80012e8:	08000b81 	.word	0x08000b81
 80012ec:	20000a04 	.word	0x20000a04
 80012f0:	0800a2d8 	.word	0x0800a2d8
 80012f4:	08002635 	.word	0x08002635
 80012f8:	20000a08 	.word	0x20000a08
 80012fc:	0800a2fc 	.word	0x0800a2fc
 8001300:	08002b8d 	.word	0x08002b8d
 8001304:	20000a0c 	.word	0x20000a0c
 8001308:	0800a320 	.word	0x0800a320
 800130c:	0800280d 	.word	0x0800280d
 8001310:	20000a10 	.word	0x20000a10
 8001314:	0800a344 	.word	0x0800a344
 8001318:	08002951 	.word	0x08002951
 800131c:	20000a14 	.word	0x20000a14

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f007 ff4d 	bl	80091ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <SystemClock_Config+0xcc>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <SystemClock_Config+0xcc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xd0>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <SystemClock_Config+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001390:	2308      	movs	r3, #8
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001394:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139e:	2304      	movs	r3, #4
 80013a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fbf2 	bl	8003b90 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b2:	f000 fb01 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2105      	movs	r1, #5
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fe53 	bl	8004080 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013e0:	f000 faea 	bl	80019b8 <Error_Handler>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3750      	adds	r7, #80	; 0x50
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_SPI1_Init+0x64>)
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <MX_SPI1_Init+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_SPI1_Init+0x64>)
 8001400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_SPI1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_SPI1_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_SPI1_Init+0x64>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_SPI1_Init+0x64>)
 8001428:	2238      	movs	r2, #56	; 0x38
 800142a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_SPI1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_SPI1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_SPI1_Init+0x64>)
 8001440:	220a      	movs	r2, #10
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_SPI1_Init+0x64>)
 8001446:	f003 f86d 	bl	8004524 <HAL_SPI_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001450:	f000 fab2 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200006a4 	.word	0x200006a4
 800145c:	40013000 	.word	0x40013000

08001460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b092      	sub	sp, #72	; 0x48
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2220      	movs	r2, #32
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f007 fe9f 	bl	80091ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <MX_TIM1_Init+0x12c>)
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <MX_TIM1_Init+0x130>)
 8001494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <MX_TIM1_Init+0x12c>)
 8001498:	2201      	movs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b3b      	ldr	r3, [pc, #236]	; (800158c <MX_TIM1_Init+0x12c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <MX_TIM1_Init+0x12c>)
 80014a4:	2268      	movs	r2, #104	; 0x68
 80014a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <MX_TIM1_Init+0x12c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <MX_TIM1_Init+0x12c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <MX_TIM1_Init+0x12c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ba:	4834      	ldr	r0, [pc, #208]	; (800158c <MX_TIM1_Init+0x12c>)
 80014bc:	f003 f97a 	bl	80047b4 <HAL_TIM_PWM_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80014c6:	f000 fa77 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d6:	4619      	mov	r1, r3
 80014d8:	482c      	ldr	r0, [pc, #176]	; (800158c <MX_TIM1_Init+0x12c>)
 80014da:	f004 f823 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80014e4:	f000 fa68 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	2360      	movs	r3, #96	; 0x60
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	481f      	ldr	r0, [pc, #124]	; (800158c <MX_TIM1_Init+0x12c>)
 800150e:	f003 fcb3 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001518:	f000 fa4e 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <MX_TIM1_Init+0x12c>)
 8001526:	f003 fca7 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001530:	f000 fa42 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	2208      	movs	r2, #8
 800153a:	4619      	mov	r1, r3
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_TIM1_Init+0x12c>)
 800153e:	f003 fc9b 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001548:	f000 fa36 	bl	80019b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM1_Init+0x12c>)
 8001570:	f004 f854 	bl	800561c <HAL_TIMEx_ConfigBreakDeadTime>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800157a:	f000 fa1d 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM1_Init+0x12c>)
 8001580:	f000 fb8e 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3748      	adds	r7, #72	; 0x48
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200006fc 	.word	0x200006fc
 8001590:	40010000 	.word	0x40010000

08001594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_TIM4_Init+0xac>)
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <MX_TIM4_Init+0xb0>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 327;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_TIM4_Init+0xac>)
 80015be:	f240 1247 	movw	r2, #327	; 0x147
 80015c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <MX_TIM4_Init+0xac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_TIM4_Init+0xac>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_TIM4_Init+0xac>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_TIM4_Init+0xac>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015dc:	4818      	ldr	r0, [pc, #96]	; (8001640 <MX_TIM4_Init+0xac>)
 80015de:	f003 f8e9 	bl	80047b4 <HAL_TIM_PWM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 f9e6 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4619      	mov	r1, r3
 80015fa:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_TIM4_Init+0xac>)
 80015fc:	f003 ff92 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001606:	f000 f9d7 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160a:	2360      	movs	r3, #96	; 0x60
 800160c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800160e:	23fa      	movs	r3, #250	; 0xfa
 8001610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM4_Init+0xac>)
 8001622:	f003 fc29 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800162c:	f000 f9c4 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM4_Init+0xac>)
 8001632:	f000 fb35 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000744 	.word	0x20000744
 8001644:	40000800 	.word	0x40000800

08001648 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_TIM13_Init+0x40>)
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <MX_TIM13_Init+0x44>)
 8001650:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_TIM13_Init+0x40>)
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_TIM13_Init+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_TIM13_Init+0x40>)
 8001660:	f242 720f 	movw	r2, #9999	; 0x270f
 8001664:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_TIM13_Init+0x40>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_TIM13_Init+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM13_Init+0x40>)
 8001674:	f002 ffdf 	bl	8004636 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800167e:	f000 f99b 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000078c 	.word	0x2000078c
 800168c:	40001c00 	.word	0x40001c00

08001690 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_UART4_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_UART4_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_UART4_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_UART4_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_UART4_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_UART4_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_UART4_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_UART4_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_UART4_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_UART4_Init+0x4c>)
 80016c8:	f004 f80e 	bl	80056e8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f971 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200008f4 	.word	0x200008f4
 80016e0:	40004c00 	.word	0x40004c00

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f003 ffe4 	bl	80056e8 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f947 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000938 	.word	0x20000938
 8001734:	40004400 	.word	0x40004400

08001738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART3_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 8001744:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART3_UART_Init+0x4c>)
 8001770:	f003 ffba 	bl	80056e8 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f91d 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000097c 	.word	0x2000097c
 8001788:	40004800 	.word	0x40004800

0800178c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART6_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017c4:	f003 ff90 	bl	80056e8 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f8f3 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200009c0 	.word	0x200009c0
 80017dc:	40011400 	.word	0x40011400

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_DMA_Init+0x5c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_DMA_Init+0x5c>)
 80017f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_DMA_Init+0x5c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	203a      	movs	r0, #58	; 0x3a
 8001808:	f001 fcd6 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800180c:	203a      	movs	r0, #58	; 0x3a
 800180e:	f001 fcef 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203b      	movs	r0, #59	; 0x3b
 8001818:	f001 fcce 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800181c:	203b      	movs	r0, #59	; 0x3b
 800181e:	f001 fce7 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2045      	movs	r0, #69	; 0x45
 8001828:	f001 fcc6 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800182c:	2045      	movs	r0, #69	; 0x45
 800182e:	f001 fcdf 	bl	80031f0 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	4b45      	ldr	r3, [pc, #276]	; (8001970 <MX_GPIO_Init+0x130>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a44      	ldr	r2, [pc, #272]	; (8001970 <MX_GPIO_Init+0x130>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b42      	ldr	r3, [pc, #264]	; (8001970 <MX_GPIO_Init+0x130>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <MX_GPIO_Init+0x130>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <MX_GPIO_Init+0x130>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <MX_GPIO_Init+0x130>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <MX_GPIO_Init+0x130>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a36      	ldr	r2, [pc, #216]	; (8001970 <MX_GPIO_Init+0x130>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <MX_GPIO_Init+0x130>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_GPIO_Init+0x130>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <MX_GPIO_Init+0x130>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <MX_GPIO_Init+0x130>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <MX_GPIO_Init+0x130>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <MX_GPIO_Init+0x130>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <MX_GPIO_Init+0x130>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <MX_GPIO_Init+0x130>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <MX_GPIO_Init+0x130>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <MX_GPIO_Init+0x130>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_SPISEL1_Pin|GPIO_SPISELw_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2150      	movs	r1, #80	; 0x50
 8001902:	481c      	ldr	r0, [pc, #112]	; (8001974 <MX_GPIO_Init+0x134>)
 8001904:	f002 f92a 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_EYE1_EN_Pin|GPIO_EYE2_EN_Pin|GPIO_BACKLIGHT1_Pin|GPIO_BACKLIGHT2_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_GPIO_Init+0x138>)
 8001910:	f002 f924 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_SPISEL1_Pin GPIO_SPISELw_Pin */
  GPIO_InitStruct.Pin = GPIO_SPISEL1_Pin|GPIO_SPISELw_Pin;
 8001914:	2350      	movs	r3, #80	; 0x50
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_GPIO_Init+0x134>)
 800192c:	f001 ff7a 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EYE1_EN_Pin GPIO_EYE2_EN_Pin GPIO_BACKLIGHT1_Pin GPIO_BACKLIGHT2_Pin */
  GPIO_InitStruct.Pin = GPIO_EYE1_EN_Pin|GPIO_EYE2_EN_Pin|GPIO_BACKLIGHT1_Pin|GPIO_BACKLIGHT2_Pin;
 8001930:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <MX_GPIO_Init+0x138>)
 800194a:	f001 ff6b 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_HWrev_0_Pin GPIO_HWrev_1_Pin GPIO_HWrev_2_Pin GPIO_HWrev_3_Pin */
  GPIO_InitStruct.Pin = GPIO_HWrev_0_Pin|GPIO_HWrev_1_Pin|GPIO_HWrev_2_Pin|GPIO_HWrev_3_Pin;
 800194e:	2378      	movs	r3, #120	; 0x78
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_GPIO_Init+0x138>)
 8001962:	f001 ff5f 	bl	8003824 <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3730      	adds	r7, #48	; 0x30
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020c00 	.word	0x40020c00

0800197c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM13)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d104      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timers_process_tick_interrupt_timer(0);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 fea0 	bl	80026d4 <timers_process_tick_interrupt_timer>
		timers_tick_timer();
 8001994:	f000 fe1a 	bl	80025cc <timers_tick_timer>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80019a2:	f001 fb31 	bl	8003008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40001c00 	.word	0x40001c00
 80019b4:	40001400 	.word	0x40001400

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>
	...

080019c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x54>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_MspInit+0x54>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x54>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_MspInit+0x54>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_MspInit+0x54>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_MspInit+0x54>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210f      	movs	r1, #15
 8001a06:	f06f 0001 	mvn.w	r0, #1
 8001a0a:	f001 fbd5 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a76:	23a0      	movs	r3, #160	; 0xa0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	f001 fec7 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <HAL_TIM_PWM_MspInit+0x180>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 809f 	bne.w	8001bfe <HAL_TIM_PWM_MspInit+0x152>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4b5a      	ldr	r3, [pc, #360]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	4a59      	ldr	r2, [pc, #356]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_TIM_PWM_MspInit+0x18c>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001ae4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aea:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001aec:	2240      	movs	r2, #64	; 0x40
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b4f      	ldr	r3, [pc, #316]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001afe:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001b20:	4844      	ldr	r0, [pc, #272]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b22:	f001 fb73 	bl	800320c <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001b2c:	f7ff ff44 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
 8001b36:	4a3f      	ldr	r2, [pc, #252]	; (8001c34 <HAL_TIM_PWM_MspInit+0x188>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_TIM_PWM_MspInit+0x194>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b44:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001b80:	482e      	ldr	r0, [pc, #184]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b82:	f001 fb43 	bl	800320c <HAL_DMA_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8001b8c:	f7ff ff14 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_TIM_PWM_MspInit+0x190>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <HAL_TIM_PWM_MspInit+0x19c>)
 8001ba0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001ba4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001ba8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001be0:	4818      	ldr	r0, [pc, #96]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001be2:	f001 fb13 	bl	800320c <HAL_DMA_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_TIM_PWM_MspInit+0x144>
    {
      Error_Handler();
 8001bec:	f7ff fee4 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <HAL_TIM_PWM_MspInit+0x198>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bfc:	e012      	b.n	8001c24 <HAL_TIM_PWM_MspInit+0x178>
  else if(htim_pwm->Instance==TIM4)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_TIM_PWM_MspInit+0x1a0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10d      	bne.n	8001c24 <HAL_TIM_PWM_MspInit+0x178>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_TIM_PWM_MspInit+0x184>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	200007d4 	.word	0x200007d4
 8001c38:	40026458 	.word	0x40026458
 8001c3c:	20000834 	.word	0x20000834
 8001c40:	40026440 	.word	0x40026440
 8001c44:	20000894 	.word	0x20000894
 8001c48:	400264a0 	.word	0x400264a0
 8001c4c:	40000800 	.word	0x40000800

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_TIM_Base_MspInit+0x48>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d115      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2105      	movs	r1, #5
 8001c82:	202c      	movs	r0, #44	; 0x2c
 8001c84:	f001 fa98 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c88:	202c      	movs	r0, #44	; 0x2c
 8001c8a:	f001 fab1 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40001c00 	.word	0x40001c00
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <HAL_TIM_MspPostInit+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11f      	bne.n	8001d02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001cde:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4818      	ldr	r0, [pc, #96]	; (8001d5c <HAL_TIM_MspPostInit+0xbc>)
 8001cfc:	f001 fd92 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d00:	e023      	b.n	8001d4a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_TIM_MspPostInit+0xc0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d11e      	bne.n	8001d4a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_TIM_MspPostInit+0xb8>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_TIM_MspPostInit+0xc4>)
 8001d46:	f001 fd6d 	bl	8003824 <HAL_GPIO_Init>
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40020c00 	.word	0x40020c00

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b090      	sub	sp, #64	; 0x40
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a84      	ldr	r2, [pc, #528]	; (8001f98 <HAL_UART_MspInit+0x230>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d153      	bne.n	8001e32 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a82      	ldr	r2, [pc, #520]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a7b      	ldr	r2, [pc, #492]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b72      	ldr	r3, [pc, #456]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dde:	2302      	movs	r3, #2
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dee:	2308      	movs	r3, #8
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4869      	ldr	r0, [pc, #420]	; (8001fa0 <HAL_UART_MspInit+0x238>)
 8001dfa:	f001 fd13 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e10:	2308      	movs	r3, #8
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4862      	ldr	r0, [pc, #392]	; (8001fa4 <HAL_UART_MspInit+0x23c>)
 8001e1c:	f001 fd02 	bl	8003824 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	2034      	movs	r0, #52	; 0x34
 8001e26:	f001 f9c7 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e2a:	2034      	movs	r0, #52	; 0x34
 8001e2c:	f001 f9e0 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e30:	e0ad      	b.n	8001f8e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5c      	ldr	r2, [pc, #368]	; (8001fa8 <HAL_UART_MspInit+0x240>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d134      	bne.n	8001ea6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e74:	230c      	movs	r3, #12
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e84:	2307      	movs	r3, #7
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4844      	ldr	r0, [pc, #272]	; (8001fa0 <HAL_UART_MspInit+0x238>)
 8001e90:	f001 fcc8 	bl	8003824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2105      	movs	r1, #5
 8001e98:	2026      	movs	r0, #38	; 0x26
 8001e9a:	f001 f98d 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e9e:	2026      	movs	r0, #38	; 0x26
 8001ea0:	f001 f9a6 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001ea4:	e073      	b.n	8001f8e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_UART_MspInit+0x244>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d135      	bne.n	8001f1c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efa:	2307      	movs	r3, #7
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <HAL_UART_MspInit+0x248>)
 8001f06:	f001 fc8d 	bl	8003824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	2027      	movs	r0, #39	; 0x27
 8001f10:	f001 f952 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f14:	2027      	movs	r0, #39	; 0x27
 8001f16:	f001 f96b 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001f1a:	e038      	b.n	8001f8e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART6)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_UART_MspInit+0x24c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d133      	bne.n	8001f8e <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_UART_MspInit+0x234>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <HAL_UART_MspInit+0x23c>)
 8001f7a:	f001 fc53 	bl	8003824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	2047      	movs	r0, #71	; 0x47
 8001f84:	f001 f918 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f88:	2047      	movs	r0, #71	; 0x47
 8001f8a:	f001 f931 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3740      	adds	r7, #64	; 0x40
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004c00 	.word	0x40004c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40004800 	.word	0x40004800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40011400 	.word	0x40011400

08001fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	2037      	movs	r0, #55	; 0x37
 8001fce:	f001 f8f3 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fd2:	2037      	movs	r0, #55	; 0x37
 8001fd4:	f001 f90c 	bl	80031f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_InitTick+0xa4>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_InitTick+0xa4>)
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_InitTick+0xa4>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fa5e 	bl	80044c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002004:	f002 fa34 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8002008:	4603      	mov	r3, r0
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_InitTick+0xa8>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9b      	lsrs	r3, r3, #18
 8002018:	3b01      	subs	r3, #1
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_InitTick+0xac>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_InitTick+0xb0>)
 8002020:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_InitTick+0xac>)
 8002024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002028:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800202a:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <HAL_InitTick+0xac>)
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_InitTick+0xac>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_InitTick+0xac>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <HAL_InitTick+0xac>)
 800203e:	f002 fafa 	bl	8004636 <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d104      	bne.n	8002052 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002048:	4806      	ldr	r0, [pc, #24]	; (8002064 <HAL_InitTick+0xac>)
 800204a:	f002 fb43 	bl	80046d4 <HAL_TIM_Base_Start_IT>
 800204e:	4603      	mov	r3, r0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3730      	adds	r7, #48	; 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	431bde83 	.word	0x431bde83
 8002064:	20000a28 	.word	0x20000a28
 8002068:	40001400 	.word	0x40001400

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <NMI_Handler+0x4>

08002072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler+0x4>

0800207e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <UsageFault_Handler+0x4>

0800208a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
	#else
    if((huart2.Instance->SR & UART_FLAG_RXNE) != RESET)
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <USART2_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart2.Instance->DR);
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <USART2_IRQHandler+0xac>)
 80020b6:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_ultrasonic1Handle, (uint8_t *)&data, 0, 0);
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <USART2_IRQHandler+0xb0>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	2200      	movs	r2, #0
 80020c0:	4920      	ldr	r1, [pc, #128]	; (8002144 <USART2_IRQHandler+0xac>)
 80020c2:	f004 f8a3 	bl	800620c <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart2);
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
    }
	#endif
  /* USER CODE END USART2_IRQn 1 */
}
 80020c6:	e036      	b.n	8002136 <USART2_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart2);
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart2);
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart2);
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <USART2_IRQHandler+0xa8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <USART2_IRQHandler+0xa8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <USART2_IRQHandler+0xa8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <USART2_IRQHandler+0xa8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <USART2_IRQHandler+0xa8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <USART2_IRQHandler+0xa8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000938 	.word	0x20000938
 8002144:	20000a70 	.word	0x20000a70
 8002148:	20000a18 	.word	0x20000a18

0800214c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	#else
    if((huart3.Instance->SR & UART_FLAG_RXNE) != RESET)
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <USART3_IRQHandler+0xa8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <USART3_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart3.Instance->DR);
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <USART3_IRQHandler+0xa8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <USART3_IRQHandler+0xac>)
 800216a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_ultrasonic2Handle, (uint8_t *)&data, 0, 0);
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <USART3_IRQHandler+0xb0>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	4920      	ldr	r1, [pc, #128]	; (80021f8 <USART3_IRQHandler+0xac>)
 8002176:	f004 f849 	bl	800620c <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart3);
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
	}
	#endif
  /* USER CODE END USART3_IRQn 1 */
}
 800217a:	e036      	b.n	80021ea <USART3_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart3);
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <USART3_IRQHandler+0xa8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <USART3_IRQHandler+0xa8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart3);
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <USART3_IRQHandler+0xa8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart3);
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart3);
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <USART3_IRQHandler+0xa8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000097c 	.word	0x2000097c
 80021f8:	20000a71 	.word	0x20000a71
 80021fc:	20000a1c 	.word	0x20000a1c

08002200 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002206:	f002 fd2f 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000078c 	.word	0x2000078c

08002214 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */
	#else
    if((huart4.Instance->SR & UART_FLAG_RXNE) != RESET)
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <UART4_IRQHandler+0xa8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <UART4_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart4.Instance->DR);
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <UART4_IRQHandler+0xa8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <UART4_IRQHandler+0xac>)
 8002232:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_interfaceBDHandle, (uint8_t *)&data, 0, 0);
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <UART4_IRQHandler+0xb0>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	2200      	movs	r2, #0
 800223c:	4920      	ldr	r1, [pc, #128]	; (80022c0 <UART4_IRQHandler+0xac>)
 800223e:	f003 ffe5 	bl	800620c <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart4);
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
	}
	#endif
  /* USER CODE END UART4_IRQn 1 */
}
 8002242:	e036      	b.n	80022b2 <UART4_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart4);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <UART4_IRQHandler+0xa8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <UART4_IRQHandler+0xa8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart4);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <UART4_IRQHandler+0xa8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <UART4_IRQHandler+0xa8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart4);
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <UART4_IRQHandler+0xa8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <UART4_IRQHandler+0xa8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart4);
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <UART4_IRQHandler+0xa8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <UART4_IRQHandler+0xa8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <UART4_IRQHandler+0xa8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <UART4_IRQHandler+0xa8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200008f4 	.word	0x200008f4
 80022c0:	20000a72 	.word	0x20000a72
 80022c4:	20000a20 	.word	0x20000a20

080022c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM7_IRQHandler+0x10>)
 80022ce:	f002 fccb 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000a28 	.word	0x20000a28

080022dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA2_Stream2_IRQHandler+0x10>)
 80022e2:	f001 f863 	bl	80033ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000834 	.word	0x20000834

080022f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA2_Stream3_IRQHandler+0x10>)
 80022f6:	f001 f859 	bl	80033ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200007d4 	.word	0x200007d4

08002304 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA2_Stream6_IRQHandler+0x10>)
 800230a:	f001 f84f 	bl	80033ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000894 	.word	0x20000894

08002318 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */
	#else
	if((huart6.Instance->SR & UART_FLAG_RXNE) != RESET)
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <USART6_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart6.Instance->DR);
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <USART6_IRQHandler+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <USART6_IRQHandler+0xc0>)
 8002336:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_debug_testHandle, (uint8_t *)&data, 0, 0);
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <USART6_IRQHandler+0xc4>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	2200      	movs	r2, #0
 8002340:	4925      	ldr	r1, [pc, #148]	; (80023d8 <USART6_IRQHandler+0xc0>)
 8002342:	f003 ff63 	bl	800620c <osMessageQueuePut>
 8002346:	e036      	b.n	80023b6 <USART6_IRQHandler+0x9e>
	}
	else
	{
		__HAL_UART_CLEAR_PEFLAG(&huart6);
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <USART6_IRQHandler+0xbc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart6);
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <USART6_IRQHandler+0xbc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart6);
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <USART6_IRQHandler+0xbc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart6);
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <USART6_IRQHandler+0xbc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart6);
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <USART6_IRQHandler+0xbc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <USART6_IRQHandler+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
	}
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <USART6_IRQHandler+0xbc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <USART6_IRQHandler+0xbc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
	#endif
  /* USER CODE END USART6_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200009c0 	.word	0x200009c0
 80023d8:	20000a73 	.word	0x20000a73
 80023dc:	20000a24 	.word	0x20000a24

080023e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e00a      	b.n	8002408 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023f2:	f3af 8000 	nop.w
 80023f6:	4601      	mov	r1, r0
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	60ba      	str	r2, [r7, #8]
 80023fe:	b2ca      	uxtb	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	dbf0      	blt.n	80023f2 <_read+0x12>
	}

return len;
 8002410:	687b      	ldr	r3, [r7, #4]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_close>:
	}
	return len;
}

int _close(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	return -1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002442:	605a      	str	r2, [r3, #4]
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_isatty>:

int _isatty(int file)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
	return 1;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f006 fd5a 	bl	8008f6c <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20020000 	.word	0x20020000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	20000a74 	.word	0x20000a74
 80024ec:	200099d8 	.word	0x200099d8

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <Uart_Init_Custom>:

#include "app_sensorboard.h"
#include "u_bsp_driver.h"

void Uart_Init_Custom(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0220 	orr.w	r2, r2, #32
 800252a:	60da      	str	r2, [r3, #12]
//	__HAL_UART_CLEAR_PEFLAG(huart);
//	__HAL_UART_CLEAR_FEFLAG(huart);
//	__HAL_UART_CLEAR_NEFLAG(huart);
//	__HAL_UART_CLEAR_OREFLAG(huart);
//	__HAL_UART_CLEAR_IDLEFLAG(huart);
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <timers_init>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void timers_init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim13);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <timers_init+0x10>)
 800253e:	f002 f8c9 	bl	80046d4 <HAL_TIM_Base_Start_IT>
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000078c 	.word	0x2000078c

0800254c <timers_register_timer>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
s8 timers_register_timer(u32 period, timer_handler handler)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  u8 i;

  for(i=0; i<MAX_TIMER; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e02a      	b.n	80025b2 <timers_register_timer+0x66>
  {
    if(timers[i].handler == null)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <timers_register_timer+0x7c>)
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	330c      	adds	r3, #12
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11f      	bne.n	80025ac <timers_register_timer+0x60>
    {
      timers[i].tick = 0;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <timers_register_timer+0x7c>)
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
      timers[i].id = i;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <timers_register_timer+0x7c>)
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	460a      	mov	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
      timers[i].period = period;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <timers_register_timer+0x7c>)
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	3308      	adds	r3, #8
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	601a      	str	r2, [r3, #0]
      timers[i].handler = handler;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <timers_register_timer+0x7c>)
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4413      	add	r3, r2
 80025a0:	330c      	adds	r3, #12
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]
      return i;
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	e007      	b.n	80025bc <timers_register_timer+0x70>
  for(i=0; i<MAX_TIMER; i++)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b0b      	cmp	r3, #11
 80025b6:	d9d1      	bls.n	800255c <timers_register_timer+0x10>
    }
  }
  return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000a78 	.word	0x20000a78

080025cc <timers_tick_timer>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void timers_tick_timer(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
  u8 i;

  for(i=0; i<MAX_TIMER; i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	e020      	b.n	800261a <timers_tick_timer+0x4e>
  {
    if(timers[i].handler == null)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <timers_tick_timer+0x64>)
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	330c      	adds	r3, #12
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <timers_tick_timer+0x46>
      continue;

    if(timers[i].busy == false)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a11      	ldr	r2, [pc, #68]	; (8002630 <timers_tick_timer+0x64>)
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	3301      	adds	r3, #1
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <timers_tick_timer+0x48>
      timers[i].tick++;
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	490d      	ldr	r1, [pc, #52]	; (8002630 <timers_tick_timer+0x64>)
 80025fc:	011a      	lsls	r2, r3, #4
 80025fe:	440a      	add	r2, r1
 8002600:	3204      	adds	r2, #4
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	3201      	adds	r2, #1
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <timers_tick_timer+0x64>)
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	440b      	add	r3, r1
 800260c:	3304      	adds	r3, #4
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e000      	b.n	8002614 <timers_tick_timer+0x48>
      continue;
 8002612:	bf00      	nop
  for(i=0; i<MAX_TIMER; i++)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	3301      	adds	r3, #1
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b0b      	cmp	r3, #11
 800261e:	d9db      	bls.n	80025d8 <timers_tick_timer+0xc>
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000a78 	.word	0x20000a78

08002634 <apps_timer_task>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_timer_task(void *argument)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  u8 i;

  while(1)
  {
    for(i=0; i<MAX_TIMER; i++)
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e03f      	b.n	80026c2 <apps_timer_task+0x8e>
    {
      if(timers[i].handler == null)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <apps_timer_task+0x9c>)
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	330c      	adds	r3, #12
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d033      	beq.n	80026ba <apps_timer_task+0x86>
        continue;

      if(timers[i].tick >= timers[i].period)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <apps_timer_task+0x9c>)
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	491b      	ldr	r1, [pc, #108]	; (80026d0 <apps_timer_task+0x9c>)
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	440b      	add	r3, r1
 8002666:	3308      	adds	r3, #8
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d326      	bcc.n	80026bc <apps_timer_task+0x88>
      {
        timers[i].busy = true;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <apps_timer_task+0x9c>)
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	3301      	adds	r3, #1
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
        timers[i].tick = 0;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <apps_timer_task+0x9c>)
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
        timers[i].handler(timers[i].id, *(u32 *)(argument));
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <apps_timer_task+0x9c>)
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	330c      	adds	r3, #12
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	490d      	ldr	r1, [pc, #52]	; (80026d0 <apps_timer_task+0x9c>)
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	440a      	add	r2, r1
 800269e:	f992 0000 	ldrsb.w	r0, [r2]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4798      	blx	r3
        timers[i].busy = false;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <apps_timer_task+0x9c>)
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	3301      	adds	r3, #1
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e000      	b.n	80026bc <apps_timer_task+0x88>
        continue;
 80026ba:	bf00      	nop
    for(i=0; i<MAX_TIMER; i++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b0b      	cmp	r3, #11
 80026c6:	d9bc      	bls.n	8002642 <apps_timer_task+0xe>
      }
    }
    osDelay(5);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f003 fd10 	bl	80060ee <osDelay>
    for(i=0; i<MAX_TIMER; i++)
 80026ce:	e7b5      	b.n	800263c <apps_timer_task+0x8>
 80026d0:	20000a78 	.word	0x20000a78

080026d4 <timers_process_tick_interrupt_timer>:
    interrupt_timers[i].handler = null;
  }
}

void timers_process_tick_interrupt_timer(u32 param1)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	u8 i;

	for(i=0; i<MAX_INTERRUP_TIMER; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e054      	b.n	800278c <timers_process_tick_interrupt_timer+0xb8>
	{
		if(interrupt_timers[i].handler == null) continue;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	330c      	adds	r3, #12
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d046      	beq.n	8002780 <timers_process_tick_interrupt_timer+0xac>
		if(interrupt_timers[i].busy == true) continue;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	3301      	adds	r3, #1
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d040      	beq.n	8002784 <timers_process_tick_interrupt_timer+0xb0>
		interrupt_timers[i].tick++;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4925      	ldr	r1, [pc, #148]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002706:	011a      	lsls	r2, r3, #4
 8002708:	440a      	add	r2, r1
 800270a:	3204      	adds	r2, #4
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	3201      	adds	r2, #1
 8002710:	4922      	ldr	r1, [pc, #136]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	440b      	add	r3, r1
 8002716:	3304      	adds	r3, #4
 8002718:	601a      	str	r2, [r3, #0]
		if(interrupt_timers[i].tick >= interrupt_timers[i].period)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	491c      	ldr	r1, [pc, #112]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	440b      	add	r3, r1
 800272e:	3308      	adds	r3, #8
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d327      	bcc.n	8002786 <timers_process_tick_interrupt_timer+0xb2>
		{
			interrupt_timers[i].busy = true;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	3301      	adds	r3, #1
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
			interrupt_timers[i].tick = 0;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
			interrupt_timers[i].handler(interrupt_timers[i].id, param1);
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	330c      	adds	r3, #12
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	440a      	add	r2, r1
 8002766:	f992 2000 	ldrsb.w	r2, [r2]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4610      	mov	r0, r2
 800276e:	4798      	blx	r3
			interrupt_timers[i].busy = false;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <timers_process_tick_interrupt_timer+0xc8>)
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4413      	add	r3, r2
 8002778:	3301      	adds	r3, #1
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e002      	b.n	8002786 <timers_process_tick_interrupt_timer+0xb2>
		if(interrupt_timers[i].handler == null) continue;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <timers_process_tick_interrupt_timer+0xb2>
		if(interrupt_timers[i].busy == true) continue;
 8002784:	bf00      	nop
	for(i=0; i<MAX_INTERRUP_TIMER; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d9a7      	bls.n	80026e2 <timers_process_tick_interrupt_timer+0xe>
		}
	}
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000b38 	.word	0x20000b38

080027a0 <init_p_interfaceboard>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_p_interfaceboard(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	Uart_Init_Custom(&huart4);
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <init_p_interfaceboard+0x18>)
 80027a6:	f7ff feb5 	bl	8002514 <Uart_Init_Custom>
	osThreadResume (p_interfaceBDHandle);
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <init_p_interfaceboard+0x1c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fc7c 	bl	80060ac <osThreadResume>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200008f4 	.word	0x200008f4
 80027bc:	20000a10 	.word	0x20000a10

080027c0 <B2BChksumMake>:

uint8_t B2BChksumMake(uint8_t* _data, uint8_t _len)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]

	for(int i = 0 ; i < _len ; i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e009      	b.n	80027ea <B2BChksumMake+0x2a>
	{
		chksum += _data[i];
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	4413      	add	r3, r2
 80027e2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0 ; i < _len ; i++)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbf1      	blt.n	80027d6 <B2BChksumMake+0x16>
	}
	chksum ^= 0xFF;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	73fb      	strb	r3, [r7, #15]
	chksum += 1;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	3301      	adds	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]

	return chksum;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <p_interfaceBD_task>:


void p_interfaceBD_task(void *argument)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	//uint8_t data_seq = 0;
	u8 data;
	osMessageQueueReset(queue_interfaceBDHandle);
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <p_interfaceBD_task+0x10c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fdb5 	bl	8006388 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_interfaceBDHandle, &data, NULL, 10) == osOK)
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <p_interfaceBD_task+0x10c>)
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	f107 010f 	add.w	r1, r7, #15
 8002826:	230a      	movs	r3, #10
 8002828:	2200      	movs	r2, #0
 800282a:	f003 fd4f 	bl	80062cc <osMessageQueueGet>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f4      	beq.n	800281e <p_interfaceBD_task+0x12>
		}
		else
		{
			// SEND

			TX_PACKET_B2B[0] = 0xFF;
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <p_interfaceBD_task+0x110>)
 8002836:	22ff      	movs	r2, #255	; 0xff
 8002838:	701a      	strb	r2, [r3, #0]
			TX_PACKET_B2B[1] = 0xFF;
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <p_interfaceBD_task+0x110>)
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	705a      	strb	r2, [r3, #1]
			TX_PACKET_B2B[2] = 0x0A;
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <p_interfaceBD_task+0x110>)
 8002842:	220a      	movs	r2, #10
 8002844:	709a      	strb	r2, [r3, #2]
			TX_PACKET_B2B[3] = 0x0C; // protocol defined
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <p_interfaceBD_task+0x110>)
 8002848:	220c      	movs	r2, #12
 800284a:	70da      	strb	r2, [r3, #3]

			TX_PACKET_B2B[4] = 8 + 1;// data + chksum
 800284c:	4b33      	ldr	r3, [pc, #204]	; (800291c <p_interfaceBD_task+0x110>)
 800284e:	2209      	movs	r2, #9
 8002850:	711a      	strb	r2, [r3, #4]
			// TOF 1
			TX_PACKET_B2B[5] = 0x00;
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <p_interfaceBD_task+0x110>)
 8002854:	2200      	movs	r2, #0
 8002856:	715a      	strb	r2, [r3, #5]
			TX_PACKET_B2B[6] = 0x00;
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <p_interfaceBD_task+0x110>)
 800285a:	2200      	movs	r2, #0
 800285c:	719a      	strb	r2, [r3, #6]
			// TOF 2
			TX_PACKET_B2B[7] = 0x00;
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <p_interfaceBD_task+0x110>)
 8002860:	2200      	movs	r2, #0
 8002862:	71da      	strb	r2, [r3, #7]
			TX_PACKET_B2B[8] = 0x00;
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <p_interfaceBD_task+0x110>)
 8002866:	2200      	movs	r2, #0
 8002868:	721a      	strb	r2, [r3, #8]

			TX_PACKET_B2B[9] = 0xDE;
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <p_interfaceBD_task+0x110>)
 800286c:	22de      	movs	r2, #222	; 0xde
 800286e:	725a      	strb	r2, [r3, #9]
			TX_PACKET_B2B[10] = 0xDE;
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <p_interfaceBD_task+0x110>)
 8002872:	22de      	movs	r2, #222	; 0xde
 8002874:	729a      	strb	r2, [r3, #10]
			TX_PACKET_B2B[11] = 0xDE;
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <p_interfaceBD_task+0x110>)
 8002878:	22de      	movs	r2, #222	; 0xde
 800287a:	72da      	strb	r2, [r3, #11]
			TX_PACKET_B2B[12] = 0xDE;
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <p_interfaceBD_task+0x110>)
 800287e:	22de      	movs	r2, #222	; 0xde
 8002880:	731a      	strb	r2, [r3, #12]
			if(gv.ultrasonic_1 != 9999)
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <p_interfaceBD_task+0x114>)
 8002884:	885b      	ldrh	r3, [r3, #2]
 8002886:	f242 720f 	movw	r2, #9999	; 0x270f
 800288a:	4293      	cmp	r3, r2
 800288c:	d015      	beq.n	80028ba <p_interfaceBD_task+0xae>
			{
				TX_PACKET_B2B[9] = (uint8_t)((gv.ultrasonic_1 / 10 ) & 0x00FF);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <p_interfaceBD_task+0x114>)
 8002890:	885b      	ldrh	r3, [r3, #2]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <p_interfaceBD_task+0x118>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	b29b      	uxth	r3, r3
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <p_interfaceBD_task+0x110>)
 80028a0:	725a      	strb	r2, [r3, #9]
				TX_PACKET_B2B[10] = (uint8_t)(((gv.ultrasonic_1 / 10 ) & 0xFF00) >> 8);
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <p_interfaceBD_task+0x114>)
 80028a4:	885b      	ldrh	r3, [r3, #2]
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <p_interfaceBD_task+0x118>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <p_interfaceBD_task+0x110>)
 80028b8:	729a      	strb	r2, [r3, #10]

			}
			if(gv.ultrasonic_2 != 9999)
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <p_interfaceBD_task+0x114>)
 80028bc:	889b      	ldrh	r3, [r3, #4]
 80028be:	f242 720f 	movw	r2, #9999	; 0x270f
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d015      	beq.n	80028f2 <p_interfaceBD_task+0xe6>
			{
				TX_PACKET_B2B[11] = (uint8_t)((gv.ultrasonic_2 / 10 ) & 0x00FF);
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <p_interfaceBD_task+0x114>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <p_interfaceBD_task+0x118>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <p_interfaceBD_task+0x110>)
 80028d8:	72da      	strb	r2, [r3, #11]
				TX_PACKET_B2B[12] = (uint8_t)(((gv.ultrasonic_2 / 10 ) & 0xFF00) >> 8);
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <p_interfaceBD_task+0x114>)
 80028dc:	889b      	ldrh	r3, [r3, #4]
 80028de:	4a11      	ldr	r2, [pc, #68]	; (8002924 <p_interfaceBD_task+0x118>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <p_interfaceBD_task+0x110>)
 80028f0:	731a      	strb	r2, [r3, #12]
			}
			TX_PACKET_B2B[13] = B2BChksumMake(TX_PACKET_B2B, 13);
 80028f2:	210d      	movs	r1, #13
 80028f4:	4809      	ldr	r0, [pc, #36]	; (800291c <p_interfaceBD_task+0x110>)
 80028f6:	f7ff ff63 	bl	80027c0 <B2BChksumMake>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <p_interfaceBD_task+0x110>)
 8002900:	735a      	strb	r2, [r3, #13]
			HAL_UART_Transmit(&huart3, TX_PACKET_B2B, 14, 100);
 8002902:	2364      	movs	r3, #100	; 0x64
 8002904:	220e      	movs	r2, #14
 8002906:	4905      	ldr	r1, [pc, #20]	; (800291c <p_interfaceBD_task+0x110>)
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <p_interfaceBD_task+0x11c>)
 800290a:	f002 ff3a 	bl	8005782 <HAL_UART_Transmit>
			osDelay(100);
 800290e:	2064      	movs	r0, #100	; 0x64
 8002910:	f003 fbed 	bl	80060ee <osDelay>
		if(osMessageQueueGet(queue_interfaceBDHandle, &data, NULL, 10) == osOK)
 8002914:	e783      	b.n	800281e <p_interfaceBD_task+0x12>
 8002916:	bf00      	nop
 8002918:	20000a20 	.word	0x20000a20
 800291c:	20000b68 	.word	0x20000b68
 8002920:	200000ac 	.word	0x200000ac
 8002924:	cccccccd 	.word	0xcccccccd
 8002928:	2000097c 	.word	0x2000097c

0800292c <init_p_uart_test>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_p_uart_test(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	Uart_Init_Custom(&huart6); // DBG TEST
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <init_p_uart_test+0x18>)
 8002932:	f7ff fdef 	bl	8002514 <Uart_Init_Custom>
	osThreadResume (p_uart_testHandle);
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <init_p_uart_test+0x1c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fbb6 	bl	80060ac <osThreadResume>
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200009c0 	.word	0x200009c0
 8002948:	20000a14 	.word	0x20000a14
 800294c:	00000000 	.word	0x00000000

08002950 <p_uart_test_task>:



void p_uart_test_task(void *argument)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	bool is_arrival_packet = false;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
	u8 data;
	memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 800295c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002960:	2100      	movs	r1, #0
 8002962:	4849      	ldr	r0, [pc, #292]	; (8002a88 <p_uart_test_task+0x138>)
 8002964:	f006 fc33 	bl	80091ce <memset>

	osMessageQueueReset(queue_debug_testHandle);
 8002968:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <p_uart_test_task+0x13c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fd0b 	bl	8006388 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_debug_testHandle, &data, NULL, 100) == osOK)
 8002972:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <p_uart_test_task+0x13c>)
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	f107 010e 	add.w	r1, r7, #14
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	2200      	movs	r2, #0
 800297e:	f003 fca5 	bl	80062cc <osMessageQueueGet>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d177      	bne.n	8002a78 <p_uart_test_task+0x128>
		{
			if(data == '[')
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	2b5b      	cmp	r3, #91	; 0x5b
 800298c:	d10b      	bne.n	80029a6 <p_uart_test_task+0x56>
			{
				buffer_len = 0;
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <p_uart_test_task+0x140>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
				is_arrival_packet = false;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
				memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 8002998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299c:	2100      	movs	r1, #0
 800299e:	483a      	ldr	r0, [pc, #232]	; (8002a88 <p_uart_test_task+0x138>)
 80029a0:	f006 fc15 	bl	80091ce <memset>
 80029a4:	e00f      	b.n	80029c6 <p_uart_test_task+0x76>
			}
			else if(data == ']') is_arrival_packet = true;
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	2b5d      	cmp	r3, #93	; 0x5d
 80029aa:	d102      	bne.n	80029b2 <p_uart_test_task+0x62>
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e009      	b.n	80029c6 <p_uart_test_task+0x76>
			else buffer[buffer_len++] = data;
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <p_uart_test_task+0x140>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	b2d1      	uxtb	r1, r2
 80029ba:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <p_uart_test_task+0x140>)
 80029bc:	7011      	strb	r1, [r2, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	7bb9      	ldrb	r1, [r7, #14]
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <p_uart_test_task+0x138>)
 80029c4:	5499      	strb	r1, [r3, r2]

		    if((is_arrival_packet == true) && (buffer_len > 4))
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d1d2      	bne.n	8002972 <p_uart_test_task+0x22>
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <p_uart_test_task+0x140>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d9ce      	bls.n	8002972 <p_uart_test_task+0x22>
			{
		        if (strncmp((char *)buffer, STR_DEBUG_MODE_ON, strlen(STR_DEBUG_MODE_ON)) == 0) gv.debug_mode = true;
 80029d4:	2207      	movs	r2, #7
 80029d6:	492f      	ldr	r1, [pc, #188]	; (8002a94 <p_uart_test_task+0x144>)
 80029d8:	482b      	ldr	r0, [pc, #172]	; (8002a88 <p_uart_test_task+0x138>)
 80029da:	f006 fe2c 	bl	8009636 <strncmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <p_uart_test_task+0x9c>
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <p_uart_test_task+0x148>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
 80029ea:	e039      	b.n	8002a60 <p_uart_test_task+0x110>
		        else if (strncmp((char *)buffer, STR_DEBUG_MODE_OFF, strlen(STR_DEBUG_MODE_OFF)) == 0) gv.debug_mode = false;
 80029ec:	2208      	movs	r2, #8
 80029ee:	492b      	ldr	r1, [pc, #172]	; (8002a9c <p_uart_test_task+0x14c>)
 80029f0:	4825      	ldr	r0, [pc, #148]	; (8002a88 <p_uart_test_task+0x138>)
 80029f2:	f006 fe20 	bl	8009636 <strncmp>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <p_uart_test_task+0xb4>
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <p_uart_test_task+0x148>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
 8002a02:	e02d      	b.n	8002a60 <p_uart_test_task+0x110>
		        else if (strncmp((char *)buffer, STR_FRONTLIGHT_ON, strlen(STR_FRONTLIGHT_ON)) == 0) FrontLight_SetPWM(FRONTLIGHTON);
 8002a04:	2207      	movs	r2, #7
 8002a06:	4926      	ldr	r1, [pc, #152]	; (8002aa0 <p_uart_test_task+0x150>)
 8002a08:	481f      	ldr	r0, [pc, #124]	; (8002a88 <p_uart_test_task+0x138>)
 8002a0a:	f006 fe14 	bl	8009636 <strncmp>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <p_uart_test_task+0xf2>
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <p_uart_test_task+0x154>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fe94 	bl	8000748 <__aeabi_ui2d>
 8002a20:	a317      	add	r3, pc, #92	; (adr r3, 8002a80 <p_uart_test_task+0x130>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fc23 	bl	8000270 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fd ff03 	bl	800083c <__aeabi_d2uiz>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fb38 	bl	80010b0 <FrontLight_SetPWM>
 8002a40:	e00e      	b.n	8002a60 <p_uart_test_task+0x110>
		        else if (strncmp((char *)buffer, STR_FRONTLIGHT_OFF, strlen(STR_FRONTLIGHT_OFF)) == 0) FrontLight_SetPWM(FRONTLIGHTOFF);
 8002a42:	2208      	movs	r2, #8
 8002a44:	4918      	ldr	r1, [pc, #96]	; (8002aa8 <p_uart_test_task+0x158>)
 8002a46:	4810      	ldr	r0, [pc, #64]	; (8002a88 <p_uart_test_task+0x138>)
 8002a48:	f006 fdf5 	bl	8009636 <strncmp>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <p_uart_test_task+0x10a>
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fe fb2c 	bl	80010b0 <FrontLight_SetPWM>
 8002a58:	e002      	b.n	8002a60 <p_uart_test_task+0x110>
		        else printf("command not found\r\n");
 8002a5a:	4814      	ldr	r0, [pc, #80]	; (8002aac <p_uart_test_task+0x15c>)
 8002a5c:	f006 fd26 	bl	80094ac <puts>

				buffer_len = 0;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <p_uart_test_task+0x140>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
				memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 8002a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4806      	ldr	r0, [pc, #24]	; (8002a88 <p_uart_test_task+0x138>)
 8002a6e:	f006 fbae 	bl	80091ce <memset>
				is_arrival_packet = false;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e77c      	b.n	8002972 <p_uart_test_task+0x22>
			}
			if(buffer_len > MAX_CONFIG_LENGTH) buffer_len = 0;
		}
		else osDelay(100);
 8002a78:	2064      	movs	r0, #100	; 0x64
 8002a7a:	f003 fb38 	bl	80060ee <osDelay>
		if(osMessageQueueGet(queue_debug_testHandle, &data, NULL, 100) == osOK)
 8002a7e:	e778      	b.n	8002972 <p_uart_test_task+0x22>
 8002a80:	66666666 	.word	0x66666666
 8002a84:	3fee6666 	.word	0x3fee6666
 8002a88:	20000c68 	.word	0x20000c68
 8002a8c:	20000a24 	.word	0x20000a24
 8002a90:	20000e68 	.word	0x20000e68
 8002a94:	0800a250 	.word	0x0800a250
 8002a98:	200000ac 	.word	0x200000ac
 8002a9c:	0800a258 	.word	0x0800a258
 8002aa0:	0800a264 	.word	0x0800a264
 8002aa4:	20000744 	.word	0x20000744
 8002aa8:	0800a26c 	.word	0x0800a26c
 8002aac:	0800a278 	.word	0x0800a278

08002ab0 <init_ultrasonic_hg_c40u>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_ultrasonic_hg_c40u(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0

	TX_PACKET_HGC40U_Trigger[0] = 0x02;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	701a      	strb	r2, [r3, #0]
	TX_PACKET_HGC40U_Trigger[1] = '#';
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002abc:	2223      	movs	r2, #35	; 0x23
 8002abe:	705a      	strb	r2, [r3, #1]
	TX_PACKET_HGC40U_Trigger[2] = 'T';
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ac2:	2254      	movs	r2, #84	; 0x54
 8002ac4:	709a      	strb	r2, [r3, #2]
	TX_PACKET_HGC40U_Trigger[3] = 'r';
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ac8:	2272      	movs	r2, #114	; 0x72
 8002aca:	70da      	strb	r2, [r3, #3]
	TX_PACKET_HGC40U_Trigger[4] = 'i';
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ace:	2269      	movs	r2, #105	; 0x69
 8002ad0:	711a      	strb	r2, [r3, #4]
	TX_PACKET_HGC40U_Trigger[5] = 'g';
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ad4:	2267      	movs	r2, #103	; 0x67
 8002ad6:	715a      	strb	r2, [r3, #5]
	TX_PACKET_HGC40U_Trigger[6] = 'g';
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ada:	2267      	movs	r2, #103	; 0x67
 8002adc:	719a      	strb	r2, [r3, #6]
	TX_PACKET_HGC40U_Trigger[7] = 'e';
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ae0:	2265      	movs	r2, #101	; 0x65
 8002ae2:	71da      	strb	r2, [r3, #7]
	TX_PACKET_HGC40U_Trigger[8] = 'r';
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002ae6:	2272      	movs	r2, #114	; 0x72
 8002ae8:	721a      	strb	r2, [r3, #8]
	TX_PACKET_HGC40U_Trigger[9] = 0x03;
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002aec:	2203      	movs	r2, #3
 8002aee:	725a      	strb	r2, [r3, #9]

	TX_PACKET_HGC40U_SET_UART_Trigger[0] = 0x02;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
	TX_PACKET_HGC40U_SET_UART_Trigger[1] = '#';
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002af8:	2223      	movs	r2, #35	; 0x23
 8002afa:	705a      	strb	r2, [r3, #1]
	TX_PACKET_HGC40U_SET_UART_Trigger[2] = 'M';
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002afe:	224d      	movs	r2, #77	; 0x4d
 8002b00:	709a      	strb	r2, [r3, #2]
	TX_PACKET_HGC40U_SET_UART_Trigger[3] = 'o';
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b04:	226f      	movs	r2, #111	; 0x6f
 8002b06:	70da      	strb	r2, [r3, #3]
	TX_PACKET_HGC40U_SET_UART_Trigger[4] = 'd';
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b0a:	2264      	movs	r2, #100	; 0x64
 8002b0c:	711a      	strb	r2, [r3, #4]
	TX_PACKET_HGC40U_SET_UART_Trigger[5] = 'e';
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b10:	2265      	movs	r2, #101	; 0x65
 8002b12:	715a      	strb	r2, [r3, #5]
	TX_PACKET_HGC40U_SET_UART_Trigger[6] = '|';
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b16:	227c      	movs	r2, #124	; 0x7c
 8002b18:	719a      	strb	r2, [r3, #6]
	TX_PACKET_HGC40U_SET_UART_Trigger[7] = '1';
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b1c:	2231      	movs	r2, #49	; 0x31
 8002b1e:	71da      	strb	r2, [r3, #7]
	TX_PACKET_HGC40U_SET_UART_Trigger[8] = 0x03;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <init_ultrasonic_hg_c40u+0xcc>)
 8002b22:	2203      	movs	r2, #3
 8002b24:	721a      	strb	r2, [r3, #8]


	Uart_Init_Custom(&huart2);
 8002b26:	4816      	ldr	r0, [pc, #88]	; (8002b80 <init_ultrasonic_hg_c40u+0xd0>)
 8002b28:	f7ff fcf4 	bl	8002514 <Uart_Init_Custom>
	Uart_Init_Custom(&huart3);
 8002b2c:	4815      	ldr	r0, [pc, #84]	; (8002b84 <init_ultrasonic_hg_c40u+0xd4>)
 8002b2e:	f7ff fcf1 	bl	8002514 <Uart_Init_Custom>

	HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 9, 100);
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	2209      	movs	r2, #9
 8002b36:	4910      	ldr	r1, [pc, #64]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <init_ultrasonic_hg_c40u+0xd0>)
 8002b3a:	f002 fe22 	bl	8005782 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 9, 100);
 8002b3e:	2364      	movs	r3, #100	; 0x64
 8002b40:	2209      	movs	r2, #9
 8002b42:	490d      	ldr	r1, [pc, #52]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <init_ultrasonic_hg_c40u+0xd4>)
 8002b46:	f002 fe1c 	bl	8005782 <HAL_UART_Transmit>

	osDelay(1000);
 8002b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b4e:	f003 face 	bl	80060ee <osDelay>

	HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 9, 100);
 8002b52:	2364      	movs	r3, #100	; 0x64
 8002b54:	2209      	movs	r2, #9
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002b58:	4809      	ldr	r0, [pc, #36]	; (8002b80 <init_ultrasonic_hg_c40u+0xd0>)
 8002b5a:	f002 fe12 	bl	8005782 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 9, 100);
 8002b5e:	2364      	movs	r3, #100	; 0x64
 8002b60:	2209      	movs	r2, #9
 8002b62:	4905      	ldr	r1, [pc, #20]	; (8002b78 <init_ultrasonic_hg_c40u+0xc8>)
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <init_ultrasonic_hg_c40u+0xd4>)
 8002b66:	f002 fe0c 	bl	8005782 <HAL_UART_Transmit>
	osThreadResume (p_ultrasonicHandle);
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <init_ultrasonic_hg_c40u+0xd8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fa9c 	bl	80060ac <osThreadResume>


}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000e6c 	.word	0x20000e6c
 8002b7c:	20000e80 	.word	0x20000e80
 8002b80:	20000938 	.word	0x20000938
 8002b84:	2000097c 	.word	0x2000097c
 8002b88:	20000a0c 	.word	0x20000a0c

08002b8c <p_ultrasonic_task>:
uint8_t rx_buf1[10];
uint8_t rx_buf2[10];
uint8_t rx_buf1_len;
uint8_t rx_buf2_len;
void p_ultrasonic_task(void *argument)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	uint8_t data_seq1 = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
	uint8_t data_seq2 = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73bb      	strb	r3, [r7, #14]

	uint8_t sensor_idx = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	737b      	strb	r3, [r7, #13]
	u8 data;
	osMessageQueueReset(queue_ultrasonic1Handle);
 8002ba0:	4b97      	ldr	r3, [pc, #604]	; (8002e00 <p_ultrasonic_task+0x274>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fbef 	bl	8006388 <osMessageQueueReset>
	osMessageQueueReset(queue_ultrasonic2Handle);
 8002baa:	4b96      	ldr	r3, [pc, #600]	; (8002e04 <p_ultrasonic_task+0x278>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fbea 	bl	8006388 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_ultrasonic1Handle, &data, NULL, 10) == osOK)
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <p_ultrasonic_task+0x274>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f107 010c 	add.w	r1, r7, #12
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f003 fb84 	bl	80062cc <osMessageQueueGet>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 80b3 	bne.w	8002d32 <p_ultrasonic_task+0x1a6>
		{
			if(data == HGC40_HEADER_1) data_seq1 = 1; // HEADER1
 8002bcc:	7b3b      	ldrb	r3, [r7, #12]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d102      	bne.n	8002bd8 <p_ultrasonic_task+0x4c>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e7ed      	b.n	8002bb4 <p_ultrasonic_task+0x28>
			else if((data_seq1 == 1) && (data == HGC40_HEADER_2))
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10d      	bne.n	8002bfa <p_ultrasonic_task+0x6e>
 8002bde:	7b3b      	ldrb	r3, [r7, #12]
 8002be0:	2b5e      	cmp	r3, #94	; 0x5e
 8002be2:	d10a      	bne.n	8002bfa <p_ultrasonic_task+0x6e>
			{
				data_seq1 = 2; // HEADER2
 8002be4:	2302      	movs	r3, #2
 8002be6:	73fb      	strb	r3, [r7, #15]
				rx_buf1_len = 0;
 8002be8:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
				memset(rx_buf1, 0x00, 10);
 8002bee:	220a      	movs	r2, #10
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4886      	ldr	r0, [pc, #536]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002bf4:	f006 faeb 	bl	80091ce <memset>
 8002bf8:	e1a8      	b.n	8002f4c <p_ultrasonic_task+0x3c0>
			}
			else if(data_seq1 == 2)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d1d9      	bne.n	8002bb4 <p_ultrasonic_task+0x28>
			{
				if(data == HGC40_TAIL)
 8002c00:	7b3b      	ldrb	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	f040 808a 	bne.w	8002d1c <p_ultrasonic_task+0x190>
				{
					if(rx_buf1_len < 6) sensor1.m_fail_cnt = 0;
 8002c08:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d802      	bhi.n	8002c16 <p_ultrasonic_task+0x8a>
 8002c10:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <p_ultrasonic_task+0x284>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	70da      	strb	r2, [r3, #3]
					if(rx_buf1_len == 4)
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d12f      	bne.n	8002c7e <p_ultrasonic_task+0xf2>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 1000
 8002c1e:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0') * 100
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	0152      	lsls	r2, r2, #5
 8002c2a:	1ad2      	subs	r2, r2, r3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	3b30      	subs	r3, #48	; 0x30
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	0089      	lsls	r1, r1, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	4619      	mov	r1, r3
 8002c44:	0088      	lsls	r0, r1, #2
 8002c46:	4619      	mov	r1, r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	440b      	add	r3, r1
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b29a      	uxth	r2, r3
									+ (rx_buf1[2] - '0') * 10
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002c56:	789b      	ldrb	r3, [r3, #2]
 8002c58:	3b30      	subs	r3, #48	; 0x30
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	0089      	lsls	r1, r1, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	b29a      	uxth	r2, r3
									+ (rx_buf1[3] - '0');
 8002c6a:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002c6c:	78db      	ldrb	r3, [r3, #3]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b30      	subs	r3, #48	; 0x30
 8002c76:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 1000
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002c7a:	805a      	strh	r2, [r3, #2]
 8002c7c:	e79a      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 3)
 8002c7e:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d122      	bne.n	8002ccc <p_ultrasonic_task+0x140>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 100
 8002c86:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0') * 10
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	0091      	lsls	r1, r2, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	3b30      	subs	r3, #48	; 0x30
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4619      	mov	r1, r3
 8002cac:	0089      	lsls	r1, r1, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
									+ (rx_buf1[2] - '0');
 8002cb8:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b30      	subs	r3, #48	; 0x30
 8002cc4:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 100
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002cc8:	805a      	strh	r2, [r3, #2]
 8002cca:	e773      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 2)
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d112      	bne.n	8002cfa <p_ultrasonic_task+0x16e>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 10
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0');
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b30      	subs	r3, #48	; 0x30
 8002cf2:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 10
 8002cf4:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002cf6:	805a      	strh	r2, [r3, #2]
 8002cf8:	e75c      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 1)
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <p_ultrasonic_task+0x186>
						gv.ultrasonic_1 = (rx_buf1[0] - '0');
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b30      	subs	r3, #48	; 0x30
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002d0e:	805a      	strh	r2, [r3, #2]
 8002d10:	e750      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else gv.ultrasonic_1 = 9999;
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002d14:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d18:	805a      	strh	r2, [r3, #2]
 8002d1a:	e74b      	b.n	8002bb4 <p_ultrasonic_task+0x28>
				}
				else rx_buf1[rx_buf1_len++] = data;
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	b2d1      	uxtb	r1, r2
 8002d24:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <p_ultrasonic_task+0x27c>)
 8002d26:	7011      	strb	r1, [r2, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	7b39      	ldrb	r1, [r7, #12]
 8002d2c:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <p_ultrasonic_task+0x280>)
 8002d2e:	5499      	strb	r1, [r3, r2]
 8002d30:	e740      	b.n	8002bb4 <p_ultrasonic_task+0x28>
			}
		}
		else if(osMessageQueueGet(queue_ultrasonic2Handle, &data, NULL, 10) == osOK)
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <p_ultrasonic_task+0x278>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f107 010c 	add.w	r1, r7, #12
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f003 fac5 	bl	80062cc <osMessageQueueGet>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 80c7 	bne.w	8002ed8 <p_ultrasonic_task+0x34c>
		{
			if(data == HGC40_HEADER_1) data_seq2 = 1; // HEADER1
 8002d4a:	7b3b      	ldrb	r3, [r7, #12]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d102      	bne.n	8002d56 <p_ultrasonic_task+0x1ca>
 8002d50:	2301      	movs	r3, #1
 8002d52:	73bb      	strb	r3, [r7, #14]
 8002d54:	e72e      	b.n	8002bb4 <p_ultrasonic_task+0x28>
			else if((data_seq2 == 1) && (data == HGC40_HEADER_2))
 8002d56:	7bbb      	ldrb	r3, [r7, #14]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <p_ultrasonic_task+0x1ec>
 8002d5c:	7b3b      	ldrb	r3, [r7, #12]
 8002d5e:	2b5e      	cmp	r3, #94	; 0x5e
 8002d60:	d10a      	bne.n	8002d78 <p_ultrasonic_task+0x1ec>
			{
				data_seq2 = 2; // HEADER2
 8002d62:	2302      	movs	r3, #2
 8002d64:	73bb      	strb	r3, [r7, #14]
				rx_buf2_len = 0;
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <p_ultrasonic_task+0x28c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
				memset(rx_buf2, 0x00, 10);
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	2100      	movs	r1, #0
 8002d70:	482a      	ldr	r0, [pc, #168]	; (8002e1c <p_ultrasonic_task+0x290>)
 8002d72:	f006 fa2c 	bl	80091ce <memset>
 8002d76:	e0e9      	b.n	8002f4c <p_ultrasonic_task+0x3c0>
			}
			else if(data_seq2 == 2)
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	f47f af1a 	bne.w	8002bb4 <p_ultrasonic_task+0x28>
			{
				if(data == HGC40_TAIL)
 8002d80:	7b3b      	ldrb	r3, [r7, #12]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	f040 809d 	bne.w	8002ec2 <p_ultrasonic_task+0x336>
				{
					if(rx_buf2_len < 6) sensor2.m_fail_cnt = 0;
 8002d88:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <p_ultrasonic_task+0x28c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d802      	bhi.n	8002d96 <p_ultrasonic_task+0x20a>
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <p_ultrasonic_task+0x294>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	70da      	strb	r2, [r3, #3]
					if(rx_buf2_len == 4)
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <p_ultrasonic_task+0x28c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d142      	bne.n	8002e24 <p_ultrasonic_task+0x298>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 1000
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <p_ultrasonic_task+0x290>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0') * 100
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	0152      	lsls	r2, r2, #5
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <p_ultrasonic_task+0x290>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	3b30      	subs	r3, #48	; 0x30
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	0089      	lsls	r1, r1, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	0088      	lsls	r0, r1, #2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	440b      	add	r3, r1
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b29a      	uxth	r2, r3
									+ (rx_buf2[2] - '0') * 10
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <p_ultrasonic_task+0x290>)
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	3b30      	subs	r3, #48	; 0x30
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	0089      	lsls	r1, r1, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	b29a      	uxth	r2, r3
									+ (rx_buf2[3] - '0');
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <p_ultrasonic_task+0x290>)
 8002dec:	78db      	ldrb	r3, [r3, #3]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b30      	subs	r3, #48	; 0x30
 8002df6:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 1000
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <p_ultrasonic_task+0x288>)
 8002dfa:	809a      	strh	r2, [r3, #4]
 8002dfc:	e6da      	b.n	8002bb4 <p_ultrasonic_task+0x28>
 8002dfe:	bf00      	nop
 8002e00:	20000a18 	.word	0x20000a18
 8002e04:	20000a1c 	.word	0x20000a1c
 8002e08:	20000eb2 	.word	0x20000eb2
 8002e0c:	20000e9c 	.word	0x20000e9c
 8002e10:	20000e94 	.word	0x20000e94
 8002e14:	200000ac 	.word	0x200000ac
 8002e18:	20000eb3 	.word	0x20000eb3
 8002e1c:	20000ea8 	.word	0x20000ea8
 8002e20:	20000e98 	.word	0x20000e98
					else if(rx_buf2_len == 3)
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <p_ultrasonic_task+0x3c4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d122      	bne.n	8002e72 <p_ultrasonic_task+0x2e6>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 100
 8002e2c:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0') * 10
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	0091      	lsls	r1, r2, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	460b      	mov	r3, r1
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b42      	ldr	r3, [pc, #264]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	3b30      	subs	r3, #48	; 0x30
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	0089      	lsls	r1, r1, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29a      	uxth	r2, r3
									+ (rx_buf2[2] - '0');
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002e60:	789b      	ldrb	r3, [r3, #2]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b30      	subs	r3, #48	; 0x30
 8002e6a:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 100
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002e6e:	809a      	strh	r2, [r3, #4]
 8002e70:	e6a0      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else if(rx_buf2_len == 2)
 8002e72:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <p_ultrasonic_task+0x3c4>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d112      	bne.n	8002ea0 <p_ultrasonic_task+0x314>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 10
 8002e7a:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0');
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b30      	subs	r3, #48	; 0x30
 8002e98:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 10
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002e9c:	809a      	strh	r2, [r3, #4]
 8002e9e:	e689      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else if(rx_buf2_len == 1)
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <p_ultrasonic_task+0x3c4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <p_ultrasonic_task+0x32c>
						gv.ultrasonic_2 = (rx_buf2[0] - '0');
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b30      	subs	r3, #48	; 0x30
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002eb4:	809a      	strh	r2, [r3, #4]
 8002eb6:	e67d      	b.n	8002bb4 <p_ultrasonic_task+0x28>
					else gv.ultrasonic_2 = 9999;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002eba:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ebe:	809a      	strh	r2, [r3, #4]
 8002ec0:	e678      	b.n	8002bb4 <p_ultrasonic_task+0x28>
				}
				else rx_buf2[rx_buf2_len++] = data;
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <p_ultrasonic_task+0x3c4>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	b2d1      	uxtb	r1, r2
 8002eca:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <p_ultrasonic_task+0x3c4>)
 8002ecc:	7011      	strb	r1, [r2, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	7b39      	ldrb	r1, [r7, #12]
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <p_ultrasonic_task+0x3c8>)
 8002ed4:	5499      	strb	r1, [r3, r2]
 8002ed6:	e66d      	b.n	8002bb4 <p_ultrasonic_task+0x28>
			}
		}
		else
		{
			if(sensor_idx % 2 == 0)
 8002ed8:	7b7b      	ldrb	r3, [r7, #13]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <p_ultrasonic_task+0x382>
			{
				HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 10, 10);
 8002ee4:	230a      	movs	r3, #10
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	491c      	ldr	r1, [pc, #112]	; (8002f5c <p_ultrasonic_task+0x3d0>)
 8002eea:	481d      	ldr	r0, [pc, #116]	; (8002f60 <p_ultrasonic_task+0x3d4>)
 8002eec:	f002 fc49 	bl	8005782 <HAL_UART_Transmit>
				sensor1.m_fail_cnt++;
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <p_ultrasonic_task+0x3d8>)
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <p_ultrasonic_task+0x3d8>)
 8002efa:	70da      	strb	r2, [r3, #3]
				if(sensor1.m_fail_cnt > 5 ) gv.ultrasonic_1 = 9999;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <p_ultrasonic_task+0x3d8>)
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d918      	bls.n	8002f36 <p_ultrasonic_task+0x3aa>
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002f06:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f0a:	805a      	strh	r2, [r3, #2]
 8002f0c:	e013      	b.n	8002f36 <p_ultrasonic_task+0x3aa>
			}
			else
			{
				HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 10, 10);
 8002f0e:	230a      	movs	r3, #10
 8002f10:	220a      	movs	r2, #10
 8002f12:	4912      	ldr	r1, [pc, #72]	; (8002f5c <p_ultrasonic_task+0x3d0>)
 8002f14:	4814      	ldr	r0, [pc, #80]	; (8002f68 <p_ultrasonic_task+0x3dc>)
 8002f16:	f002 fc34 	bl	8005782 <HAL_UART_Transmit>
				sensor2.m_fail_cnt++;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <p_ultrasonic_task+0x3e0>)
 8002f1c:	78db      	ldrb	r3, [r3, #3]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <p_ultrasonic_task+0x3e0>)
 8002f24:	70da      	strb	r2, [r3, #3]
				if(sensor2.m_fail_cnt > 5 ) gv.ultrasonic_2 = 9999;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <p_ultrasonic_task+0x3e0>)
 8002f28:	78db      	ldrb	r3, [r3, #3]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d903      	bls.n	8002f36 <p_ultrasonic_task+0x3aa>
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <p_ultrasonic_task+0x3cc>)
 8002f30:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f34:	809a      	strh	r2, [r3, #4]
			}
			sensor_idx++;
 8002f36:	7b7b      	ldrb	r3, [r7, #13]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	737b      	strb	r3, [r7, #13]
			if(sensor_idx > 1) sensor_idx = 0;
 8002f3c:	7b7b      	ldrb	r3, [r7, #13]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d901      	bls.n	8002f46 <p_ultrasonic_task+0x3ba>
 8002f42:	2300      	movs	r3, #0
 8002f44:	737b      	strb	r3, [r7, #13]
			osDelay(10);
 8002f46:	200a      	movs	r0, #10
 8002f48:	f003 f8d1 	bl	80060ee <osDelay>
		if(osMessageQueueGet(queue_ultrasonic1Handle, &data, NULL, 10) == osOK)
 8002f4c:	e632      	b.n	8002bb4 <p_ultrasonic_task+0x28>
 8002f4e:	bf00      	nop
 8002f50:	20000eb3 	.word	0x20000eb3
 8002f54:	20000ea8 	.word	0x20000ea8
 8002f58:	200000ac 	.word	0x200000ac
 8002f5c:	20000e6c 	.word	0x20000e6c
 8002f60:	20000938 	.word	0x20000938
 8002f64:	20000e94 	.word	0x20000e94
 8002f68:	2000097c 	.word	0x2000097c
 8002f6c:	20000e98 	.word	0x20000e98

08002f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f8c:	4c0b      	ldr	r4, [pc, #44]	; (8002fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f9a:	f7ff faa9 	bl	80024f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f006 f8e1 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa2:	f7fe f90d 	bl	80011c0 <main>
  bx  lr    
 8002fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002fb4:	0800a490 	.word	0x0800a490
  ldr r2, =_sbss
 8002fb8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002fbc:	200099d8 	.word	0x200099d8

08002fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_Init+0x40>)
 8002fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_Init+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_Init+0x40>)
 8002fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_Init+0x40>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f000 f8d8 	bl	80031a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff2:	200f      	movs	r0, #15
 8002ff4:	f7fe ffe0 	bl	8001fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff8:	f7fe fce4 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00

08003008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_IncTick+0x20>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x24>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_IncTick+0x24>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000020 	.word	0x20000020
 800302c:	20000eb4 	.word	0x20000eb4

08003030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return uwTick;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_GetTick+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000eb4 	.word	0x20000eb4

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff4c 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ca:	f7ff ff61 	bl	8003090 <__NVIC_GetPriorityGrouping>
 80031ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f7ff ffb1 	bl	800313c <NVIC_EncodePriority>
 80031da:	4602      	mov	r2, r0
 80031dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff80 	bl	80030e8 <__NVIC_SetPriority>
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff54 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ff0a 	bl	8003030 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e099      	b.n	800335c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003248:	e00f      	b.n	800326a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324a:	f7ff fef1 	bl	8003030 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b05      	cmp	r3, #5
 8003256:	d908      	bls.n	800326a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e078      	b.n	800335c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e8      	bne.n	800324a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_DMA_Init+0x158>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d117      	bne.n	800332e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa0b 	bl	800372c <DMA_CheckFifoParam>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800332a:	2301      	movs	r3, #1
 800332c:	e016      	b.n	800335c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9c2 	bl	80036c0 <DMA_CalcBaseAndBitshift>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	f010803f 	.word	0xf010803f

08003368 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00c      	b.n	80033a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2205      	movs	r2, #5
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033b8:	4b8e      	ldr	r3, [pc, #568]	; (80035f4 <HAL_DMA_IRQHandler+0x248>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a8e      	ldr	r2, [pc, #568]	; (80035f8 <HAL_DMA_IRQHandler+0x24c>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	0a9b      	lsrs	r3, r3, #10
 80033c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2208      	movs	r2, #8
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01a      	beq.n	8003418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	2208      	movs	r2, #8
 8003406:	409a      	lsls	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	2201      	movs	r2, #1
 800343c:	409a      	lsls	r2, r3
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2204      	movs	r2, #4
 8003454:	409a      	lsls	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d012      	beq.n	8003484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2204      	movs	r2, #4
 8003472:	409a      	lsls	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2210      	movs	r2, #16
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d043      	beq.n	800351c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d03c      	beq.n	800351c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2210      	movs	r2, #16
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d108      	bne.n	80034dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d024      	beq.n	800351c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
 80034da:	e01f      	b.n	800351c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
 80034ec:	e016      	b.n	800351c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0208 	bic.w	r2, r2, #8
 800350a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2220      	movs	r2, #32
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 808f 	beq.w	800364c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8087 	beq.w	800364c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	2220      	movs	r2, #32
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b05      	cmp	r3, #5
 8003554:	d136      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0216 	bic.w	r2, r2, #22
 8003564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_DMA_IRQHandler+0x1da>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0208 	bic.w	r2, r2, #8
 8003594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	223f      	movs	r2, #63	; 0x3f
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d07e      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
        }
        return;
 80035c2:	e079      	b.n	80036b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10d      	bne.n	80035fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d031      	beq.n	800364c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
 80035f0:	e02c      	b.n	800364c <HAL_DMA_IRQHandler+0x2a0>
 80035f2:	bf00      	nop
 80035f4:	20000018 	.word	0x20000018
 80035f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
 800360c:	e01e      	b.n	800364c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10f      	bne.n	800363c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0210 	bic.w	r2, r2, #16
 800362a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	2b00      	cmp	r3, #0
 8003652:	d032      	beq.n	80036ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2205      	movs	r2, #5
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3301      	adds	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	d307      	bcc.n	8003694 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f2      	bne.n	8003678 <HAL_DMA_IRQHandler+0x2cc>
 8003692:	e000      	b.n	8003696 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003694:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
 80036b6:	e000      	b.n	80036ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80036b8:	bf00      	nop
    }
  }
}
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	3b10      	subs	r3, #16
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <DMA_CalcBaseAndBitshift+0x64>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <DMA_CalcBaseAndBitshift+0x68>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d909      	bls.n	8003702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003700:	e007      	b.n	8003712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	aaaaaaab 	.word	0xaaaaaaab
 8003728:	0800a3e0 	.word	0x0800a3e0

0800372c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11f      	bne.n	8003786 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d856      	bhi.n	80037fa <DMA_CheckFifoParam+0xce>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <DMA_CheckFifoParam+0x28>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003765 	.word	0x08003765
 8003758:	08003777 	.word	0x08003777
 800375c:	08003765 	.word	0x08003765
 8003760:	080037fb 	.word	0x080037fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d046      	beq.n	80037fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003774:	e043      	b.n	80037fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800377e:	d140      	bne.n	8003802 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003784:	e03d      	b.n	8003802 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	d121      	bne.n	80037d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d837      	bhi.n	8003806 <DMA_CheckFifoParam+0xda>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <DMA_CheckFifoParam+0x70>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037b3 	.word	0x080037b3
 80037a4:	080037ad 	.word	0x080037ad
 80037a8:	080037c5 	.word	0x080037c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e030      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d025      	beq.n	800380a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e022      	b.n	800380a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037cc:	d11f      	bne.n	800380e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037d2:	e01c      	b.n	800380e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d903      	bls.n	80037e2 <DMA_CheckFifoParam+0xb6>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d003      	beq.n	80037e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e0:	e018      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      break;
 80037e6:	e015      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e00b      	b.n	8003812 <DMA_CheckFifoParam+0xe6>
      break;
 80037fa:	bf00      	nop
 80037fc:	e00a      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e008      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e006      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e004      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;   
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
    }
  } 
  
  return status; 
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop

08003824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	e16b      	b.n	8003b18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003840:	2201      	movs	r2, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	429a      	cmp	r2, r3
 800385a:	f040 815a 	bne.w	8003b12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d005      	beq.n	8003876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003872:	2b02      	cmp	r3, #2
 8003874:	d130      	bne.n	80038d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0201 	and.w	r2, r3, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d017      	beq.n	8003914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d123      	bne.n	8003968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	08da      	lsrs	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0203 	and.w	r2, r3, #3
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80b4 	beq.w	8003b12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <HAL_GPIO_Init+0x30c>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4a5f      	ldr	r2, [pc, #380]	; (8003b30 <HAL_GPIO_Init+0x30c>)
 80039b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ba:	4b5d      	ldr	r3, [pc, #372]	; (8003b30 <HAL_GPIO_Init+0x30c>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_GPIO_Init+0x310>)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	220f      	movs	r2, #15
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a52      	ldr	r2, [pc, #328]	; (8003b38 <HAL_GPIO_Init+0x314>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d02b      	beq.n	8003a4a <HAL_GPIO_Init+0x226>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <HAL_GPIO_Init+0x318>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d025      	beq.n	8003a46 <HAL_GPIO_Init+0x222>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a50      	ldr	r2, [pc, #320]	; (8003b40 <HAL_GPIO_Init+0x31c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01f      	beq.n	8003a42 <HAL_GPIO_Init+0x21e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4f      	ldr	r2, [pc, #316]	; (8003b44 <HAL_GPIO_Init+0x320>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d019      	beq.n	8003a3e <HAL_GPIO_Init+0x21a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4e      	ldr	r2, [pc, #312]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_GPIO_Init+0x216>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4d      	ldr	r2, [pc, #308]	; (8003b4c <HAL_GPIO_Init+0x328>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00d      	beq.n	8003a36 <HAL_GPIO_Init+0x212>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4c      	ldr	r2, [pc, #304]	; (8003b50 <HAL_GPIO_Init+0x32c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <HAL_GPIO_Init+0x20e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	; (8003b54 <HAL_GPIO_Init+0x330>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_GPIO_Init+0x20a>
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	e00e      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	e00c      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a32:	2306      	movs	r3, #6
 8003a34:	e00a      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a36:	2305      	movs	r3, #5
 8003a38:	e008      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_Init+0x228>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f002 0203 	and.w	r2, r2, #3
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4093      	lsls	r3, r2
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5c:	4935      	ldr	r1, [pc, #212]	; (8003b34 <HAL_GPIO_Init+0x310>)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3302      	adds	r3, #2
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8e:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b0c:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_GPIO_Init+0x334>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	f67f ae90 	bls.w	8003840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40013800 	.word	0x40013800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40020400 	.word	0x40020400
 8003b40:	40020800 	.word	0x40020800
 8003b44:	40020c00 	.word	0x40020c00
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40021400 	.word	0x40021400
 8003b50:	40021800 	.word	0x40021800
 8003b54:	40021c00 	.word	0x40021c00
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e267      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e242      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6f      	ldr	r2, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6c      	ldr	r2, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7ff f9f2 	bl	8003030 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7ff f9ee 	bl	8003030 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e207      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7ff f9de 	bl	8003030 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7ff f9da 	bl	8003030 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f3      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7ff f993 	bl	8003030 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7ff f98f 	bl	8003030 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a8      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7ff f972 	bl	8003030 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7ff f96e 	bl	8003030 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e187      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d036      	beq.n	8003de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7ff f952 	bl	8003030 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7ff f94e 	bl	8003030 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e167      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7ff f93b 	bl	8003030 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7ff f937 	bl	8003030 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e150      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470000 	.word	0x42470000
 8003dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7ff f8f7 	bl	8003030 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7ff f8f3 	bl	8003030 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x30c>
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7ff f8b8 	bl	8003030 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7ff f8b4 	bl	8003030 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0cb      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7ff f8a2 	bl	8003030 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7ff f89e 	bl	8003030 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0b5      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a1 	beq.w	8004070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d05c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d141      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7ff f872 	bl	8003030 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7ff f86e 	bl	8003030 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7ff f847 	bl	8003030 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7ff f843 	bl	8003030 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e05c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x416>
 8003fc4:	e054      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7ff f830 	bl	8003030 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7ff f82c 	bl	8003030 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e038      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fe ff5e 	bl	8003030 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fe ff5a 	bl	8003030 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fec6 	bl	8001fb8 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	0800a3c8 	.word	0x0800a3c8
 8004244:	20000018 	.word	0x20000018
 8004248:	2000001c 	.word	0x2000001c

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b094      	sub	sp, #80	; 0x50
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	2300      	movs	r3, #0
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80e1 	bhi.w	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e0db      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004284:	e0db      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_GetSysClockFreq+0x208>)
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428a:	e0d8      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	2200      	movs	r2, #0
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d0:	0150      	lsls	r0, r2, #5
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4621      	mov	r1, r4
 80042d8:	1a51      	subs	r1, r2, r1
 80042da:	6139      	str	r1, [r7, #16]
 80042dc:	4629      	mov	r1, r5
 80042de:	eb63 0301 	sbc.w	r3, r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fa:	4651      	mov	r1, sl
 80042fc:	018a      	lsls	r2, r1, #6
 80042fe:	4651      	mov	r1, sl
 8004300:	ebb2 0801 	subs.w	r8, r2, r1
 8004304:	4659      	mov	r1, fp
 8004306:	eb63 0901 	sbc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	462b      	mov	r3, r5
 800432c:	eb49 0303 	adc.w	r3, r9, r3
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800433e:	4629      	mov	r1, r5
 8004340:	024b      	lsls	r3, r1, #9
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004348:	4621      	mov	r1, r4
 800434a:	024a      	lsls	r2, r1, #9
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	2200      	movs	r2, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435c:	f7fc fa8e 	bl	800087c <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e058      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436a:	4b38      	ldr	r3, [pc, #224]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	2200      	movs	r2, #0
 8004372:	4618      	mov	r0, r3
 8004374:	4611      	mov	r1, r2
 8004376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004396:	0150      	lsls	r0, r2, #5
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4641      	mov	r1, r8
 800439e:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043bc:	ebb2 040a 	subs.w	r4, r2, sl
 80043c0:	eb63 050b 	sbc.w	r5, r3, fp
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	00eb      	lsls	r3, r5, #3
 80043ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d2:	00e2      	lsls	r2, r4, #3
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	18e3      	adds	r3, r4, r3
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	464b      	mov	r3, r9
 80043e0:	eb45 0303 	adc.w	r3, r5, r3
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f2:	4629      	mov	r1, r5
 80043f4:	028b      	lsls	r3, r1, #10
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043fc:	4621      	mov	r1, r4
 80043fe:	028a      	lsls	r2, r1, #10
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	f7fc fa34 	bl	800087c <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004436:	e002      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004440:	4618      	mov	r0, r3
 8004442:	3750      	adds	r7, #80	; 0x50
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	007a1200 	.word	0x007a1200

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000018 	.word	0x20000018

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	0800a3d8 	.word	0x0800a3d8

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449c:	f7ff ffdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800a3d8 	.word	0x0800a3d8

080044c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	220f      	movs	r2, #15
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_GetClockConfig+0x5c>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_GetClockConfig+0x5c>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <HAL_RCC_GetClockConfig+0x60>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0207 	and.w	r2, r3, #7
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	601a      	str	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	40023c00 	.word	0x40023c00

08004524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07b      	b.n	800462e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004546:	d009      	beq.n	800455c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
 800454e:	e005      	b.n	800455c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fa50 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	ea42 0103 	orr.w	r1, r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0104 	and.w	r1, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0210 	and.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e041      	b.n	80046cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fd faf7 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f000 fcdf 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04e      	b.n	800478a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a23      	ldr	r2, [pc, #140]	; (8004798 <HAL_TIM_Base_Start_IT+0xc4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d01d      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1f      	ldr	r2, [pc, #124]	; (800479c <HAL_TIM_Base_Start_IT+0xc8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e041      	b.n	800484a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd f966 	bl	8001aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fc20 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_TIM_PWM_Start+0x24>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e022      	b.n	80048be <HAL_TIM_PWM_Start+0x6a>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d109      	bne.n	8004892 <HAL_TIM_PWM_Start+0x3e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e015      	b.n	80048be <HAL_TIM_PWM_Start+0x6a>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d109      	bne.n	80048ac <HAL_TIM_PWM_Start+0x58>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e008      	b.n	80048be <HAL_TIM_PWM_Start+0x6a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07c      	b.n	80049c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x82>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d4:	e013      	b.n	80048fe <HAL_TIM_PWM_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x92>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	e00b      	b.n	80048fe <HAL_TIM_PWM_Start+0xaa>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	e003      	b.n	80048fe <HAL_TIM_PWM_Start+0xaa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2201      	movs	r2, #1
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fde6 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <HAL_TIM_PWM_Start+0x174>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_PWM_Start+0xcc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <HAL_TIM_PWM_Start+0x178>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_TIM_PWM_Start+0xd0>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_TIM_PWM_Start+0xd2>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <HAL_TIM_PWM_Start+0x174>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_TIM_PWM_Start+0x17c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_TIM_PWM_Start+0x180>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <HAL_TIM_PWM_Start+0x184>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIM_PWM_Start+0x178>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_TIM_PWM_Start+0x188>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIM_PWM_Start+0x136>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x18c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d010      	beq.n	80049be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e007      	b.n	80049be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800

080049e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fd6e 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2e      	ldr	r2, [pc, #184]	; (8004abc <HAL_TIM_PWM_Stop+0xd8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIM_PWM_Stop+0x2c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <HAL_TIM_PWM_Stop+0xdc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_PWM_Stop+0x30>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_PWM_Stop+0x32>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d017      	beq.n	8004a4a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_TIM_PWM_Stop+0x66>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	f240 4344 	movw	r3, #1092	; 0x444
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_PWM_Stop+0x66>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_TIM_PWM_Stop+0x96>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	f240 4344 	movw	r3, #1092	; 0x444
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <HAL_TIM_PWM_Stop+0x96>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Stop+0xa6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	e013      	b.n	8004ab2 <HAL_TIM_PWM_Stop+0xce>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Stop+0xb6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a98:	e00b      	b.n	8004ab2 <HAL_TIM_PWM_Stop+0xce>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Stop+0xc6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	e003      	b.n	8004ab2 <HAL_TIM_PWM_Stop+0xce>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d855      	bhi.n	8004b84 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b85 	.word	0x08004b85
 8004ae8:	08004b85 	.word	0x08004b85
 8004aec:	08004b85 	.word	0x08004b85
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b85 	.word	0x08004b85
 8004af8:	08004b85 	.word	0x08004b85
 8004afc:	08004b85 	.word	0x08004b85
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b85 	.word	0x08004b85
 8004b08:	08004b85 	.word	0x08004b85
 8004b0c:	08004b85 	.word	0x08004b85
 8004b10:	08004b69 	.word	0x08004b69
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fc1d 	bl	8003368 <HAL_DMA_Abort_IT>
      break;
 8004b2e:	e02c      	b.n	8004b8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fc0f 	bl	8003368 <HAL_DMA_Abort_IT>
      break;
 8004b4a:	e01e      	b.n	8004b8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fc01 	bl	8003368 <HAL_DMA_Abort_IT>
      break;
 8004b66:	e010      	b.n	8004b8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fbf3 	bl	8003368 <HAL_DMA_Abort_IT>
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      break;
 8004b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d161      	bne.n	8004c54 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fc9d 	bl	80054d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2d      	ldr	r2, [pc, #180]	; (8004c64 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d017      	beq.n	8004bec <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <HAL_TIM_PWM_Stop_DMA+0x128>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	f240 4344 	movw	r3, #1092	; 0x444
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_PWM_Stop_DMA+0x128>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <HAL_TIM_PWM_Stop_DMA+0x158>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	f240 4344 	movw	r3, #1092	; 0x444
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_PWM_Stop_DMA+0x158>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_TIM_PWM_Stop_DMA+0x168>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2a:	e013      	b.n	8004c54 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d104      	bne.n	8004c3c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3a:	e00b      	b.n	8004c54 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d104      	bne.n	8004c4c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4a:	e003      	b.n	8004c54 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0202 	mvn.w	r2, #2
 8004c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9b0 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9a2 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fc fa3f 	bl	800113c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0204 	mvn.w	r2, #4
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f986 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f978 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fc fa15 	bl	800113c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0208 	mvn.w	r2, #8
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f95c 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f94e 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fc f9eb 	bl	800113c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f932 	bl	8005010 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f924 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fc f9c1 	bl	800113c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0201 	mvn.w	r2, #1
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fdc8 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fc5e 	bl	80056d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d107      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8f0 	bl	8005024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0220 	mvn.w	r2, #32
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fc28 	bl	80056c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ae      	b.n	8004ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	f200 809f 	bhi.w	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004fe5 	.word	0x08004fe5
 8004eb4:	08004fe5 	.word	0x08004fe5
 8004eb8:	08004fe5 	.word	0x08004fe5
 8004ebc:	08004f21 	.word	0x08004f21
 8004ec0:	08004fe5 	.word	0x08004fe5
 8004ec4:	08004fe5 	.word	0x08004fe5
 8004ec8:	08004fe5 	.word	0x08004fe5
 8004ecc:	08004f63 	.word	0x08004f63
 8004ed0:	08004fe5 	.word	0x08004fe5
 8004ed4:	08004fe5 	.word	0x08004fe5
 8004ed8:	08004fe5 	.word	0x08004fe5
 8004edc:	08004fa3 	.word	0x08004fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f946 	bl	8005178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0208 	orr.w	r2, r2, #8
 8004efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
      break;
 8004f1e:	e064      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f996 	bl	8005258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]
      break;
 8004f60:	e043      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f9eb 	bl	8005344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0208 	orr.w	r2, r2, #8
 8004f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0204 	bic.w	r2, r2, #4
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	61da      	str	r2, [r3, #28]
      break;
 8004fa0:	e023      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fa3f 	bl	800542c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a40      	ldr	r2, [pc, #256]	; (800514c <TIM_Base_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d00f      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3d      	ldr	r2, [pc, #244]	; (8005150 <TIM_Base_SetConfig+0x118>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3c      	ldr	r2, [pc, #240]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <TIM_Base_SetConfig+0x120>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3a      	ldr	r2, [pc, #232]	; (800515c <TIM_Base_SetConfig+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2f      	ldr	r2, [pc, #188]	; (800514c <TIM_Base_SetConfig+0x114>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d02b      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d027      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2c      	ldr	r2, [pc, #176]	; (8005150 <TIM_Base_SetConfig+0x118>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d023      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01f      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2a      	ldr	r2, [pc, #168]	; (8005158 <TIM_Base_SetConfig+0x120>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01b      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <TIM_Base_SetConfig+0x124>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d017      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a28      	ldr	r2, [pc, #160]	; (8005160 <TIM_Base_SetConfig+0x128>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <TIM_Base_SetConfig+0x12c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00f      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <TIM_Base_SetConfig+0x130>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a25      	ldr	r2, [pc, #148]	; (800516c <TIM_Base_SetConfig+0x134>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <TIM_Base_SetConfig+0x138>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <TIM_Base_SetConfig+0x13c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <TIM_Base_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0xf8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <TIM_Base_SetConfig+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40010400 	.word	0x40010400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	40001800 	.word	0x40001800
 8005170:	40001c00 	.word	0x40001c00
 8005174:	40002000 	.word	0x40002000

08005178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 0302 	bic.w	r3, r3, #2
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_OC1_SetConfig+0xd8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_OC1_SetConfig+0x64>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <TIM_OC1_SetConfig+0xdc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10c      	bne.n	80051f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0308 	bic.w	r3, r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 0304 	bic.w	r3, r3, #4
 80051f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <TIM_OC1_SetConfig+0xd8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC1_SetConfig+0x8e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a14      	ldr	r2, [pc, #80]	; (8005254 <TIM_OC1_SetConfig+0xdc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d111      	bne.n	800522a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400

08005258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a22      	ldr	r2, [pc, #136]	; (800533c <TIM_OC2_SetConfig+0xe4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC2_SetConfig+0x68>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a21      	ldr	r2, [pc, #132]	; (8005340 <TIM_OC2_SetConfig+0xe8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <TIM_OC2_SetConfig+0xe4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC2_SetConfig+0x94>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <TIM_OC2_SetConfig+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d113      	bne.n	8005314 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40010400 	.word	0x40010400

08005344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a21      	ldr	r2, [pc, #132]	; (8005424 <TIM_OC3_SetConfig+0xe0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_OC3_SetConfig+0x66>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a20      	ldr	r2, [pc, #128]	; (8005428 <TIM_OC3_SetConfig+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10d      	bne.n	80053c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <TIM_OC3_SetConfig+0xe0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC3_SetConfig+0x92>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <TIM_OC3_SetConfig+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d113      	bne.n	80053fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <TIM_OC4_SetConfig+0xa4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC4_SetConfig+0x68>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <TIM_OC4_SetConfig+0xa8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d109      	bne.n	80054a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e05a      	b.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a21      	ldr	r2, [pc, #132]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d01d      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1a      	ldr	r2, [pc, #104]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a18      	ldr	r2, [pc, #96]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d10c      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40010400 	.word	0x40010400
 8005614:	40014000 	.word	0x40014000
 8005618:	40001800 	.word	0x40001800

0800561c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e03d      	b.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e03f      	b.n	800577a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fc fb2a 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2224      	movs	r2, #36	; 0x24
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800572a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f929 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08a      	sub	sp, #40	; 0x28
 8005786:	af02      	add	r7, sp, #8
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d17c      	bne.n	800589c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Transmit+0x2c>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e075      	b.n	800589e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit+0x3e>
 80057bc:	2302      	movs	r3, #2
 80057be:	e06e      	b.n	800589e <HAL_UART_Transmit+0x11c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2221      	movs	r2, #33	; 0x21
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d6:	f7fd fc2b 	bl	8003030 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f0:	d108      	bne.n	8005804 <HAL_UART_Transmit+0x82>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e003      	b.n	800580c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005814:	e02a      	b.n	800586c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f840 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e036      	b.n	800589e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	3302      	adds	r3, #2
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	e007      	b.n	800585e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1cf      	bne.n	8005816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	2140      	movs	r1, #64	; 0x40
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f810 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b090      	sub	sp, #64	; 0x40
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	e050      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d04c      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058c6:	f7fd fbb3 	bl	8003030 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d241      	bcs.n	800595a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058f6:	637a      	str	r2, [r7, #52]	; 0x34
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	613b      	str	r3, [r7, #16]
   return(result);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592a:	623a      	str	r2, [r7, #32]
 800592c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	69f9      	ldr	r1, [r7, #28]
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	61bb      	str	r3, [r7, #24]
   return(result);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00f      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d09f      	beq.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3740      	adds	r7, #64	; 0x40
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b0c0      	sub	sp, #256	; 0x100
 800598a:	af00      	add	r7, sp, #0
 800598c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	ea40 0301 	orr.w	r3, r0, r1
 80059ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059dc:	f021 010c 	bic.w	r1, r1, #12
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ea:	430b      	orrs	r3, r1
 80059ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	ea40 0301 	orr.w	r3, r0, r1
 8005a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b8f      	ldr	r3, [pc, #572]	; (8005c50 <UART_SetConfig+0x2cc>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0xa0>
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <UART_SetConfig+0x2d0>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d104      	bne.n	8005a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe fd38 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 8005a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a2c:	e003      	b.n	8005a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7fe fd1f 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8005a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	f040 810c 	bne.w	8005c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	1891      	adds	r1, r2, r2
 8005a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a66:	4621      	mov	r1, r4
 8005a68:	eb12 0801 	adds.w	r8, r2, r1
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb43 0901 	adc.w	r9, r3, r1
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	eb18 0303 	adds.w	r3, r8, r3
 8005a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a94:	462b      	mov	r3, r5
 8005a96:	eb49 0303 	adc.w	r3, r9, r3
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	18db      	adds	r3, r3, r3
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	4613      	mov	r3, r2
 8005aba:	eb42 0303 	adc.w	r3, r2, r3
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ac8:	f7fa fed8 	bl	800087c <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	011c      	lsls	r4, r3, #4
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005af4:	415b      	adcs	r3, r3
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005afc:	4641      	mov	r1, r8
 8005afe:	eb12 0a01 	adds.w	sl, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0b01 	adc.w	fp, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	469b      	mov	fp, r3
 8005b20:	4643      	mov	r3, r8
 8005b22:	eb1a 0303 	adds.w	r3, sl, r3
 8005b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	4613      	mov	r3, r2
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b5e:	f7fa fe8d 	bl	800087c <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2264      	movs	r2, #100	; 0x64
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	1acb      	subs	r3, r1, r3
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b7e:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b80:	fba3 2302 	umull	r2, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b8c:	441c      	add	r4, r3
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	1891      	adds	r1, r2, r2
 8005ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ba8:	415b      	adcs	r3, r3
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	1851      	adds	r1, r2, r1
 8005bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	414b      	adcs	r3, r1
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bc8:	4659      	mov	r1, fp
 8005bca:	00cb      	lsls	r3, r1, #3
 8005bcc:	4651      	mov	r1, sl
 8005bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	00ca      	lsls	r2, r1, #3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be4:	464b      	mov	r3, r9
 8005be6:	460a      	mov	r2, r1
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c04:	460b      	mov	r3, r1
 8005c06:	18db      	adds	r3, r3, r3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c1a:	f7fa fe2f 	bl	800087c <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4422      	add	r2, r4
 8005c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c4c:	e105      	b.n	8005e5a <UART_SetConfig+0x4d6>
 8005c4e:	bf00      	nop
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c6e:	4642      	mov	r2, r8
 8005c70:	464b      	mov	r3, r9
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	6239      	str	r1, [r7, #32]
 8005c76:	415b      	adcs	r3, r3
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7e:	4641      	mov	r1, r8
 8005c80:	1854      	adds	r4, r2, r1
 8005c82:	4649      	mov	r1, r9
 8005c84:	eb43 0501 	adc.w	r5, r3, r1
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	00eb      	lsls	r3, r5, #3
 8005c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c96:	00e2      	lsls	r2, r4, #3
 8005c98:	4614      	mov	r4, r2
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	18e3      	adds	r3, r4, r3
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	eb45 0303 	adc.w	r3, r5, r3
 8005caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cca:	4629      	mov	r1, r5
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	008a      	lsls	r2, r1, #2
 8005cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cdc:	f7fa fdce 	bl	800087c <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b60      	ldr	r3, [pc, #384]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	61b9      	str	r1, [r7, #24]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6139      	str	r1, [r7, #16]
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d68:	4649      	mov	r1, r9
 8005d6a:	008b      	lsls	r3, r1, #2
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d72:	4641      	mov	r1, r8
 8005d74:	008a      	lsls	r2, r1, #2
 8005d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d7a:	f7fa fd7f 	bl	800087c <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	441c      	add	r4, r3
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dac:	677a      	str	r2, [r7, #116]	; 0x74
 8005dae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	1851      	adds	r1, r2, r1
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	4649      	mov	r1, r9
 8005dca:	414b      	adcs	r3, r1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dda:	4659      	mov	r1, fp
 8005ddc:	00cb      	lsls	r3, r1, #3
 8005dde:	4651      	mov	r1, sl
 8005de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de4:	4651      	mov	r1, sl
 8005de6:	00ca      	lsls	r2, r1, #3
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	4642      	mov	r2, r8
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	667a      	str	r2, [r7, #100]	; 0x64
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e16:	4649      	mov	r1, r9
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4641      	mov	r1, r8
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e28:	f7fa fd28 	bl	800087c <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 1302 	umull	r1, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2164      	movs	r1, #100	; 0x64
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	3332      	adds	r3, #50	; 0x32
 8005e44:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4422      	add	r2, r4
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <__NVIC_SetPriority>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db0a      	blt.n	8005e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <__NVIC_SetPriority+0x4c>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e94:	e00a      	b.n	8005eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <__NVIC_SetPriority+0x50>)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	761a      	strb	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <SysTick_Handler+0x1c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ec8:	f001 ffe6 	bl	8007e98 <xTaskGetSchedulerState>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d001      	beq.n	8005ed6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ed2:	f002 fdd1 	bl	8008a78 <xPortSysTickHandler>
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	e000e010 	.word	0xe000e010

08005ee0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f06f 0004 	mvn.w	r0, #4
 8005eea:	f7ff ffbf 	bl	8005e6c <__NVIC_SetPriority>
#endif
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005efa:	f3ef 8305 	mrs	r3, IPSR
 8005efe:	603b      	str	r3, [r7, #0]
  return(result);
 8005f00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f06:	f06f 0305 	mvn.w	r3, #5
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	e00c      	b.n	8005f28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <osKernelInitialize+0x44>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d105      	bne.n	8005f22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <osKernelInitialize+0x44>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e002      	b.n	8005f28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f28:	687b      	ldr	r3, [r7, #4]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000eb8 	.word	0x20000eb8

08005f3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f42:	f3ef 8305 	mrs	r3, IPSR
 8005f46:	603b      	str	r3, [r7, #0]
  return(result);
 8005f48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f4e:	f06f 0305 	mvn.w	r3, #5
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	e010      	b.n	8005f78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <osKernelStart+0x48>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d109      	bne.n	8005f72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f5e:	f7ff ffbf 	bl	8005ee0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <osKernelStart+0x48>)
 8005f64:	2202      	movs	r2, #2
 8005f66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f68:	f001 fb3a 	bl	80075e0 <vTaskStartScheduler>
      stat = osOK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	e002      	b.n	8005f78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f78:	687b      	ldr	r3, [r7, #4]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000eb8 	.word	0x20000eb8

08005f88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08e      	sub	sp, #56	; 0x38
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f98:	f3ef 8305 	mrs	r3, IPSR
 8005f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d17e      	bne.n	80060a2 <osThreadNew+0x11a>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d07b      	beq.n	80060a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005faa:	2340      	movs	r3, #64	; 0x40
 8005fac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fae:	2318      	movs	r3, #24
 8005fb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d045      	beq.n	800604e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <osThreadNew+0x48>
        name = attr->name;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <osThreadNew+0x6e>
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b38      	cmp	r3, #56	; 0x38
 8005fe8:	d805      	bhi.n	8005ff6 <osThreadNew+0x6e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <osThreadNew+0x72>
        return (NULL);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e054      	b.n	80060a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	089b      	lsrs	r3, r3, #2
 8006008:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <osThreadNew+0xa8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2bbb      	cmp	r3, #187	; 0xbb
 8006018:	d90a      	bls.n	8006030 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <osThreadNew+0xa8>
        mem = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e010      	b.n	8006052 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10c      	bne.n	8006052 <osThreadNew+0xca>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <osThreadNew+0xca>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <osThreadNew+0xca>
          mem = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e001      	b.n	8006052 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d110      	bne.n	800607a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006060:	9202      	str	r2, [sp, #8]
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f001 f83a 	bl	80070e8 <xTaskCreateStatic>
 8006074:	4603      	mov	r3, r0
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e013      	b.n	80060a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d110      	bne.n	80060a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	b29a      	uxth	r2, r3
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 f885 	bl	80071a2 <xTaskCreate>
 8006098:	4603      	mov	r3, r0
 800609a:	2b01      	cmp	r3, #1
 800609c:	d001      	beq.n	80060a2 <osThreadNew+0x11a>
            hTask = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060a2:	693b      	ldr	r3, [r7, #16]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3728      	adds	r7, #40	; 0x28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b8:	f3ef 8305 	mrs	r3, IPSR
 80060bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80060be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <osThreadResume+0x20>
    stat = osErrorISR;
 80060c4:	f06f 0305 	mvn.w	r3, #5
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e00b      	b.n	80060e4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <osThreadResume+0x2e>
    stat = osErrorParameter;
 80060d2:	f06f 0303 	mvn.w	r3, #3
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	e004      	b.n	80060e4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80060de:	6938      	ldr	r0, [r7, #16]
 80060e0:	f001 fa20 	bl	8007524 <vTaskResume>
  }

  return (stat);
 80060e4:	697b      	ldr	r3, [r7, #20]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f6:	f3ef 8305 	mrs	r3, IPSR
 80060fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <osDelay+0x1c>
    stat = osErrorISR;
 8006102:	f06f 0305 	mvn.w	r3, #5
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e007      	b.n	800611a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <osDelay+0x2c>
      vTaskDelay(ticks);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f99f 	bl	8007458 <vTaskDelay>
    }
  }

  return (stat);
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006134:	f3ef 8305 	mrs	r3, IPSR
 8006138:	613b      	str	r3, [r7, #16]
  return(result);
 800613a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800613c:	2b00      	cmp	r3, #0
 800613e:	d15f      	bne.n	8006200 <osMessageQueueNew+0xdc>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d05c      	beq.n	8006200 <osMessageQueueNew+0xdc>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d059      	beq.n	8006200 <osMessageQueueNew+0xdc>
    mem = -1;
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d029      	beq.n	80061ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <osMessageQueueNew+0x62>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b4f      	cmp	r3, #79	; 0x4f
 8006166:	d90e      	bls.n	8006186 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <osMessageQueueNew+0x62>
        mem = 1;
 8006180:	2301      	movs	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e014      	b.n	80061b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d110      	bne.n	80061b0 <osMessageQueueNew+0x8c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10c      	bne.n	80061b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d108      	bne.n	80061b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	e001      	b.n	80061b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10b      	bne.n	80061ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2100      	movs	r1, #0
 80061c0:	9100      	str	r1, [sp, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fa51 	bl	800666c <xQueueGenericCreateStatic>
 80061ca:	61f8      	str	r0, [r7, #28]
 80061cc:	e008      	b.n	80061e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d105      	bne.n	80061e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80061d4:	2200      	movs	r2, #0
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fabf 	bl	800675c <xQueueGenericCreate>
 80061de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e001      	b.n	80061f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80061f8:	6979      	ldr	r1, [r7, #20]
 80061fa:	69f8      	ldr	r0, [r7, #28]
 80061fc:	f000 ff16 	bl	800702c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006200:	69fb      	ldr	r3, [r7, #28]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006224:	f3ef 8305 	mrs	r3, IPSR
 8006228:	617b      	str	r3, [r7, #20]
  return(result);
 800622a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800622c:	2b00      	cmp	r3, #0
 800622e:	d028      	beq.n	8006282 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <osMessageQueuePut+0x36>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <osMessageQueuePut+0x36>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006242:	f06f 0303 	mvn.w	r3, #3
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e038      	b.n	80062bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800624e:	f107 0210 	add.w	r2, r7, #16
 8006252:	2300      	movs	r3, #0
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	69b8      	ldr	r0, [r7, #24]
 8006258:	f000 fbdc 	bl	8006a14 <xQueueGenericSendFromISR>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d003      	beq.n	800626a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006262:	f06f 0302 	mvn.w	r3, #2
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e028      	b.n	80062bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d025      	beq.n	80062bc <osMessageQueuePut+0xb0>
 8006270:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <osMessageQueuePut+0xbc>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	e01c      	b.n	80062bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <osMessageQueuePut+0x82>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800628e:	f06f 0303 	mvn.w	r3, #3
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e012      	b.n	80062bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006296:	2300      	movs	r3, #0
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	69b8      	ldr	r0, [r7, #24]
 800629e:	f000 fabb 	bl	8006818 <xQueueGenericSend>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d009      	beq.n	80062bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80062ae:	f06f 0301 	mvn.w	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e002      	b.n	80062bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80062b6:	f06f 0302 	mvn.w	r3, #2
 80062ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80062bc:	69fb      	ldr	r3, [r7, #28]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e2:	f3ef 8305 	mrs	r3, IPSR
 80062e6:	617b      	str	r3, [r7, #20]
  return(result);
 80062e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d028      	beq.n	8006340 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <osMessageQueueGet+0x34>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <osMessageQueueGet+0x34>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006300:	f06f 0303 	mvn.w	r3, #3
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	e037      	b.n	8006378 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	461a      	mov	r2, r3
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	69b8      	ldr	r0, [r7, #24]
 8006316:	f000 fcf9 	bl	8006d0c <xQueueReceiveFromISR>
 800631a:	4603      	mov	r3, r0
 800631c:	2b01      	cmp	r3, #1
 800631e:	d003      	beq.n	8006328 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006320:	f06f 0302 	mvn.w	r3, #2
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	e027      	b.n	8006378 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d024      	beq.n	8006378 <osMessageQueueGet+0xac>
 800632e:	4b15      	ldr	r3, [pc, #84]	; (8006384 <osMessageQueueGet+0xb8>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	e01b      	b.n	8006378 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <osMessageQueueGet+0x80>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800634c:	f06f 0303 	mvn.w	r3, #3
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	e011      	b.n	8006378 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f000 fbf7 	bl	8006b4c <xQueueReceive>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d009      	beq.n	8006378 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800636a:	f06f 0301 	mvn.w	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e002      	b.n	8006378 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006372:	f06f 0302 	mvn.w	r3, #2
 8006376:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006378:	69fb      	ldr	r3, [r7, #28]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006394:	f3ef 8305 	mrs	r3, IPSR
 8006398:	60fb      	str	r3, [r7, #12]
  return(result);
 800639a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 80063a0:	f06f 0305 	mvn.w	r3, #5
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e00c      	b.n	80063c2 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d103      	bne.n	80063b6 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 80063ae:	f06f 0303 	mvn.w	r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e005      	b.n	80063c2 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 80063ba:	2100      	movs	r1, #0
 80063bc:	6938      	ldr	r0, [r7, #16]
 80063be:	f000 f8ed 	bl	800659c <xQueueGenericReset>
  }

  return (stat);
 80063c2:	697b      	ldr	r3, [r7, #20]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80063dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4a06      	ldr	r2, [pc, #24]	; (80063fc <vApplicationGetIdleTaskMemory+0x30>)
 80063e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2240      	movs	r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000ebc 	.word	0x20000ebc
 80063fc:	20000f78 	.word	0x20000f78

08006400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a07      	ldr	r2, [pc, #28]	; (800642c <vApplicationGetTimerTaskMemory+0x2c>)
 8006410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vApplicationGetTimerTaskMemory+0x30>)
 8006416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2280      	movs	r2, #128	; 0x80
 800641c:	601a      	str	r2, [r3, #0]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20001078 	.word	0x20001078
 8006430:	20001134 	.word	0x20001134

08006434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f103 0208 	add.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f103 0208 	add.w	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d103      	bne.n	80064f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e00c      	b.n	8006510 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3308      	adds	r3, #8
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <vListInsert+0x2e>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	d2f6      	bcs.n	80064fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
}
 800653c:	bf00      	nop
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6892      	ldr	r2, [r2, #8]
 800655e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6852      	ldr	r2, [r2, #4]
 8006568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d103      	bne.n	800657c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065c6:	f002 f9c5 	bl	8008954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	3b01      	subs	r3, #1
 80065f8:	68f9      	ldr	r1, [r7, #12]
 80065fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	22ff      	movs	r2, #255	; 0xff
 800660a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d114      	bne.n	8006646 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3310      	adds	r3, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fa73 	bl	8007b14 <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <xQueueGenericReset+0xcc>)
 8006636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	e009      	b.n	800665a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3310      	adds	r3, #16
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fef2 	bl	8006434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3324      	adds	r3, #36	; 0x24
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff feed 	bl	8006434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800665a:	f002 f9ab 	bl	80089b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800665e:	2301      	movs	r3, #1
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08e      	sub	sp, #56	; 0x38
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <xQueueGenericCreateStatic+0x52>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <xQueueGenericCreateStatic+0x56>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <xQueueGenericCreateStatic+0x58>
 80066c2:	2300      	movs	r3, #0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	623b      	str	r3, [r7, #32]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <xQueueGenericCreateStatic+0x7e>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <xQueueGenericCreateStatic+0x82>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueGenericCreateStatic+0x84>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61fb      	str	r3, [r7, #28]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800670a:	2350      	movs	r3, #80	; 0x50
 800670c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b50      	cmp	r3, #80	; 0x50
 8006712:	d00a      	beq.n	800672a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	61bb      	str	r3, [r7, #24]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800672a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800673e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f83f 	bl	80067d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006754:	4618      	mov	r0, r3
 8006756:	3730      	adds	r7, #48	; 0x30
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3350      	adds	r3, #80	; 0x50
 8006794:	4618      	mov	r0, r3
 8006796:	f002 f9ff 	bl	8008b98 <pvPortMalloc>
 800679a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3350      	adds	r3, #80	; 0x50
 80067aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067b4:	79fa      	ldrb	r2, [r7, #7]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f805 	bl	80067d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067c6:	69bb      	ldr	r3, [r7, #24]
	}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e002      	b.n	80067f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067fe:	2101      	movs	r1, #1
 8006800:	69b8      	ldr	r0, [r7, #24]
 8006802:	f7ff fecb 	bl	800659c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <xQueueGenericSend+0x32>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <xQueueGenericSend+0x40>
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <xQueueGenericSend+0x44>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <xQueueGenericSend+0x46>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <xQueueGenericSend+0x60>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d103      	bne.n	8006886 <xQueueGenericSend+0x6e>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <xQueueGenericSend+0x72>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueGenericSend+0x74>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	623b      	str	r3, [r7, #32]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a6:	f001 faf7 	bl	8007e98 <xTaskGetSchedulerState>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <xQueueGenericSend+0x9e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <xQueueGenericSend+0xa2>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueGenericSend+0xa4>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61fb      	str	r3, [r7, #28]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068d6:	f002 f83d 	bl	8008954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <xQueueGenericSend+0xd4>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d129      	bne.n	8006940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068f2:	f000 fa8b 	bl	8006e0c <prvCopyDataToQueue>
 80068f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d010      	beq.n	8006922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f905 	bl	8007b14 <xTaskRemoveFromEventList>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006910:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <xQueueGenericSend+0x1f8>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	e00a      	b.n	8006938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <xQueueGenericSend+0x1f8>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006938:	f002 f83c 	bl	80089b4 <vPortExitCritical>
				return pdPASS;
 800693c:	2301      	movs	r3, #1
 800693e:	e063      	b.n	8006a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006946:	f002 f835 	bl	80089b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800694a:	2300      	movs	r3, #0
 800694c:	e05c      	b.n	8006a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006954:	f107 0314 	add.w	r3, r7, #20
 8006958:	4618      	mov	r0, r3
 800695a:	f001 f93f 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006962:	f002 f827 	bl	80089b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006966:	f000 feab 	bl	80076c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800696a:	f001 fff3 	bl	8008954 <vPortEnterCritical>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006974:	b25b      	sxtb	r3, r3
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697a:	d103      	bne.n	8006984 <xQueueGenericSend+0x16c>
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800698a:	b25b      	sxtb	r3, r3
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d103      	bne.n	800699a <xQueueGenericSend+0x182>
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800699a:	f002 f80b 	bl	80089b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800699e:	1d3a      	adds	r2, r7, #4
 80069a0:	f107 0314 	add.w	r3, r7, #20
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 f92e 	bl	8007c08 <xTaskCheckForTimeOut>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d124      	bne.n	80069fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b4:	f000 fb22 	bl	8006ffc <prvIsQueueFull>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d018      	beq.n	80069f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	3310      	adds	r3, #16
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 f854 	bl	8007a74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ce:	f000 faad 	bl	8006f2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069d2:	f000 fe83 	bl	80076dc <xTaskResumeAll>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f47f af7c 	bne.w	80068d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069de:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <xQueueGenericSend+0x1f8>)
 80069e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	e772      	b.n	80068d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f2:	f000 fa9b 	bl	8006f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069f6:	f000 fe71 	bl	80076dc <xTaskResumeAll>
 80069fa:	e76c      	b.n	80068d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fe:	f000 fa95 	bl	8006f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a02:	f000 fe6b 	bl	80076dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3738      	adds	r7, #56	; 0x38
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b090      	sub	sp, #64	; 0x40
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <xQueueGenericSendFromISR+0x3c>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <xQueueGenericSendFromISR+0x40>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <xQueueGenericSendFromISR+0x42>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d103      	bne.n	8006a7e <xQueueGenericSendFromISR+0x6a>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <xQueueGenericSendFromISR+0x6e>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <xQueueGenericSendFromISR+0x70>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	623b      	str	r3, [r7, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a9e:	f002 f83b 	bl	8008b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	61fa      	str	r2, [r7, #28]
 8006ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <xQueueGenericSendFromISR+0xbc>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d12f      	bne.n	8006b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ae6:	f000 f991 	bl	8006e0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d112      	bne.n	8006b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d016      	beq.n	8006b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	3324      	adds	r3, #36	; 0x24
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 f807 	bl	8007b14 <xTaskRemoveFromEventList>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00e      	beq.n	8006b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e007      	b.n	8006b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b1e:	3301      	adds	r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	b25a      	sxtb	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006b2e:	e001      	b.n	8006b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3740      	adds	r7, #64	; 0x40
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <xQueueReceive+0x30>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	623b      	str	r3, [r7, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <xQueueReceive+0x3e>
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <xQueueReceive+0x42>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <xQueueReceive+0x44>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <xQueueReceive+0x5e>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	61fb      	str	r3, [r7, #28]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006baa:	f001 f975 	bl	8007e98 <xTaskGetSchedulerState>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xQueueReceive+0x6e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueReceive+0x72>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueReceive+0x74>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <xQueueReceive+0x8e>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bda:	f001 febb 	bl	8008954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01f      	beq.n	8006c2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bee:	f000 f977 	bl	8006ee0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1e5a      	subs	r2, r3, #1
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00f      	beq.n	8006c22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	3310      	adds	r3, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 ff84 	bl	8007b14 <xTaskRemoveFromEventList>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c12:	4b3d      	ldr	r3, [pc, #244]	; (8006d08 <xQueueReceive+0x1bc>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c22:	f001 fec7 	bl	80089b4 <vPortExitCritical>
				return pdPASS;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e069      	b.n	8006cfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c30:	f001 fec0 	bl	80089b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e062      	b.n	8006cfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 ffca 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4c:	f001 feb2 	bl	80089b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c50:	f000 fd36 	bl	80076c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c54:	f001 fe7e 	bl	8008954 <vPortEnterCritical>
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d103      	bne.n	8006c6e <xQueueReceive+0x122>
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d103      	bne.n	8006c84 <xQueueReceive+0x138>
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c84:	f001 fe96 	bl	80089b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c88:	1d3a      	adds	r2, r7, #4
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 ffb9 	bl	8007c08 <xTaskCheckForTimeOut>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d123      	bne.n	8006ce4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9e:	f000 f997 	bl	8006fd0 <prvIsQueueEmpty>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fedf 	bl	8007a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb8:	f000 f938 	bl	8006f2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cbc:	f000 fd0e 	bl	80076dc <xTaskResumeAll>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d189      	bne.n	8006bda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xQueueReceive+0x1bc>)
 8006cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	e780      	b.n	8006bda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cda:	f000 f927 	bl	8006f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cde:	f000 fcfd 	bl	80076dc <xTaskResumeAll>
 8006ce2:	e77a      	b.n	8006bda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 f921 	bl	8006f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cea:	f000 fcf7 	bl	80076dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	f000 f96e 	bl	8006fd0 <prvIsQueueEmpty>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f43f af6f 	beq.w	8006bda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3730      	adds	r7, #48	; 0x30
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08e      	sub	sp, #56	; 0x38
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	623b      	str	r3, [r7, #32]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <xQueueReceiveFromISR+0x3a>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <xQueueReceiveFromISR+0x3e>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <xQueueReceiveFromISR+0x40>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	61fb      	str	r3, [r7, #28]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d66:	f001 fed7 	bl	8008b18 <vPortValidateInterruptPriority>
	__asm volatile
 8006d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	61ba      	str	r2, [r7, #24]
 8006d80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02f      	beq.n	8006df2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da0:	f000 f89e 	bl	8006ee0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d112      	bne.n	8006ddc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fea6 	bl	8007b14 <xTaskRemoveFromEventList>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e007      	b.n	8006dec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	3301      	adds	r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	b25a      	sxtb	r2, r3
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006dec:	2301      	movs	r3, #1
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
 8006df0:	e001      	b.n	8006df6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f383 8811 	msr	BASEPRI, r3
}
 8006e00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3738      	adds	r7, #56	; 0x38
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10d      	bne.n	8006e46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d14d      	bne.n	8006ece <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f84c 	bl	8007ed4 <xTaskPriorityDisinherit>
 8006e3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	609a      	str	r2, [r3, #8]
 8006e44:	e043      	b.n	8006ece <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d119      	bne.n	8006e80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6858      	ldr	r0, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	461a      	mov	r2, r3
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	f002 f9ab 	bl	80091b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d32b      	bcc.n	8006ece <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	e026      	b.n	8006ece <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68d8      	ldr	r0, [r3, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	f002 f991 	bl	80091b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	425b      	negs	r3, r3
 8006e9a:	441a      	add	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d207      	bcs.n	8006ebc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	425b      	negs	r3, r3
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d105      	bne.n	8006ece <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ed6:	697b      	ldr	r3, [r7, #20]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	441a      	add	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d303      	bcc.n	8006f14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68d9      	ldr	r1, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6838      	ldr	r0, [r7, #0]
 8006f20:	f002 f947 	bl	80091b2 <memcpy>
	}
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f34:	f001 fd0e 	bl	8008954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f40:	e011      	b.n	8006f66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d012      	beq.n	8006f70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3324      	adds	r3, #36	; 0x24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fde0 	bl	8007b14 <xTaskRemoveFromEventList>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f5a:	f000 feb7 	bl	8007ccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dce9      	bgt.n	8006f42 <prvUnlockQueue+0x16>
 8006f6e:	e000      	b.n	8006f72 <prvUnlockQueue+0x46>
					break;
 8006f70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f7a:	f001 fd1b 	bl	80089b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f7e:	f001 fce9 	bl	8008954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f8a:	e011      	b.n	8006fb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d012      	beq.n	8006fba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3310      	adds	r3, #16
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fdbb 	bl	8007b14 <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fa4:	f000 fe92 	bl	8007ccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dce9      	bgt.n	8006f8c <prvUnlockQueue+0x60>
 8006fb8:	e000      	b.n	8006fbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	22ff      	movs	r2, #255	; 0xff
 8006fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fc4:	f001 fcf6 	bl	80089b4 <vPortExitCritical>
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fd8:	f001 fcbc 	bl	8008954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e001      	b.n	8006fee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 fce1 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007004:	f001 fca6 	bl	8008954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	429a      	cmp	r2, r3
 8007012:	d102      	bne.n	800701a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e001      	b.n	800701e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800701e:	f001 fcc9 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 8007022:	68fb      	ldr	r3, [r7, #12]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e014      	b.n	8007066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800703c:	4a0f      	ldr	r2, [pc, #60]	; (800707c <vQueueAddToRegistry+0x50>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007048:	490c      	ldr	r1, [pc, #48]	; (800707c <vQueueAddToRegistry+0x50>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007052:	4a0a      	ldr	r2, [pc, #40]	; (800707c <vQueueAddToRegistry+0x50>)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800705e:	e006      	b.n	800706e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b07      	cmp	r3, #7
 800706a:	d9e7      	bls.n	800703c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20001334 	.word	0x20001334

08007080 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007090:	f001 fc60 	bl	8008954 <vPortEnterCritical>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800709a:	b25b      	sxtb	r3, r3
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d103      	bne.n	80070aa <vQueueWaitForMessageRestricted+0x2a>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d103      	bne.n	80070c0 <vQueueWaitForMessageRestricted+0x40>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070c0:	f001 fc78 	bl	80089b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fcf1 	bl	8007abc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f7ff ff26 	bl	8006f2c <prvUnlockQueue>
	}
 80070e0:	bf00      	nop
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xTaskCreateStatic+0x2a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xTaskCreateStatic+0x46>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	61fb      	str	r3, [r7, #28]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800712e:	23bc      	movs	r3, #188	; 0xbc
 8007130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2bbc      	cmp	r3, #188	; 0xbc
 8007136:	d00a      	beq.n	800714e <xTaskCreateStatic+0x66>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	61bb      	str	r3, [r7, #24]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800714e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01e      	beq.n	8007194 <xTaskCreateStatic+0xac>
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01b      	beq.n	8007194 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007164:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	2202      	movs	r2, #2
 800716a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800716e:	2300      	movs	r3, #0
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f850 	bl	800722c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800718c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800718e:	f000 f8f3 	bl	8007378 <prvAddNewTaskToReadyList>
 8007192:	e001      	b.n	8007198 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007198:	697b      	ldr	r3, [r7, #20]
	}
 800719a:	4618      	mov	r0, r3
 800719c:	3728      	adds	r7, #40	; 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b08c      	sub	sp, #48	; 0x30
 80071a6:	af04      	add	r7, sp, #16
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fcee 	bl	8008b98 <pvPortMalloc>
 80071bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071c4:	20bc      	movs	r0, #188	; 0xbc
 80071c6:	f001 fce7 	bl	8008b98 <pvPortMalloc>
 80071ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
 80071d8:	e005      	b.n	80071e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071da:	6978      	ldr	r0, [r7, #20]
 80071dc:	f001 fda8 	bl	8008d30 <vPortFree>
 80071e0:	e001      	b.n	80071e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d017      	beq.n	800721c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9303      	str	r3, [sp, #12]
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	9302      	str	r3, [sp, #8]
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f80e 	bl	800722c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007210:	69f8      	ldr	r0, [r7, #28]
 8007212:	f000 f8b1 	bl	8007378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007216:	2301      	movs	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e002      	b.n	8007222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800721c:	f04f 33ff 	mov.w	r3, #4294967295
 8007220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007222:	69bb      	ldr	r3, [r7, #24]
	}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	461a      	mov	r2, r3
 8007244:	21a5      	movs	r1, #165	; 0xa5
 8007246:	f001 ffc2 	bl	80091ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007254:	3b01      	subs	r3, #1
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <prvInitialiseNewTask+0x58>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	617b      	str	r3, [r7, #20]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01f      	beq.n	80072ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	e012      	b.n	80072b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	7819      	ldrb	r1, [r3, #0]
 8007298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	3334      	adds	r3, #52	; 0x34
 80072a0:	460a      	mov	r2, r1
 80072a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d006      	beq.n	80072be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b0f      	cmp	r3, #15
 80072ba:	d9e9      	bls.n	8007290 <prvInitialiseNewTask+0x64>
 80072bc:	e000      	b.n	80072c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80072be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072c8:	e003      	b.n	80072d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	2b37      	cmp	r3, #55	; 0x37
 80072d6:	d901      	bls.n	80072dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072d8:	2337      	movs	r3, #55	; 0x37
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	2200      	movs	r2, #0
 80072ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	3304      	adds	r3, #4
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff f8be 	bl	8006474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	3318      	adds	r3, #24
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff f8b9 	bl	8006474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	2200      	movs	r2, #0
 8007324:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	3354      	adds	r3, #84	; 0x54
 800732c:	2260      	movs	r2, #96	; 0x60
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f001 ff4c 	bl	80091ce <memset>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	4a0c      	ldr	r2, [pc, #48]	; (800736c <prvInitialiseNewTask+0x140>)
 800733a:	659a      	str	r2, [r3, #88]	; 0x58
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	4a0c      	ldr	r2, [pc, #48]	; (8007370 <prvInitialiseNewTask+0x144>)
 8007340:	65da      	str	r2, [r3, #92]	; 0x5c
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <prvInitialiseNewTask+0x148>)
 8007346:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	69b8      	ldr	r0, [r7, #24]
 800734e:	f001 f9d1 	bl	80086f4 <pxPortInitialiseStack>
 8007352:	4602      	mov	r2, r0
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007362:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007364:	bf00      	nop
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	0800a408 	.word	0x0800a408
 8007370:	0800a428 	.word	0x0800a428
 8007374:	0800a3e8 	.word	0x0800a3e8

08007378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007380:	f001 fae8 	bl	8008954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007384:	4b2d      	ldr	r3, [pc, #180]	; (800743c <prvAddNewTaskToReadyList+0xc4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	4a2c      	ldr	r2, [pc, #176]	; (800743c <prvAddNewTaskToReadyList+0xc4>)
 800738c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800738e:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007396:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800739c:	4b27      	ldr	r3, [pc, #156]	; (800743c <prvAddNewTaskToReadyList+0xc4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d110      	bne.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073a4:	f000 fcb6 	bl	8007d14 <prvInitialiseTaskLists>
 80073a8:	e00d      	b.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073aa:	4b26      	ldr	r3, [pc, #152]	; (8007444 <prvAddNewTaskToReadyList+0xcc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d802      	bhi.n	80073c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073c0:	4a1f      	ldr	r2, [pc, #124]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073c6:	4b20      	ldr	r3, [pc, #128]	; (8007448 <prvAddNewTaskToReadyList+0xd0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <prvAddNewTaskToReadyList+0xd0>)
 80073ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073d0:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <prvAddNewTaskToReadyList+0xd0>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <prvAddNewTaskToReadyList+0xd4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <prvAddNewTaskToReadyList+0x74>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a18      	ldr	r2, [pc, #96]	; (800744c <prvAddNewTaskToReadyList+0xd4>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <prvAddNewTaskToReadyList+0xd8>)
 80073fa:	441a      	add	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7ff f843 	bl	800648e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007408:	f001 fad4 	bl	80089b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <prvAddNewTaskToReadyList+0xcc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007414:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <prvAddNewTaskToReadyList+0xc8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d207      	bcs.n	8007432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007422:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <prvAddNewTaskToReadyList+0xdc>)
 8007424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20001848 	.word	0x20001848
 8007440:	20001374 	.word	0x20001374
 8007444:	20001854 	.word	0x20001854
 8007448:	20001864 	.word	0x20001864
 800744c:	20001850 	.word	0x20001850
 8007450:	20001378 	.word	0x20001378
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d017      	beq.n	800749a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <vTaskDelay+0x60>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <vTaskDelay+0x30>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007488:	f000 f91a 	bl	80076c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800748c:	2100      	movs	r1, #0
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fd8e 	bl	8007fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007494:	f000 f922 	bl	80076dc <xTaskResumeAll>
 8007498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d107      	bne.n	80074b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <vTaskDelay+0x64>)
 80074a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20001870 	.word	0x20001870
 80074bc:	e000ed04 	.word	0xe000ed04

080074c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	4a0a      	ldr	r2, [pc, #40]	; (800751c <prvTaskIsTaskSuspended+0x5c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d10a      	bne.n	800750c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <prvTaskIsTaskSuspended+0x60>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d005      	beq.n	800750c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800750c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20001834 	.word	0x20001834
 8007520:	20001808 	.word	0x20001808

08007524 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <vTaskResume+0x28>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60bb      	str	r3, [r7, #8]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800754c:	4b20      	ldr	r3, [pc, #128]	; (80075d0 <vTaskResume+0xac>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d038      	beq.n	80075c8 <vTaskResume+0xa4>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d035      	beq.n	80075c8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800755c:	f001 f9fa 	bl	8008954 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff ffad 	bl	80074c0 <prvTaskIsTaskSuspended>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d02b      	beq.n	80075c4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe ffe9 	bl	8006548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <vTaskResume+0xb0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d903      	bls.n	800758a <vTaskResume+0x66>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	4a13      	ldr	r2, [pc, #76]	; (80075d4 <vTaskResume+0xb0>)
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4a10      	ldr	r2, [pc, #64]	; (80075d8 <vTaskResume+0xb4>)
 8007598:	441a      	add	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7fe ff74 	bl	800648e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <vTaskResume+0xac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d307      	bcc.n	80075c4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <vTaskResume+0xb8>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80075c4:	f001 f9f6 	bl	80089b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20001374 	.word	0x20001374
 80075d4:	20001850 	.word	0x20001850
 80075d8:	20001378 	.word	0x20001378
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ee:	463a      	mov	r2, r7
 80075f0:	1d39      	adds	r1, r7, #4
 80075f2:	f107 0308 	add.w	r3, r7, #8
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fee8 	bl	80063cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	9202      	str	r2, [sp, #8]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	2300      	movs	r3, #0
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	460a      	mov	r2, r1
 800760e:	4924      	ldr	r1, [pc, #144]	; (80076a0 <vTaskStartScheduler+0xc0>)
 8007610:	4824      	ldr	r0, [pc, #144]	; (80076a4 <vTaskStartScheduler+0xc4>)
 8007612:	f7ff fd69 	bl	80070e8 <xTaskCreateStatic>
 8007616:	4603      	mov	r3, r0
 8007618:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <vTaskStartScheduler+0xc8>)
 800761a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800761c:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <vTaskStartScheduler+0xc8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007624:	2301      	movs	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e001      	b.n	800762e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d102      	bne.n	800763a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007634:	f000 fd10 	bl	8008058 <xTimerCreateTimerTask>
 8007638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d11b      	bne.n	8007678 <vTaskStartScheduler+0x98>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
}
 8007652:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007654:	4b15      	ldr	r3, [pc, #84]	; (80076ac <vTaskStartScheduler+0xcc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3354      	adds	r3, #84	; 0x54
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <vTaskStartScheduler+0xd0>)
 800765c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <vTaskStartScheduler+0xd4>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <vTaskStartScheduler+0xd8>)
 8007668:	2201      	movs	r2, #1
 800766a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800766c:	4b13      	ldr	r3, [pc, #76]	; (80076bc <vTaskStartScheduler+0xdc>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007672:	f001 f8cd 	bl	8008810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007676:	e00e      	b.n	8007696 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d10a      	bne.n	8007696 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	60fb      	str	r3, [r7, #12]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <vTaskStartScheduler+0xb4>
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	0800a28c 	.word	0x0800a28c
 80076a4:	08007ce5 	.word	0x08007ce5
 80076a8:	2000186c 	.word	0x2000186c
 80076ac:	20001374 	.word	0x20001374
 80076b0:	20000028 	.word	0x20000028
 80076b4:	20001868 	.word	0x20001868
 80076b8:	20001854 	.word	0x20001854
 80076bc:	2000184c 	.word	0x2000184c

080076c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20001870 	.word	0x20001870

080076dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <xTaskResumeAll+0x118>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskResumeAll+0x2c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	603b      	str	r3, [r7, #0]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007708:	f001 f924 	bl	8008954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800770c:	4b39      	ldr	r3, [pc, #228]	; (80077f4 <xTaskResumeAll+0x118>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3b01      	subs	r3, #1
 8007712:	4a38      	ldr	r2, [pc, #224]	; (80077f4 <xTaskResumeAll+0x118>)
 8007714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <xTaskResumeAll+0x118>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d162      	bne.n	80077e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800771e:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <xTaskResumeAll+0x11c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d05e      	beq.n	80077e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007726:	e02f      	b.n	8007788 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007728:	4b34      	ldr	r3, [pc, #208]	; (80077fc <xTaskResumeAll+0x120>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3318      	adds	r3, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe ff07 	bl	8006548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe ff02 	bl	8006548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <xTaskResumeAll+0x124>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d903      	bls.n	8007758 <xTaskResumeAll+0x7c>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <xTaskResumeAll+0x124>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <xTaskResumeAll+0x128>)
 8007766:	441a      	add	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe fe8d 	bl	800648e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4b23      	ldr	r3, [pc, #140]	; (8007808 <xTaskResumeAll+0x12c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	429a      	cmp	r2, r3
 8007780:	d302      	bcc.n	8007788 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007782:	4b22      	ldr	r3, [pc, #136]	; (800780c <xTaskResumeAll+0x130>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007788:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <xTaskResumeAll+0x120>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1cb      	bne.n	8007728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007796:	f000 fb5f 	bl	8007e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <xTaskResumeAll+0x134>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d010      	beq.n	80077c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077a6:	f000 f847 	bl	8007838 <xTaskIncrementTick>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077b0:	4b16      	ldr	r3, [pc, #88]	; (800780c <xTaskResumeAll+0x130>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f1      	bne.n	80077a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <xTaskResumeAll+0x134>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077c8:	4b10      	ldr	r3, [pc, #64]	; (800780c <xTaskResumeAll+0x130>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077d0:	2301      	movs	r3, #1
 80077d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <xTaskResumeAll+0x138>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e4:	f001 f8e6 	bl	80089b4 <vPortExitCritical>

	return xAlreadyYielded;
 80077e8:	68bb      	ldr	r3, [r7, #8]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20001870 	.word	0x20001870
 80077f8:	20001848 	.word	0x20001848
 80077fc:	20001808 	.word	0x20001808
 8007800:	20001850 	.word	0x20001850
 8007804:	20001378 	.word	0x20001378
 8007808:	20001374 	.word	0x20001374
 800780c:	2000185c 	.word	0x2000185c
 8007810:	20001858 	.word	0x20001858
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <xTaskGetTickCount+0x1c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007824:	687b      	ldr	r3, [r7, #4]
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2000184c 	.word	0x2000184c

08007838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007842:	4b4f      	ldr	r3, [pc, #316]	; (8007980 <xTaskIncrementTick+0x148>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 808f 	bne.w	800796a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800784c:	4b4d      	ldr	r3, [pc, #308]	; (8007984 <xTaskIncrementTick+0x14c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007854:	4a4b      	ldr	r2, [pc, #300]	; (8007984 <xTaskIncrementTick+0x14c>)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d120      	bne.n	80078a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007860:	4b49      	ldr	r3, [pc, #292]	; (8007988 <xTaskIncrementTick+0x150>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <xTaskIncrementTick+0x48>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xTaskIncrementTick+0x46>
 8007880:	4b41      	ldr	r3, [pc, #260]	; (8007988 <xTaskIncrementTick+0x150>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	4b41      	ldr	r3, [pc, #260]	; (800798c <xTaskIncrementTick+0x154>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a3f      	ldr	r2, [pc, #252]	; (8007988 <xTaskIncrementTick+0x150>)
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4a3f      	ldr	r2, [pc, #252]	; (800798c <xTaskIncrementTick+0x154>)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <xTaskIncrementTick+0x158>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	4a3d      	ldr	r2, [pc, #244]	; (8007990 <xTaskIncrementTick+0x158>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	f000 fadb 	bl	8007e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078a2:	4b3c      	ldr	r3, [pc, #240]	; (8007994 <xTaskIncrementTick+0x15c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d349      	bcc.n	8007940 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ac:	4b36      	ldr	r3, [pc, #216]	; (8007988 <xTaskIncrementTick+0x150>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b6:	4b37      	ldr	r3, [pc, #220]	; (8007994 <xTaskIncrementTick+0x15c>)
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	601a      	str	r2, [r3, #0]
					break;
 80078be:	e03f      	b.n	8007940 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c0:	4b31      	ldr	r3, [pc, #196]	; (8007988 <xTaskIncrementTick+0x150>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d203      	bcs.n	80078e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078d8:	4a2e      	ldr	r2, [pc, #184]	; (8007994 <xTaskIncrementTick+0x15c>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078de:	e02f      	b.n	8007940 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fe2f 	bl	8006548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3318      	adds	r3, #24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fe26 	bl	8006548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <xTaskIncrementTick+0x160>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d903      	bls.n	8007910 <xTaskIncrementTick+0xd8>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <xTaskIncrementTick+0x160>)
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <xTaskIncrementTick+0x164>)
 800791e:	441a      	add	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe fdb1 	bl	800648e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <xTaskIncrementTick+0x168>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	429a      	cmp	r2, r3
 8007938:	d3b8      	bcc.n	80078ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800793a:	2301      	movs	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793e:	e7b5      	b.n	80078ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007940:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <xTaskIncrementTick+0x168>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4915      	ldr	r1, [pc, #84]	; (800799c <xTaskIncrementTick+0x164>)
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d901      	bls.n	800795c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <xTaskIncrementTick+0x16c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d007      	beq.n	8007974 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e004      	b.n	8007974 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <xTaskIncrementTick+0x170>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3301      	adds	r3, #1
 8007970:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <xTaskIncrementTick+0x170>)
 8007972:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007974:	697b      	ldr	r3, [r7, #20]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20001870 	.word	0x20001870
 8007984:	2000184c 	.word	0x2000184c
 8007988:	20001800 	.word	0x20001800
 800798c:	20001804 	.word	0x20001804
 8007990:	20001860 	.word	0x20001860
 8007994:	20001868 	.word	0x20001868
 8007998:	20001850 	.word	0x20001850
 800799c:	20001378 	.word	0x20001378
 80079a0:	20001374 	.word	0x20001374
 80079a4:	2000185c 	.word	0x2000185c
 80079a8:	20001858 	.word	0x20001858

080079ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079b2:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <vTaskSwitchContext+0xb0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079ba:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <vTaskSwitchContext+0xb4>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079c0:	e046      	b.n	8007a50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80079c2:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <vTaskSwitchContext+0xb4>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c8:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <vTaskSwitchContext+0xb8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e010      	b.n	80079f2 <vTaskSwitchContext+0x46>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <vTaskSwitchContext+0x40>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	607b      	str	r3, [r7, #4]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <vTaskSwitchContext+0x3e>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	491d      	ldr	r1, [pc, #116]	; (8007a68 <vTaskSwitchContext+0xbc>)
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0e4      	beq.n	80079d0 <vTaskSwitchContext+0x24>
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <vTaskSwitchContext+0xbc>)
 8007a12:	4413      	add	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3308      	adds	r3, #8
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d104      	bne.n	8007a36 <vTaskSwitchContext+0x8a>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a0b      	ldr	r2, [pc, #44]	; (8007a6c <vTaskSwitchContext+0xc0>)
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <vTaskSwitchContext+0xb8>)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <vTaskSwitchContext+0xc0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3354      	adds	r3, #84	; 0x54
 8007a4c:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <vTaskSwitchContext+0xc4>)
 8007a4e:	6013      	str	r3, [r2, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20001870 	.word	0x20001870
 8007a60:	2000185c 	.word	0x2000185c
 8007a64:	20001850 	.word	0x20001850
 8007a68:	20001378 	.word	0x20001378
 8007a6c:	20001374 	.word	0x20001374
 8007a70:	20000028 	.word	0x20000028

08007a74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <vTaskPlaceOnEventList+0x44>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3318      	adds	r3, #24
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fe fd17 	bl	80064d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f000 fa80 	bl	8007fb0 <prvAddCurrentTaskToDelayedList>
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20001374 	.word	0x20001374

08007abc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7fe fcce 	bl	800648e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	68b8      	ldr	r0, [r7, #8]
 8007b02:	f000 fa55 	bl	8007fb0 <prvAddCurrentTaskToDelayedList>
	}
 8007b06:	bf00      	nop
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20001374 	.word	0x20001374

08007b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60fb      	str	r3, [r7, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3318      	adds	r3, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fcff 	bl	8006548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4a:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <xTaskRemoveFromEventList+0xb0>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11d      	bne.n	8007b8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fcf6 	bl	8006548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <xTaskRemoveFromEventList+0xb4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d903      	bls.n	8007b70 <xTaskRemoveFromEventList+0x5c>
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <xTaskRemoveFromEventList+0xb4>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <xTaskRemoveFromEventList+0xb8>)
 8007b7e:	441a      	add	r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fe fc81 	bl	800648e <vListInsertEnd>
 8007b8c:	e005      	b.n	8007b9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3318      	adds	r3, #24
 8007b92:	4619      	mov	r1, r3
 8007b94:	480e      	ldr	r0, [pc, #56]	; (8007bd0 <xTaskRemoveFromEventList+0xbc>)
 8007b96:	f7fe fc7a 	bl	800648e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <xTaskRemoveFromEventList+0xc0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d905      	bls.n	8007bb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <xTaskRemoveFromEventList+0xc4>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e001      	b.n	8007bb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bb8:	697b      	ldr	r3, [r7, #20]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20001870 	.word	0x20001870
 8007bc8:	20001850 	.word	0x20001850
 8007bcc:	20001378 	.word	0x20001378
 8007bd0:	20001808 	.word	0x20001808
 8007bd4:	20001374 	.word	0x20001374
 8007bd8:	2000185c 	.word	0x2000185c

08007bdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <vTaskInternalSetTimeOutState+0x24>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <vTaskInternalSetTimeOutState+0x28>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20001860 	.word	0x20001860
 8007c04:	2000184c 	.word	0x2000184c

08007c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	613b      	str	r3, [r7, #16]
}
 8007c2a:	bf00      	nop
 8007c2c:	e7fe      	b.n	8007c2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c4a:	f000 fe83 	bl	8008954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <xTaskCheckForTimeOut+0xbc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d102      	bne.n	8007c6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e023      	b.n	8007cb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <xTaskCheckForTimeOut+0xc0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d007      	beq.n	8007c8a <xTaskCheckForTimeOut+0x82>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d302      	bcc.n	8007c8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	61fb      	str	r3, [r7, #28]
 8007c88:	e015      	b.n	8007cb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d20b      	bcs.n	8007cac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff9b 	bl	8007bdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	e004      	b.n	8007cb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cb6:	f000 fe7d 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	2000184c 	.word	0x2000184c
 8007cc8:	20001860 	.word	0x20001860

08007ccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <vTaskMissedYield+0x14>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000185c 	.word	0x2000185c

08007ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cec:	f000 f852 	bl	8007d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <prvIdleTask+0x28>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d9f9      	bls.n	8007cec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <prvIdleTask+0x2c>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d08:	e7f0      	b.n	8007cec <prvIdleTask+0x8>
 8007d0a:	bf00      	nop
 8007d0c:	20001378 	.word	0x20001378
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	e00c      	b.n	8007d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4a12      	ldr	r2, [pc, #72]	; (8007d74 <prvInitialiseTaskLists+0x60>)
 8007d2c:	4413      	add	r3, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fb80 	bl	8006434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3301      	adds	r3, #1
 8007d38:	607b      	str	r3, [r7, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b37      	cmp	r3, #55	; 0x37
 8007d3e:	d9ef      	bls.n	8007d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d40:	480d      	ldr	r0, [pc, #52]	; (8007d78 <prvInitialiseTaskLists+0x64>)
 8007d42:	f7fe fb77 	bl	8006434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d46:	480d      	ldr	r0, [pc, #52]	; (8007d7c <prvInitialiseTaskLists+0x68>)
 8007d48:	f7fe fb74 	bl	8006434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d4c:	480c      	ldr	r0, [pc, #48]	; (8007d80 <prvInitialiseTaskLists+0x6c>)
 8007d4e:	f7fe fb71 	bl	8006434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d52:	480c      	ldr	r0, [pc, #48]	; (8007d84 <prvInitialiseTaskLists+0x70>)
 8007d54:	f7fe fb6e 	bl	8006434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d58:	480b      	ldr	r0, [pc, #44]	; (8007d88 <prvInitialiseTaskLists+0x74>)
 8007d5a:	f7fe fb6b 	bl	8006434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <prvInitialiseTaskLists+0x78>)
 8007d60:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <prvInitialiseTaskLists+0x64>)
 8007d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <prvInitialiseTaskLists+0x7c>)
 8007d66:	4a05      	ldr	r2, [pc, #20]	; (8007d7c <prvInitialiseTaskLists+0x68>)
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20001378 	.word	0x20001378
 8007d78:	200017d8 	.word	0x200017d8
 8007d7c:	200017ec 	.word	0x200017ec
 8007d80:	20001808 	.word	0x20001808
 8007d84:	2000181c 	.word	0x2000181c
 8007d88:	20001834 	.word	0x20001834
 8007d8c:	20001800 	.word	0x20001800
 8007d90:	20001804 	.word	0x20001804

08007d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d9a:	e019      	b.n	8007dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d9c:	f000 fdda 	bl	8008954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da0:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <prvCheckTasksWaitingTermination+0x50>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fbcb 	bl	8006548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <prvCheckTasksWaitingTermination+0x54>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4a0b      	ldr	r2, [pc, #44]	; (8007de8 <prvCheckTasksWaitingTermination+0x54>)
 8007dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <prvCheckTasksWaitingTermination+0x58>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <prvCheckTasksWaitingTermination+0x58>)
 8007dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dc6:	f000 fdf5 	bl	80089b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f810 	bl	8007df0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <prvCheckTasksWaitingTermination+0x58>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e1      	bne.n	8007d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	2000181c 	.word	0x2000181c
 8007de8:	20001848 	.word	0x20001848
 8007dec:	20001830 	.word	0x20001830

08007df0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3354      	adds	r3, #84	; 0x54
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 fb6b 	bl	80094d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d108      	bne.n	8007e1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 ff8d 	bl	8008d30 <vPortFree>
				vPortFree( pxTCB );
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 ff8a 	bl	8008d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e1c:	e018      	b.n	8007e50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d103      	bne.n	8007e30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 ff81 	bl	8008d30 <vPortFree>
	}
 8007e2e:	e00f      	b.n	8007e50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d00a      	beq.n	8007e50 <prvDeleteTCB+0x60>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60fb      	str	r3, [r7, #12]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <prvDeleteTCB+0x5e>
	}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <prvResetNextTaskUnblockTime+0x38>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <prvResetNextTaskUnblockTime+0x3c>)
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e70:	e008      	b.n	8007e84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e72:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <prvResetNextTaskUnblockTime+0x38>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a04      	ldr	r2, [pc, #16]	; (8007e94 <prvResetNextTaskUnblockTime+0x3c>)
 8007e82:	6013      	str	r3, [r2, #0]
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20001800 	.word	0x20001800
 8007e94:	20001868 	.word	0x20001868

08007e98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <xTaskGetSchedulerState+0x34>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	607b      	str	r3, [r7, #4]
 8007eaa:	e008      	b.n	8007ebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <xTaskGetSchedulerState+0x38>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	607b      	str	r3, [r7, #4]
 8007eb8:	e001      	b.n	8007ebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ebe:	687b      	ldr	r3, [r7, #4]
	}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20001854 	.word	0x20001854
 8007ed0:	20001870 	.word	0x20001870

08007ed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d056      	beq.n	8007f98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <xTaskPriorityDisinherit+0xd0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d00a      	beq.n	8007f0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60fb      	str	r3, [r7, #12]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2c:	1e5a      	subs	r2, r3, #1
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d02c      	beq.n	8007f98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d128      	bne.n	8007f98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fafc 	bl	8006548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4b0f      	ldr	r3, [pc, #60]	; (8007fa8 <xTaskPriorityDisinherit+0xd4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d903      	bls.n	8007f78 <xTaskPriorityDisinherit+0xa4>
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <xTaskPriorityDisinherit+0xd4>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4a09      	ldr	r2, [pc, #36]	; (8007fac <xTaskPriorityDisinherit+0xd8>)
 8007f86:	441a      	add	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe fa7d 	bl	800648e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f98:	697b      	ldr	r3, [r7, #20]
	}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20001374 	.word	0x20001374
 8007fa8:	20001850 	.word	0x20001850
 8007fac:	20001378 	.word	0x20001378

08007fb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fba:	4b21      	ldr	r3, [pc, #132]	; (8008040 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc0:	4b20      	ldr	r3, [pc, #128]	; (8008044 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fabe 	bl	8006548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd2:	d10a      	bne.n	8007fea <prvAddCurrentTaskToDelayedList+0x3a>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4819      	ldr	r0, [pc, #100]	; (8008048 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fe4:	f7fe fa53 	bl	800648e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fe8:	e026      	b.n	8008038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d209      	bcs.n	8008016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <prvAddCurrentTaskToDelayedList+0x94>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fa61 	bl	80064d6 <vListInsert>
}
 8008014:	e010      	b.n	8008038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008016:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <prvAddCurrentTaskToDelayedList+0x94>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fe fa57 	bl	80064d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	d202      	bcs.n	8008038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008032:	4a08      	ldr	r2, [pc, #32]	; (8008054 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	6013      	str	r3, [r2, #0]
}
 8008038:	bf00      	nop
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	2000184c 	.word	0x2000184c
 8008044:	20001374 	.word	0x20001374
 8008048:	20001834 	.word	0x20001834
 800804c:	20001804 	.word	0x20001804
 8008050:	20001800 	.word	0x20001800
 8008054:	20001868 	.word	0x20001868

08008058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08a      	sub	sp, #40	; 0x28
 800805c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008062:	f000 fb07 	bl	8008674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008066:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <xTimerCreateTimerTask+0x80>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d021      	beq.n	80080b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008076:	1d3a      	adds	r2, r7, #4
 8008078:	f107 0108 	add.w	r1, r7, #8
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe f9bd 	bl	8006400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	9202      	str	r2, [sp, #8]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2302      	movs	r3, #2
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	460a      	mov	r2, r1
 8008098:	4910      	ldr	r1, [pc, #64]	; (80080dc <xTimerCreateTimerTask+0x84>)
 800809a:	4811      	ldr	r0, [pc, #68]	; (80080e0 <xTimerCreateTimerTask+0x88>)
 800809c:	f7ff f824 	bl	80070e8 <xTaskCreateStatic>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4a10      	ldr	r2, [pc, #64]	; (80080e4 <xTimerCreateTimerTask+0x8c>)
 80080a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <xTimerCreateTimerTask+0x8c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ae:	2301      	movs	r3, #1
 80080b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	613b      	str	r3, [r7, #16]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080ce:	697b      	ldr	r3, [r7, #20]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200018a4 	.word	0x200018a4
 80080dc:	0800a2a4 	.word	0x0800a2a4
 80080e0:	0800821d 	.word	0x0800821d
 80080e4:	200018a8 	.word	0x200018a8

080080e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	; 0x28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	623b      	str	r3, [r7, #32]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008116:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <xTimerGenericCommand+0x98>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02a      	beq.n	8008174 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b05      	cmp	r3, #5
 800812e:	dc18      	bgt.n	8008162 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008130:	f7ff feb2 	bl	8007e98 <xTaskGetSchedulerState>
 8008134:	4603      	mov	r3, r0
 8008136:	2b02      	cmp	r3, #2
 8008138:	d109      	bne.n	800814e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800813a:	4b11      	ldr	r3, [pc, #68]	; (8008180 <xTimerGenericCommand+0x98>)
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	f107 0110 	add.w	r1, r7, #16
 8008142:	2300      	movs	r3, #0
 8008144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008146:	f7fe fb67 	bl	8006818 <xQueueGenericSend>
 800814a:	6278      	str	r0, [r7, #36]	; 0x24
 800814c:	e012      	b.n	8008174 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <xTimerGenericCommand+0x98>)
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f107 0110 	add.w	r1, r7, #16
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	f7fe fb5d 	bl	8006818 <xQueueGenericSend>
 800815e:	6278      	str	r0, [r7, #36]	; 0x24
 8008160:	e008      	b.n	8008174 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <xTimerGenericCommand+0x98>)
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f107 0110 	add.w	r1, r7, #16
 800816a:	2300      	movs	r3, #0
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	f7fe fc51 	bl	8006a14 <xQueueGenericSendFromISR>
 8008172:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008176:	4618      	mov	r0, r3
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	200018a4 	.word	0x200018a4

08008184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818e:	4b22      	ldr	r3, [pc, #136]	; (8008218 <prvProcessExpiredTimer+0x94>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe f9d3 	bl	8006548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d022      	beq.n	80081f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	699a      	ldr	r2, [r3, #24]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	18d1      	adds	r1, r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	6978      	ldr	r0, [r7, #20]
 80081be:	f000 f8d1 	bl	8008364 <prvInsertTimerInActiveList>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01f      	beq.n	8008208 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2300      	movs	r3, #0
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	2100      	movs	r1, #0
 80081d2:	6978      	ldr	r0, [r7, #20]
 80081d4:	f7ff ff88 	bl	80080e8 <xTimerGenericCommand>
 80081d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d113      	bne.n	8008208 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	b2da      	uxtb	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	6978      	ldr	r0, [r7, #20]
 800820e:	4798      	blx	r3
}
 8008210:	bf00      	nop
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000189c 	.word	0x2000189c

0800821c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008224:	f107 0308 	add.w	r3, r7, #8
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f857 	bl	80082dc <prvGetNextExpireTime>
 800822e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f803 	bl	8008240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800823a:	f000 f8d5 	bl	80083e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800823e:	e7f1      	b.n	8008224 <prvTimerTask+0x8>

08008240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800824a:	f7ff fa39 	bl	80076c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800824e:	f107 0308 	add.w	r3, r7, #8
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f866 	bl	8008324 <prvSampleTimeNow>
 8008258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d130      	bne.n	80082c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <prvProcessTimerOrBlockTask+0x3c>
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	429a      	cmp	r2, r3
 800826c:	d806      	bhi.n	800827c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800826e:	f7ff fa35 	bl	80076dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff ff85 	bl	8008184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800827a:	e024      	b.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d008      	beq.n	8008294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008282:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <prvProcessTimerOrBlockTask+0x90>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <prvProcessTimerOrBlockTask+0x50>
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <prvProcessTimerOrBlockTask+0x52>
 8008290:	2300      	movs	r3, #0
 8008292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <prvProcessTimerOrBlockTask+0x94>)
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7fe feed 	bl	8007080 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082a6:	f7ff fa19 	bl	80076dc <xTaskResumeAll>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <prvProcessTimerOrBlockTask+0x98>)
 80082b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
}
 80082c0:	e001      	b.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082c2:	f7ff fa0b 	bl	80076dc <xTaskResumeAll>
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200018a0 	.word	0x200018a0
 80082d4:	200018a4 	.word	0x200018a4
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082e4:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <prvGetNextExpireTime+0x44>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <prvGetNextExpireTime+0x16>
 80082ee:	2201      	movs	r2, #1
 80082f0:	e000      	b.n	80082f4 <prvGetNextExpireTime+0x18>
 80082f2:	2200      	movs	r2, #0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <prvGetNextExpireTime+0x44>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e001      	b.n	8008310 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008310:	68fb      	ldr	r3, [r7, #12]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2000189c 	.word	0x2000189c

08008324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800832c:	f7ff fa74 	bl	8007818 <xTaskGetTickCount>
 8008330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008332:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <prvSampleTimeNow+0x3c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	429a      	cmp	r2, r3
 800833a:	d205      	bcs.n	8008348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800833c:	f000 f936 	bl	80085ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e002      	b.n	800834e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800834e:	4a04      	ldr	r2, [pc, #16]	; (8008360 <prvSampleTimeNow+0x3c>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200018ac 	.word	0x200018ac

08008364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d812      	bhi.n	80083b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008398:	2301      	movs	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e01b      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <prvInsertTimerInActiveList+0x7c>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7fe f894 	bl	80064d6 <vListInsert>
 80083ae:	e012      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d206      	bcs.n	80083c6 <prvInsertTimerInActiveList+0x62>
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e007      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <prvInsertTimerInActiveList+0x80>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7fe f880 	bl	80064d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083d6:	697b      	ldr	r3, [r7, #20]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	200018a0 	.word	0x200018a0
 80083e4:	2000189c 	.word	0x2000189c

080083e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ee:	e0ca      	b.n	8008586 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da18      	bge.n	8008428 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	3304      	adds	r3, #4
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	61fb      	str	r3, [r7, #28]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800841e:	6850      	ldr	r0, [r2, #4]
 8008420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008422:	6892      	ldr	r2, [r2, #8]
 8008424:	4611      	mov	r1, r2
 8008426:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f2c0 80aa 	blt.w	8008584 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	3304      	adds	r3, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe f881 	bl	8006548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008446:	463b      	mov	r3, r7
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff ff6b 	bl	8008324 <prvSampleTimeNow>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b09      	cmp	r3, #9
 8008454:	f200 8097 	bhi.w	8008586 <prvProcessReceivedCommands+0x19e>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <prvProcessReceivedCommands+0x78>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008489 	.word	0x08008489
 8008464:	08008489 	.word	0x08008489
 8008468:	08008489 	.word	0x08008489
 800846c:	080084fd 	.word	0x080084fd
 8008470:	08008511 	.word	0x08008511
 8008474:	0800855b 	.word	0x0800855b
 8008478:	08008489 	.word	0x08008489
 800847c:	08008489 	.word	0x08008489
 8008480:	080084fd 	.word	0x080084fd
 8008484:	08008511 	.word	0x08008511
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	18d1      	adds	r1, r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a8:	f7ff ff5c 	bl	8008364 <prvInsertTimerInActiveList>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d069      	beq.n	8008586 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05e      	beq.n	8008586 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	441a      	add	r2, r3
 80084d0:	2300      	movs	r3, #0
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084da:	f7ff fe05 	bl	80080e8 <xTimerGenericCommand>
 80084de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d14f      	bne.n	8008586 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	61bb      	str	r3, [r7, #24]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	b2da      	uxtb	r2, r3
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800850e:	e03a      	b.n	8008586 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008516:	f043 0301 	orr.w	r3, r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	617b      	str	r3, [r7, #20]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	18d1      	adds	r1, r2, r3
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008554:	f7ff ff06 	bl	8008364 <prvInsertTimerInActiveList>
					break;
 8008558:	e015      	b.n	8008586 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800856a:	f000 fbe1 	bl	8008d30 <vPortFree>
 800856e:	e00a      	b.n	8008586 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008582:	e000      	b.n	8008586 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008584:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <prvProcessReceivedCommands+0x1c0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1d39      	adds	r1, r7, #4
 800858c:	2200      	movs	r2, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fadc 	bl	8006b4c <xQueueReceive>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	f47f af2a 	bne.w	80083f0 <prvProcessReceivedCommands+0x8>
	}
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	3730      	adds	r7, #48	; 0x30
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200018a4 	.word	0x200018a4

080085ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085b2:	e048      	b.n	8008646 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085b4:	4b2d      	ldr	r3, [pc, #180]	; (800866c <prvSwitchTimerLists+0xc0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085be:	4b2b      	ldr	r3, [pc, #172]	; (800866c <prvSwitchTimerLists+0xc0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fd ffbb 	bl	8006548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d02e      	beq.n	8008646 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4413      	add	r3, r2
 80085f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d90e      	bls.n	8008618 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008606:	4b19      	ldr	r3, [pc, #100]	; (800866c <prvSwitchTimerLists+0xc0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fd ff60 	bl	80064d6 <vListInsert>
 8008616:	e016      	b.n	8008646 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	2100      	movs	r1, #0
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff fd60 	bl	80080e8 <xTimerGenericCommand>
 8008628:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	603b      	str	r3, [r7, #0]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008646:	4b09      	ldr	r3, [pc, #36]	; (800866c <prvSwitchTimerLists+0xc0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1b1      	bne.n	80085b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <prvSwitchTimerLists+0xc0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <prvSwitchTimerLists+0xc4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a04      	ldr	r2, [pc, #16]	; (800866c <prvSwitchTimerLists+0xc0>)
 800865c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800865e:	4a04      	ldr	r2, [pc, #16]	; (8008670 <prvSwitchTimerLists+0xc4>)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	2000189c 	.word	0x2000189c
 8008670:	200018a0 	.word	0x200018a0

08008674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800867a:	f000 f96b 	bl	8008954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <prvCheckForValidListAndQueue+0x60>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d120      	bne.n	80086c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008686:	4814      	ldr	r0, [pc, #80]	; (80086d8 <prvCheckForValidListAndQueue+0x64>)
 8008688:	f7fd fed4 	bl	8006434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800868c:	4813      	ldr	r0, [pc, #76]	; (80086dc <prvCheckForValidListAndQueue+0x68>)
 800868e:	f7fd fed1 	bl	8006434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <prvCheckForValidListAndQueue+0x6c>)
 8008694:	4a10      	ldr	r2, [pc, #64]	; (80086d8 <prvCheckForValidListAndQueue+0x64>)
 8008696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008698:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <prvCheckForValidListAndQueue+0x70>)
 800869a:	4a10      	ldr	r2, [pc, #64]	; (80086dc <prvCheckForValidListAndQueue+0x68>)
 800869c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800869e:	2300      	movs	r3, #0
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <prvCheckForValidListAndQueue+0x74>)
 80086a4:	4a11      	ldr	r2, [pc, #68]	; (80086ec <prvCheckForValidListAndQueue+0x78>)
 80086a6:	2110      	movs	r1, #16
 80086a8:	200a      	movs	r0, #10
 80086aa:	f7fd ffdf 	bl	800666c <xQueueGenericCreateStatic>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4a08      	ldr	r2, [pc, #32]	; (80086d4 <prvCheckForValidListAndQueue+0x60>)
 80086b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086b4:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <prvCheckForValidListAndQueue+0x60>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <prvCheckForValidListAndQueue+0x60>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	490b      	ldr	r1, [pc, #44]	; (80086f0 <prvCheckForValidListAndQueue+0x7c>)
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fcb2 	bl	800702c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086c8:	f000 f974 	bl	80089b4 <vPortExitCritical>
}
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200018a4 	.word	0x200018a4
 80086d8:	20001874 	.word	0x20001874
 80086dc:	20001888 	.word	0x20001888
 80086e0:	2000189c 	.word	0x2000189c
 80086e4:	200018a0 	.word	0x200018a0
 80086e8:	20001950 	.word	0x20001950
 80086ec:	200018b0 	.word	0x200018b0
 80086f0:	0800a2ac 	.word	0x0800a2ac

080086f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b04      	subs	r3, #4
 8008704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800870c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3b04      	subs	r3, #4
 8008712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3b04      	subs	r3, #4
 8008722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008724:	4a0c      	ldr	r2, [pc, #48]	; (8008758 <pxPortInitialiseStack+0x64>)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3b14      	subs	r3, #20
 800872e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3b04      	subs	r3, #4
 800873a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f06f 0202 	mvn.w	r2, #2
 8008742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3b20      	subs	r3, #32
 8008748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800874a:	68fb      	ldr	r3, [r7, #12]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	0800875d 	.word	0x0800875d

0800875c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008766:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <prvTaskExitError+0x54>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d00a      	beq.n	8008786 <prvTaskExitError+0x2a>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <prvTaskExitError+0x28>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60bb      	str	r3, [r7, #8]
}
 8008798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800879a:	bf00      	nop
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0fc      	beq.n	800879c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000024 	.word	0x20000024
	...

080087c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <pxCurrentTCBConst2>)
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	6808      	ldr	r0, [r1, #0]
 80087c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	f380 8809 	msr	PSP, r0
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	4770      	bx	lr
 80087dc:	f3af 8000 	nop.w

080087e0 <pxCurrentTCBConst2>:
 80087e0:	20001374 	.word	0x20001374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087e8:	4808      	ldr	r0, [pc, #32]	; (800880c <prvPortStartFirstTask+0x24>)
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	6800      	ldr	r0, [r0, #0]
 80087ee:	f380 8808 	msr	MSP, r0
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f380 8814 	msr	CONTROL, r0
 80087fa:	b662      	cpsie	i
 80087fc:	b661      	cpsie	f
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	df00      	svc	0
 8008808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800880a:	bf00      	nop
 800880c:	e000ed08 	.word	0xe000ed08

08008810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008816:	4b46      	ldr	r3, [pc, #280]	; (8008930 <xPortStartScheduler+0x120>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a46      	ldr	r2, [pc, #280]	; (8008934 <xPortStartScheduler+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10a      	bne.n	8008836 <xPortStartScheduler+0x26>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008836:	4b3e      	ldr	r3, [pc, #248]	; (8008930 <xPortStartScheduler+0x120>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <xPortStartScheduler+0x128>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10a      	bne.n	8008856 <xPortStartScheduler+0x46>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008856:	4b39      	ldr	r3, [pc, #228]	; (800893c <xPortStartScheduler+0x12c>)
 8008858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <xPortStartScheduler+0x130>)
 800887c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <xPortStartScheduler+0x134>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008884:	e009      	b.n	800889a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008886:	4b2f      	ldr	r3, [pc, #188]	; (8008944 <xPortStartScheduler+0x134>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3b01      	subs	r3, #1
 800888c:	4a2d      	ldr	r2, [pc, #180]	; (8008944 <xPortStartScheduler+0x134>)
 800888e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d0ef      	beq.n	8008886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088a6:	4b27      	ldr	r3, [pc, #156]	; (8008944 <xPortStartScheduler+0x134>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f1c3 0307 	rsb	r3, r3, #7
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d00a      	beq.n	80088c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60bb      	str	r3, [r7, #8]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <xPortStartScheduler+0x134>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <xPortStartScheduler+0x134>)
 80088d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <xPortStartScheduler+0x134>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <xPortStartScheduler+0x134>)
 80088dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088e6:	4b18      	ldr	r3, [pc, #96]	; (8008948 <xPortStartScheduler+0x138>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <xPortStartScheduler+0x138>)
 80088ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <xPortStartScheduler+0x138>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a14      	ldr	r2, [pc, #80]	; (8008948 <xPortStartScheduler+0x138>)
 80088f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088fe:	f000 f8dd 	bl	8008abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <xPortStartScheduler+0x13c>)
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008908:	f000 f8fc 	bl	8008b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <xPortStartScheduler+0x140>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <xPortStartScheduler+0x140>)
 8008912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008918:	f7ff ff66 	bl	80087e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800891c:	f7ff f846 	bl	80079ac <vTaskSwitchContext>
	prvTaskExitError();
 8008920:	f7ff ff1c 	bl	800875c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	e000ed00 	.word	0xe000ed00
 8008934:	410fc271 	.word	0x410fc271
 8008938:	410fc270 	.word	0x410fc270
 800893c:	e000e400 	.word	0xe000e400
 8008940:	200019a0 	.word	0x200019a0
 8008944:	200019a4 	.word	0x200019a4
 8008948:	e000ed20 	.word	0xe000ed20
 800894c:	20000024 	.word	0x20000024
 8008950:	e000ef34 	.word	0xe000ef34

08008954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <vPortEnterCritical+0x58>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <vPortEnterCritical+0x58>)
 8008976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <vPortEnterCritical+0x58>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d10f      	bne.n	80089a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <vPortEnterCritical+0x5c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	603b      	str	r3, [r7, #0]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <vPortEnterCritical+0x4a>
	}
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	20000024 	.word	0x20000024
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <vPortExitCritical+0x50>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <vPortExitCritical+0x24>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	607b      	str	r3, [r7, #4]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <vPortExitCritical+0x50>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3b01      	subs	r3, #1
 80089de:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <vPortExitCritical+0x50>)
 80089e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089e2:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <vPortExitCritical+0x50>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <vPortExitCritical+0x42>
 80089ea:	2300      	movs	r3, #0
 80089ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	f383 8811 	msr	BASEPRI, r3
}
 80089f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000024 	.word	0x20000024
	...

08008a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a10:	f3ef 8009 	mrs	r0, PSP
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	4b15      	ldr	r3, [pc, #84]	; (8008a70 <pxCurrentTCBConst>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f01e 0f10 	tst.w	lr, #16
 8008a20:	bf08      	it	eq
 8008a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a34:	f380 8811 	msr	BASEPRI, r0
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f7fe ffb4 	bl	80079ac <vTaskSwitchContext>
 8008a44:	f04f 0000 	mov.w	r0, #0
 8008a48:	f380 8811 	msr	BASEPRI, r0
 8008a4c:	bc09      	pop	{r0, r3}
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	6808      	ldr	r0, [r1, #0]
 8008a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a56:	f01e 0f10 	tst.w	lr, #16
 8008a5a:	bf08      	it	eq
 8008a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a60:	f380 8809 	msr	PSP, r0
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst>:
 8008a70:	20001374 	.word	0x20001374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a92:	f7fe fed1 	bl	8007838 <xTaskIncrementTick>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <xPortSysTickHandler+0x40>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f383 8811 	msr	BASEPRI, r3
}
 8008aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <vPortSetupTimerInterrupt+0x34>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <vPortSetupTimerInterrupt+0x38>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <vPortSetupTimerInterrupt+0x3c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <vPortSetupTimerInterrupt+0x40>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	099b      	lsrs	r3, r3, #6
 8008ad8:	4a09      	ldr	r2, [pc, #36]	; (8008b00 <vPortSetupTimerInterrupt+0x44>)
 8008ada:	3b01      	subs	r3, #1
 8008adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <vPortSetupTimerInterrupt+0x34>)
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	e000e010 	.word	0xe000e010
 8008af4:	e000e018 	.word	0xe000e018
 8008af8:	20000018 	.word	0x20000018
 8008afc:	10624dd3 	.word	0x10624dd3
 8008b00:	e000e014 	.word	0xe000e014

08008b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b14 <vPortEnableVFP+0x10>
 8008b08:	6801      	ldr	r1, [r0, #0]
 8008b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b0e:	6001      	str	r1, [r0, #0]
 8008b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b12:	bf00      	nop
 8008b14:	e000ed88 	.word	0xe000ed88

08008b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b1e:	f3ef 8305 	mrs	r3, IPSR
 8008b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	d914      	bls.n	8008b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b2a:	4a17      	ldr	r2, [pc, #92]	; (8008b88 <vPortValidateInterruptPriority+0x70>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b34:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <vPortValidateInterruptPriority+0x74>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	7afa      	ldrb	r2, [r7, #11]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d20a      	bcs.n	8008b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	607b      	str	r3, [r7, #4]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b54:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <vPortValidateInterruptPriority+0x78>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <vPortValidateInterruptPriority+0x7c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d90a      	bls.n	8008b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	603b      	str	r3, [r7, #0]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <vPortValidateInterruptPriority+0x60>
	}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	e000e3f0 	.word	0xe000e3f0
 8008b8c:	200019a0 	.word	0x200019a0
 8008b90:	e000ed0c 	.word	0xe000ed0c
 8008b94:	200019a4 	.word	0x200019a4

08008b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ba4:	f7fe fd8c 	bl	80076c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ba8:	4b5b      	ldr	r3, [pc, #364]	; (8008d18 <pvPortMalloc+0x180>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bb0:	f000 f920 	bl	8008df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bb4:	4b59      	ldr	r3, [pc, #356]	; (8008d1c <pvPortMalloc+0x184>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f040 8093 	bne.w	8008ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01d      	beq.n	8008c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008bc8:	2208      	movs	r2, #8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d014      	beq.n	8008c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f023 0307 	bic.w	r3, r3, #7
 8008be0:	3308      	adds	r3, #8
 8008be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <pvPortMalloc+0x6c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	617b      	str	r3, [r7, #20]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d06e      	beq.n	8008ce8 <pvPortMalloc+0x150>
 8008c0a:	4b45      	ldr	r3, [pc, #276]	; (8008d20 <pvPortMalloc+0x188>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d869      	bhi.n	8008ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c14:	4b43      	ldr	r3, [pc, #268]	; (8008d24 <pvPortMalloc+0x18c>)
 8008c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c18:	4b42      	ldr	r3, [pc, #264]	; (8008d24 <pvPortMalloc+0x18c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c1e:	e004      	b.n	8008c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <pvPortMalloc+0xa4>
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f1      	bne.n	8008c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c3c:	4b36      	ldr	r3, [pc, #216]	; (8008d18 <pvPortMalloc+0x180>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d050      	beq.n	8008ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	4413      	add	r3, r2
 8008c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	2308      	movs	r3, #8
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d91f      	bls.n	8008ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <pvPortMalloc+0xf8>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	613b      	str	r3, [r7, #16]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ca2:	69b8      	ldr	r0, [r7, #24]
 8008ca4:	f000 f908 	bl	8008eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ca8:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <pvPortMalloc+0x188>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <pvPortMalloc+0x188>)
 8008cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <pvPortMalloc+0x188>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <pvPortMalloc+0x190>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d203      	bcs.n	8008cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cc2:	4b17      	ldr	r3, [pc, #92]	; (8008d20 <pvPortMalloc+0x188>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <pvPortMalloc+0x190>)
 8008cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <pvPortMalloc+0x184>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <pvPortMalloc+0x194>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	4a11      	ldr	r2, [pc, #68]	; (8008d2c <pvPortMalloc+0x194>)
 8008ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ce8:	f7fe fcf8 	bl	80076dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <pvPortMalloc+0x174>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60fb      	str	r3, [r7, #12]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <pvPortMalloc+0x172>
	return pvReturn;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3728      	adds	r7, #40	; 0x28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200099b0 	.word	0x200099b0
 8008d1c:	200099c4 	.word	0x200099c4
 8008d20:	200099b4 	.word	0x200099b4
 8008d24:	200099a8 	.word	0x200099a8
 8008d28:	200099b8 	.word	0x200099b8
 8008d2c:	200099bc 	.word	0x200099bc

08008d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d04d      	beq.n	8008dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d42:	2308      	movs	r3, #8
 8008d44:	425b      	negs	r3, r3
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4413      	add	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <vPortFree+0xb8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <vPortFree+0x44>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60fb      	str	r3, [r7, #12]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <vPortFree+0x62>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	60bb      	str	r3, [r7, #8]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <vPortFree+0xb8>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01e      	beq.n	8008dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11a      	bne.n	8008dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <vPortFree+0xb8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	43db      	mvns	r3, r3
 8008db2:	401a      	ands	r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008db8:	f7fe fc82 	bl	80076c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <vPortFree+0xbc>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <vPortFree+0xbc>)
 8008dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dca:	6938      	ldr	r0, [r7, #16]
 8008dcc:	f000 f874 	bl	8008eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <vPortFree+0xc0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	4a06      	ldr	r2, [pc, #24]	; (8008df0 <vPortFree+0xc0>)
 8008dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008dda:	f7fe fc7f 	bl	80076dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dde:	bf00      	nop
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	200099c4 	.word	0x200099c4
 8008dec:	200099b4 	.word	0x200099b4
 8008df0:	200099c0 	.word	0x200099c0

08008df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <prvHeapInit+0xac>)
 8008e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00c      	beq.n	8008e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3307      	adds	r3, #7
 8008e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0307 	bic.w	r3, r3, #7
 8008e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	4a1f      	ldr	r2, [pc, #124]	; (8008ea0 <prvHeapInit+0xac>)
 8008e24:	4413      	add	r3, r2
 8008e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <prvHeapInit+0xb0>)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e32:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <prvHeapInit+0xb0>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e40:	2208      	movs	r2, #8
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0307 	bic.w	r3, r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <prvHeapInit+0xb4>)
 8008e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <prvHeapInit+0xb4>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e5e:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <prvHeapInit+0xb4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <prvHeapInit+0xb4>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4a0a      	ldr	r2, [pc, #40]	; (8008eac <prvHeapInit+0xb8>)
 8008e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4a09      	ldr	r2, [pc, #36]	; (8008eb0 <prvHeapInit+0xbc>)
 8008e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e8c:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <prvHeapInit+0xc0>)
 8008e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	bf00      	nop
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	200019a8 	.word	0x200019a8
 8008ea4:	200099a8 	.word	0x200099a8
 8008ea8:	200099b0 	.word	0x200099b0
 8008eac:	200099b8 	.word	0x200099b8
 8008eb0:	200099b4 	.word	0x200099b4
 8008eb4:	200099c4 	.word	0x200099c4

08008eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ec0:	4b28      	ldr	r3, [pc, #160]	; (8008f64 <prvInsertBlockIntoFreeList+0xac>)
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	e002      	b.n	8008ecc <prvInsertBlockIntoFreeList+0x14>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d8f7      	bhi.n	8008ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d108      	bne.n	8008efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	441a      	add	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d118      	bne.n	8008f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b15      	ldr	r3, [pc, #84]	; (8008f68 <prvInsertBlockIntoFreeList+0xb0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d00d      	beq.n	8008f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	441a      	add	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	e008      	b.n	8008f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <prvInsertBlockIntoFreeList+0xb0>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e003      	b.n	8008f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d002      	beq.n	8008f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200099a8 	.word	0x200099a8
 8008f68:	200099b0 	.word	0x200099b0

08008f6c <__errno>:
 8008f6c:	4b01      	ldr	r3, [pc, #4]	; (8008f74 <__errno+0x8>)
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000028 	.word	0x20000028

08008f78 <std>:
 8008f78:	2300      	movs	r3, #0
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f86:	6083      	str	r3, [r0, #8]
 8008f88:	8181      	strh	r1, [r0, #12]
 8008f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f8c:	81c2      	strh	r2, [r0, #14]
 8008f8e:	6183      	str	r3, [r0, #24]
 8008f90:	4619      	mov	r1, r3
 8008f92:	2208      	movs	r2, #8
 8008f94:	305c      	adds	r0, #92	; 0x5c
 8008f96:	f000 f91a 	bl	80091ce <memset>
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <std+0x38>)
 8008f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <std+0x3c>)
 8008fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fa2:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <std+0x40>)
 8008fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <std+0x44>)
 8008fa8:	6224      	str	r4, [r4, #32]
 8008faa:	6323      	str	r3, [r4, #48]	; 0x30
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	bf00      	nop
 8008fb0:	080095b1 	.word	0x080095b1
 8008fb4:	080095d3 	.word	0x080095d3
 8008fb8:	0800960b 	.word	0x0800960b
 8008fbc:	0800962f 	.word	0x0800962f

08008fc0 <_cleanup_r>:
 8008fc0:	4901      	ldr	r1, [pc, #4]	; (8008fc8 <_cleanup_r+0x8>)
 8008fc2:	f000 b8af 	b.w	8009124 <_fwalk_reent>
 8008fc6:	bf00      	nop
 8008fc8:	08009931 	.word	0x08009931

08008fcc <__sfmoreglue>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	2268      	movs	r2, #104	; 0x68
 8008fd0:	1e4d      	subs	r5, r1, #1
 8008fd2:	4355      	muls	r5, r2
 8008fd4:	460e      	mov	r6, r1
 8008fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008fda:	f000 f96d 	bl	80092b8 <_malloc_r>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	b140      	cbz	r0, 8008ff4 <__sfmoreglue+0x28>
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8008fe8:	300c      	adds	r0, #12
 8008fea:	60a0      	str	r0, [r4, #8]
 8008fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ff0:	f000 f8ed 	bl	80091ce <memset>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}

08008ff8 <__sfp_lock_acquire>:
 8008ff8:	4801      	ldr	r0, [pc, #4]	; (8009000 <__sfp_lock_acquire+0x8>)
 8008ffa:	f000 b8d8 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8008ffe:	bf00      	nop
 8009000:	200099c9 	.word	0x200099c9

08009004 <__sfp_lock_release>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__sfp_lock_release+0x8>)
 8009006:	f000 b8d3 	b.w	80091b0 <__retarget_lock_release_recursive>
 800900a:	bf00      	nop
 800900c:	200099c9 	.word	0x200099c9

08009010 <__sinit_lock_acquire>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__sinit_lock_acquire+0x8>)
 8009012:	f000 b8cc 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8009016:	bf00      	nop
 8009018:	200099ca 	.word	0x200099ca

0800901c <__sinit_lock_release>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__sinit_lock_release+0x8>)
 800901e:	f000 b8c7 	b.w	80091b0 <__retarget_lock_release_recursive>
 8009022:	bf00      	nop
 8009024:	200099ca 	.word	0x200099ca

08009028 <__sinit>:
 8009028:	b510      	push	{r4, lr}
 800902a:	4604      	mov	r4, r0
 800902c:	f7ff fff0 	bl	8009010 <__sinit_lock_acquire>
 8009030:	69a3      	ldr	r3, [r4, #24]
 8009032:	b11b      	cbz	r3, 800903c <__sinit+0x14>
 8009034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009038:	f7ff bff0 	b.w	800901c <__sinit_lock_release>
 800903c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009040:	6523      	str	r3, [r4, #80]	; 0x50
 8009042:	4b13      	ldr	r3, [pc, #76]	; (8009090 <__sinit+0x68>)
 8009044:	4a13      	ldr	r2, [pc, #76]	; (8009094 <__sinit+0x6c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	62a2      	str	r2, [r4, #40]	; 0x28
 800904a:	42a3      	cmp	r3, r4
 800904c:	bf04      	itt	eq
 800904e:	2301      	moveq	r3, #1
 8009050:	61a3      	streq	r3, [r4, #24]
 8009052:	4620      	mov	r0, r4
 8009054:	f000 f820 	bl	8009098 <__sfp>
 8009058:	6060      	str	r0, [r4, #4]
 800905a:	4620      	mov	r0, r4
 800905c:	f000 f81c 	bl	8009098 <__sfp>
 8009060:	60a0      	str	r0, [r4, #8]
 8009062:	4620      	mov	r0, r4
 8009064:	f000 f818 	bl	8009098 <__sfp>
 8009068:	2200      	movs	r2, #0
 800906a:	60e0      	str	r0, [r4, #12]
 800906c:	2104      	movs	r1, #4
 800906e:	6860      	ldr	r0, [r4, #4]
 8009070:	f7ff ff82 	bl	8008f78 <std>
 8009074:	68a0      	ldr	r0, [r4, #8]
 8009076:	2201      	movs	r2, #1
 8009078:	2109      	movs	r1, #9
 800907a:	f7ff ff7d 	bl	8008f78 <std>
 800907e:	68e0      	ldr	r0, [r4, #12]
 8009080:	2202      	movs	r2, #2
 8009082:	2112      	movs	r1, #18
 8009084:	f7ff ff78 	bl	8008f78 <std>
 8009088:	2301      	movs	r3, #1
 800908a:	61a3      	str	r3, [r4, #24]
 800908c:	e7d2      	b.n	8009034 <__sinit+0xc>
 800908e:	bf00      	nop
 8009090:	0800a448 	.word	0x0800a448
 8009094:	08008fc1 	.word	0x08008fc1

08009098 <__sfp>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	4607      	mov	r7, r0
 800909c:	f7ff ffac 	bl	8008ff8 <__sfp_lock_acquire>
 80090a0:	4b1e      	ldr	r3, [pc, #120]	; (800911c <__sfp+0x84>)
 80090a2:	681e      	ldr	r6, [r3, #0]
 80090a4:	69b3      	ldr	r3, [r6, #24]
 80090a6:	b913      	cbnz	r3, 80090ae <__sfp+0x16>
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff ffbd 	bl	8009028 <__sinit>
 80090ae:	3648      	adds	r6, #72	; 0x48
 80090b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	d503      	bpl.n	80090c0 <__sfp+0x28>
 80090b8:	6833      	ldr	r3, [r6, #0]
 80090ba:	b30b      	cbz	r3, 8009100 <__sfp+0x68>
 80090bc:	6836      	ldr	r6, [r6, #0]
 80090be:	e7f7      	b.n	80090b0 <__sfp+0x18>
 80090c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090c4:	b9d5      	cbnz	r5, 80090fc <__sfp+0x64>
 80090c6:	4b16      	ldr	r3, [pc, #88]	; (8009120 <__sfp+0x88>)
 80090c8:	60e3      	str	r3, [r4, #12]
 80090ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090ce:	6665      	str	r5, [r4, #100]	; 0x64
 80090d0:	f000 f86c 	bl	80091ac <__retarget_lock_init_recursive>
 80090d4:	f7ff ff96 	bl	8009004 <__sfp_lock_release>
 80090d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090e0:	6025      	str	r5, [r4, #0]
 80090e2:	61a5      	str	r5, [r4, #24]
 80090e4:	2208      	movs	r2, #8
 80090e6:	4629      	mov	r1, r5
 80090e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090ec:	f000 f86f 	bl	80091ce <memset>
 80090f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090f8:	4620      	mov	r0, r4
 80090fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090fc:	3468      	adds	r4, #104	; 0x68
 80090fe:	e7d9      	b.n	80090b4 <__sfp+0x1c>
 8009100:	2104      	movs	r1, #4
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ff62 	bl	8008fcc <__sfmoreglue>
 8009108:	4604      	mov	r4, r0
 800910a:	6030      	str	r0, [r6, #0]
 800910c:	2800      	cmp	r0, #0
 800910e:	d1d5      	bne.n	80090bc <__sfp+0x24>
 8009110:	f7ff ff78 	bl	8009004 <__sfp_lock_release>
 8009114:	230c      	movs	r3, #12
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	e7ee      	b.n	80090f8 <__sfp+0x60>
 800911a:	bf00      	nop
 800911c:	0800a448 	.word	0x0800a448
 8009120:	ffff0001 	.word	0xffff0001

08009124 <_fwalk_reent>:
 8009124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009128:	4606      	mov	r6, r0
 800912a:	4688      	mov	r8, r1
 800912c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009130:	2700      	movs	r7, #0
 8009132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009136:	f1b9 0901 	subs.w	r9, r9, #1
 800913a:	d505      	bpl.n	8009148 <_fwalk_reent+0x24>
 800913c:	6824      	ldr	r4, [r4, #0]
 800913e:	2c00      	cmp	r4, #0
 8009140:	d1f7      	bne.n	8009132 <_fwalk_reent+0xe>
 8009142:	4638      	mov	r0, r7
 8009144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009148:	89ab      	ldrh	r3, [r5, #12]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d907      	bls.n	800915e <_fwalk_reent+0x3a>
 800914e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009152:	3301      	adds	r3, #1
 8009154:	d003      	beq.n	800915e <_fwalk_reent+0x3a>
 8009156:	4629      	mov	r1, r5
 8009158:	4630      	mov	r0, r6
 800915a:	47c0      	blx	r8
 800915c:	4307      	orrs	r7, r0
 800915e:	3568      	adds	r5, #104	; 0x68
 8009160:	e7e9      	b.n	8009136 <_fwalk_reent+0x12>
	...

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	; (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	; (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	; (80091a8 <__libc_init_array+0x44>)
 8009178:	f000 ffbc 	bl	800a0f4 <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	0800a488 	.word	0x0800a488
 80091a0:	0800a488 	.word	0x0800a488
 80091a4:	0800a488 	.word	0x0800a488
 80091a8:	0800a48c 	.word	0x0800a48c

080091ac <__retarget_lock_init_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__retarget_lock_acquire_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <__retarget_lock_release_recursive>:
 80091b0:	4770      	bx	lr

080091b2 <memcpy>:
 80091b2:	440a      	add	r2, r1
 80091b4:	4291      	cmp	r1, r2
 80091b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ba:	d100      	bne.n	80091be <memcpy+0xc>
 80091bc:	4770      	bx	lr
 80091be:	b510      	push	{r4, lr}
 80091c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c8:	4291      	cmp	r1, r2
 80091ca:	d1f9      	bne.n	80091c0 <memcpy+0xe>
 80091cc:	bd10      	pop	{r4, pc}

080091ce <memset>:
 80091ce:	4402      	add	r2, r0
 80091d0:	4603      	mov	r3, r0
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d100      	bne.n	80091d8 <memset+0xa>
 80091d6:	4770      	bx	lr
 80091d8:	f803 1b01 	strb.w	r1, [r3], #1
 80091dc:	e7f9      	b.n	80091d2 <memset+0x4>
	...

080091e0 <_free_r>:
 80091e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091e2:	2900      	cmp	r1, #0
 80091e4:	d044      	beq.n	8009270 <_free_r+0x90>
 80091e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ea:	9001      	str	r0, [sp, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f1a1 0404 	sub.w	r4, r1, #4
 80091f2:	bfb8      	it	lt
 80091f4:	18e4      	addlt	r4, r4, r3
 80091f6:	f000 fc4f 	bl	8009a98 <__malloc_lock>
 80091fa:	4a1e      	ldr	r2, [pc, #120]	; (8009274 <_free_r+0x94>)
 80091fc:	9801      	ldr	r0, [sp, #4]
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	b933      	cbnz	r3, 8009210 <_free_r+0x30>
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	6014      	str	r4, [r2, #0]
 8009206:	b003      	add	sp, #12
 8009208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800920c:	f000 bc4a 	b.w	8009aa4 <__malloc_unlock>
 8009210:	42a3      	cmp	r3, r4
 8009212:	d908      	bls.n	8009226 <_free_r+0x46>
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	1961      	adds	r1, r4, r5
 8009218:	428b      	cmp	r3, r1
 800921a:	bf01      	itttt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	1949      	addeq	r1, r1, r5
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	e7ed      	b.n	8009202 <_free_r+0x22>
 8009226:	461a      	mov	r2, r3
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	b10b      	cbz	r3, 8009230 <_free_r+0x50>
 800922c:	42a3      	cmp	r3, r4
 800922e:	d9fa      	bls.n	8009226 <_free_r+0x46>
 8009230:	6811      	ldr	r1, [r2, #0]
 8009232:	1855      	adds	r5, r2, r1
 8009234:	42a5      	cmp	r5, r4
 8009236:	d10b      	bne.n	8009250 <_free_r+0x70>
 8009238:	6824      	ldr	r4, [r4, #0]
 800923a:	4421      	add	r1, r4
 800923c:	1854      	adds	r4, r2, r1
 800923e:	42a3      	cmp	r3, r4
 8009240:	6011      	str	r1, [r2, #0]
 8009242:	d1e0      	bne.n	8009206 <_free_r+0x26>
 8009244:	681c      	ldr	r4, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	6053      	str	r3, [r2, #4]
 800924a:	4421      	add	r1, r4
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	e7da      	b.n	8009206 <_free_r+0x26>
 8009250:	d902      	bls.n	8009258 <_free_r+0x78>
 8009252:	230c      	movs	r3, #12
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	e7d6      	b.n	8009206 <_free_r+0x26>
 8009258:	6825      	ldr	r5, [r4, #0]
 800925a:	1961      	adds	r1, r4, r5
 800925c:	428b      	cmp	r3, r1
 800925e:	bf04      	itt	eq
 8009260:	6819      	ldreq	r1, [r3, #0]
 8009262:	685b      	ldreq	r3, [r3, #4]
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	bf04      	itt	eq
 8009268:	1949      	addeq	r1, r1, r5
 800926a:	6021      	streq	r1, [r4, #0]
 800926c:	6054      	str	r4, [r2, #4]
 800926e:	e7ca      	b.n	8009206 <_free_r+0x26>
 8009270:	b003      	add	sp, #12
 8009272:	bd30      	pop	{r4, r5, pc}
 8009274:	200099cc 	.word	0x200099cc

08009278 <sbrk_aligned>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	4e0e      	ldr	r6, [pc, #56]	; (80092b4 <sbrk_aligned+0x3c>)
 800927c:	460c      	mov	r4, r1
 800927e:	6831      	ldr	r1, [r6, #0]
 8009280:	4605      	mov	r5, r0
 8009282:	b911      	cbnz	r1, 800928a <sbrk_aligned+0x12>
 8009284:	f000 f984 	bl	8009590 <_sbrk_r>
 8009288:	6030      	str	r0, [r6, #0]
 800928a:	4621      	mov	r1, r4
 800928c:	4628      	mov	r0, r5
 800928e:	f000 f97f 	bl	8009590 <_sbrk_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d00a      	beq.n	80092ac <sbrk_aligned+0x34>
 8009296:	1cc4      	adds	r4, r0, #3
 8009298:	f024 0403 	bic.w	r4, r4, #3
 800929c:	42a0      	cmp	r0, r4
 800929e:	d007      	beq.n	80092b0 <sbrk_aligned+0x38>
 80092a0:	1a21      	subs	r1, r4, r0
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 f974 	bl	8009590 <_sbrk_r>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d101      	bne.n	80092b0 <sbrk_aligned+0x38>
 80092ac:	f04f 34ff 	mov.w	r4, #4294967295
 80092b0:	4620      	mov	r0, r4
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	200099d0 	.word	0x200099d0

080092b8 <_malloc_r>:
 80092b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092bc:	1ccd      	adds	r5, r1, #3
 80092be:	f025 0503 	bic.w	r5, r5, #3
 80092c2:	3508      	adds	r5, #8
 80092c4:	2d0c      	cmp	r5, #12
 80092c6:	bf38      	it	cc
 80092c8:	250c      	movcc	r5, #12
 80092ca:	2d00      	cmp	r5, #0
 80092cc:	4607      	mov	r7, r0
 80092ce:	db01      	blt.n	80092d4 <_malloc_r+0x1c>
 80092d0:	42a9      	cmp	r1, r5
 80092d2:	d905      	bls.n	80092e0 <_malloc_r+0x28>
 80092d4:	230c      	movs	r3, #12
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	2600      	movs	r6, #0
 80092da:	4630      	mov	r0, r6
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	4e2e      	ldr	r6, [pc, #184]	; (800939c <_malloc_r+0xe4>)
 80092e2:	f000 fbd9 	bl	8009a98 <__malloc_lock>
 80092e6:	6833      	ldr	r3, [r6, #0]
 80092e8:	461c      	mov	r4, r3
 80092ea:	bb34      	cbnz	r4, 800933a <_malloc_r+0x82>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff ffc2 	bl	8009278 <sbrk_aligned>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	4604      	mov	r4, r0
 80092f8:	d14d      	bne.n	8009396 <_malloc_r+0xde>
 80092fa:	6834      	ldr	r4, [r6, #0]
 80092fc:	4626      	mov	r6, r4
 80092fe:	2e00      	cmp	r6, #0
 8009300:	d140      	bne.n	8009384 <_malloc_r+0xcc>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	4631      	mov	r1, r6
 8009306:	4638      	mov	r0, r7
 8009308:	eb04 0803 	add.w	r8, r4, r3
 800930c:	f000 f940 	bl	8009590 <_sbrk_r>
 8009310:	4580      	cmp	r8, r0
 8009312:	d13a      	bne.n	800938a <_malloc_r+0xd2>
 8009314:	6821      	ldr	r1, [r4, #0]
 8009316:	3503      	adds	r5, #3
 8009318:	1a6d      	subs	r5, r5, r1
 800931a:	f025 0503 	bic.w	r5, r5, #3
 800931e:	3508      	adds	r5, #8
 8009320:	2d0c      	cmp	r5, #12
 8009322:	bf38      	it	cc
 8009324:	250c      	movcc	r5, #12
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ffa5 	bl	8009278 <sbrk_aligned>
 800932e:	3001      	adds	r0, #1
 8009330:	d02b      	beq.n	800938a <_malloc_r+0xd2>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	442b      	add	r3, r5
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	e00e      	b.n	8009358 <_malloc_r+0xa0>
 800933a:	6822      	ldr	r2, [r4, #0]
 800933c:	1b52      	subs	r2, r2, r5
 800933e:	d41e      	bmi.n	800937e <_malloc_r+0xc6>
 8009340:	2a0b      	cmp	r2, #11
 8009342:	d916      	bls.n	8009372 <_malloc_r+0xba>
 8009344:	1961      	adds	r1, r4, r5
 8009346:	42a3      	cmp	r3, r4
 8009348:	6025      	str	r5, [r4, #0]
 800934a:	bf18      	it	ne
 800934c:	6059      	strne	r1, [r3, #4]
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	bf08      	it	eq
 8009352:	6031      	streq	r1, [r6, #0]
 8009354:	5162      	str	r2, [r4, r5]
 8009356:	604b      	str	r3, [r1, #4]
 8009358:	4638      	mov	r0, r7
 800935a:	f104 060b 	add.w	r6, r4, #11
 800935e:	f000 fba1 	bl	8009aa4 <__malloc_unlock>
 8009362:	f026 0607 	bic.w	r6, r6, #7
 8009366:	1d23      	adds	r3, r4, #4
 8009368:	1af2      	subs	r2, r6, r3
 800936a:	d0b6      	beq.n	80092da <_malloc_r+0x22>
 800936c:	1b9b      	subs	r3, r3, r6
 800936e:	50a3      	str	r3, [r4, r2]
 8009370:	e7b3      	b.n	80092da <_malloc_r+0x22>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	42a3      	cmp	r3, r4
 8009376:	bf0c      	ite	eq
 8009378:	6032      	streq	r2, [r6, #0]
 800937a:	605a      	strne	r2, [r3, #4]
 800937c:	e7ec      	b.n	8009358 <_malloc_r+0xa0>
 800937e:	4623      	mov	r3, r4
 8009380:	6864      	ldr	r4, [r4, #4]
 8009382:	e7b2      	b.n	80092ea <_malloc_r+0x32>
 8009384:	4634      	mov	r4, r6
 8009386:	6876      	ldr	r6, [r6, #4]
 8009388:	e7b9      	b.n	80092fe <_malloc_r+0x46>
 800938a:	230c      	movs	r3, #12
 800938c:	603b      	str	r3, [r7, #0]
 800938e:	4638      	mov	r0, r7
 8009390:	f000 fb88 	bl	8009aa4 <__malloc_unlock>
 8009394:	e7a1      	b.n	80092da <_malloc_r+0x22>
 8009396:	6025      	str	r5, [r4, #0]
 8009398:	e7de      	b.n	8009358 <_malloc_r+0xa0>
 800939a:	bf00      	nop
 800939c:	200099cc 	.word	0x200099cc

080093a0 <iprintf>:
 80093a0:	b40f      	push	{r0, r1, r2, r3}
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <iprintf+0x2c>)
 80093a4:	b513      	push	{r0, r1, r4, lr}
 80093a6:	681c      	ldr	r4, [r3, #0]
 80093a8:	b124      	cbz	r4, 80093b4 <iprintf+0x14>
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	b913      	cbnz	r3, 80093b4 <iprintf+0x14>
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fe3a 	bl	8009028 <__sinit>
 80093b4:	ab05      	add	r3, sp, #20
 80093b6:	9a04      	ldr	r2, [sp, #16]
 80093b8:	68a1      	ldr	r1, [r4, #8]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4620      	mov	r0, r4
 80093be:	f000 fba1 	bl	8009b04 <_vfiprintf_r>
 80093c2:	b002      	add	sp, #8
 80093c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c8:	b004      	add	sp, #16
 80093ca:	4770      	bx	lr
 80093cc:	20000028 	.word	0x20000028

080093d0 <_puts_r>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	4605      	mov	r5, r0
 80093d6:	b118      	cbz	r0, 80093e0 <_puts_r+0x10>
 80093d8:	6983      	ldr	r3, [r0, #24]
 80093da:	b90b      	cbnz	r3, 80093e0 <_puts_r+0x10>
 80093dc:	f7ff fe24 	bl	8009028 <__sinit>
 80093e0:	69ab      	ldr	r3, [r5, #24]
 80093e2:	68ac      	ldr	r4, [r5, #8]
 80093e4:	b913      	cbnz	r3, 80093ec <_puts_r+0x1c>
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7ff fe1e 	bl	8009028 <__sinit>
 80093ec:	4b2c      	ldr	r3, [pc, #176]	; (80094a0 <_puts_r+0xd0>)
 80093ee:	429c      	cmp	r4, r3
 80093f0:	d120      	bne.n	8009434 <_puts_r+0x64>
 80093f2:	686c      	ldr	r4, [r5, #4]
 80093f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f6:	07db      	lsls	r3, r3, #31
 80093f8:	d405      	bmi.n	8009406 <_puts_r+0x36>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	0598      	lsls	r0, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_puts_r+0x36>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f7ff fed4 	bl	80091ae <__retarget_lock_acquire_recursive>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d51d      	bpl.n	8009448 <_puts_r+0x78>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	b1db      	cbz	r3, 8009448 <_puts_r+0x78>
 8009410:	3e01      	subs	r6, #1
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009418:	3b01      	subs	r3, #1
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	bb39      	cbnz	r1, 800946e <_puts_r+0x9e>
 800941e:	2b00      	cmp	r3, #0
 8009420:	da38      	bge.n	8009494 <_puts_r+0xc4>
 8009422:	4622      	mov	r2, r4
 8009424:	210a      	movs	r1, #10
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f91a 	bl	8009660 <__swbuf_r>
 800942c:	3001      	adds	r0, #1
 800942e:	d011      	beq.n	8009454 <_puts_r+0x84>
 8009430:	250a      	movs	r5, #10
 8009432:	e011      	b.n	8009458 <_puts_r+0x88>
 8009434:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <_puts_r+0xd4>)
 8009436:	429c      	cmp	r4, r3
 8009438:	d101      	bne.n	800943e <_puts_r+0x6e>
 800943a:	68ac      	ldr	r4, [r5, #8]
 800943c:	e7da      	b.n	80093f4 <_puts_r+0x24>
 800943e:	4b1a      	ldr	r3, [pc, #104]	; (80094a8 <_puts_r+0xd8>)
 8009440:	429c      	cmp	r4, r3
 8009442:	bf08      	it	eq
 8009444:	68ec      	ldreq	r4, [r5, #12]
 8009446:	e7d5      	b.n	80093f4 <_puts_r+0x24>
 8009448:	4621      	mov	r1, r4
 800944a:	4628      	mov	r0, r5
 800944c:	f000 f96c 	bl	8009728 <__swsetup_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	d0dd      	beq.n	8009410 <_puts_r+0x40>
 8009454:	f04f 35ff 	mov.w	r5, #4294967295
 8009458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d405      	bmi.n	800946a <_puts_r+0x9a>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	059b      	lsls	r3, r3, #22
 8009462:	d402      	bmi.n	800946a <_puts_r+0x9a>
 8009464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009466:	f7ff fea3 	bl	80091b0 <__retarget_lock_release_recursive>
 800946a:	4628      	mov	r0, r5
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	2b00      	cmp	r3, #0
 8009470:	da04      	bge.n	800947c <_puts_r+0xac>
 8009472:	69a2      	ldr	r2, [r4, #24]
 8009474:	429a      	cmp	r2, r3
 8009476:	dc06      	bgt.n	8009486 <_puts_r+0xb6>
 8009478:	290a      	cmp	r1, #10
 800947a:	d004      	beq.n	8009486 <_puts_r+0xb6>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	7019      	strb	r1, [r3, #0]
 8009484:	e7c5      	b.n	8009412 <_puts_r+0x42>
 8009486:	4622      	mov	r2, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f8e9 	bl	8009660 <__swbuf_r>
 800948e:	3001      	adds	r0, #1
 8009490:	d1bf      	bne.n	8009412 <_puts_r+0x42>
 8009492:	e7df      	b.n	8009454 <_puts_r+0x84>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	250a      	movs	r5, #10
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	6022      	str	r2, [r4, #0]
 800949c:	701d      	strb	r5, [r3, #0]
 800949e:	e7db      	b.n	8009458 <_puts_r+0x88>
 80094a0:	0800a408 	.word	0x0800a408
 80094a4:	0800a428 	.word	0x0800a428
 80094a8:	0800a3e8 	.word	0x0800a3e8

080094ac <puts>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <puts+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bf8d 	b.w	80093d0 <_puts_r>
 80094b6:	bf00      	nop
 80094b8:	20000028 	.word	0x20000028

080094bc <cleanup_glue>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	460c      	mov	r4, r1
 80094c0:	6809      	ldr	r1, [r1, #0]
 80094c2:	4605      	mov	r5, r0
 80094c4:	b109      	cbz	r1, 80094ca <cleanup_glue+0xe>
 80094c6:	f7ff fff9 	bl	80094bc <cleanup_glue>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f7ff be85 	b.w	80091e0 <_free_r>
	...

080094d8 <_reclaim_reent>:
 80094d8:	4b2c      	ldr	r3, [pc, #176]	; (800958c <_reclaim_reent+0xb4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4283      	cmp	r3, r0
 80094de:	b570      	push	{r4, r5, r6, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	d051      	beq.n	8009588 <_reclaim_reent+0xb0>
 80094e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094e6:	b143      	cbz	r3, 80094fa <_reclaim_reent+0x22>
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d14a      	bne.n	8009584 <_reclaim_reent+0xac>
 80094ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f0:	6819      	ldr	r1, [r3, #0]
 80094f2:	b111      	cbz	r1, 80094fa <_reclaim_reent+0x22>
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7ff fe73 	bl	80091e0 <_free_r>
 80094fa:	6961      	ldr	r1, [r4, #20]
 80094fc:	b111      	cbz	r1, 8009504 <_reclaim_reent+0x2c>
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff fe6e 	bl	80091e0 <_free_r>
 8009504:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009506:	b111      	cbz	r1, 800950e <_reclaim_reent+0x36>
 8009508:	4620      	mov	r0, r4
 800950a:	f7ff fe69 	bl	80091e0 <_free_r>
 800950e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009510:	b111      	cbz	r1, 8009518 <_reclaim_reent+0x40>
 8009512:	4620      	mov	r0, r4
 8009514:	f7ff fe64 	bl	80091e0 <_free_r>
 8009518:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800951a:	b111      	cbz	r1, 8009522 <_reclaim_reent+0x4a>
 800951c:	4620      	mov	r0, r4
 800951e:	f7ff fe5f 	bl	80091e0 <_free_r>
 8009522:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009524:	b111      	cbz	r1, 800952c <_reclaim_reent+0x54>
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff fe5a 	bl	80091e0 <_free_r>
 800952c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800952e:	b111      	cbz	r1, 8009536 <_reclaim_reent+0x5e>
 8009530:	4620      	mov	r0, r4
 8009532:	f7ff fe55 	bl	80091e0 <_free_r>
 8009536:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009538:	b111      	cbz	r1, 8009540 <_reclaim_reent+0x68>
 800953a:	4620      	mov	r0, r4
 800953c:	f7ff fe50 	bl	80091e0 <_free_r>
 8009540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009542:	b111      	cbz	r1, 800954a <_reclaim_reent+0x72>
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fe4b 	bl	80091e0 <_free_r>
 800954a:	69a3      	ldr	r3, [r4, #24]
 800954c:	b1e3      	cbz	r3, 8009588 <_reclaim_reent+0xb0>
 800954e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009550:	4620      	mov	r0, r4
 8009552:	4798      	blx	r3
 8009554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009556:	b1b9      	cbz	r1, 8009588 <_reclaim_reent+0xb0>
 8009558:	4620      	mov	r0, r4
 800955a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800955e:	f7ff bfad 	b.w	80094bc <cleanup_glue>
 8009562:	5949      	ldr	r1, [r1, r5]
 8009564:	b941      	cbnz	r1, 8009578 <_reclaim_reent+0xa0>
 8009566:	3504      	adds	r5, #4
 8009568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800956a:	2d80      	cmp	r5, #128	; 0x80
 800956c:	68d9      	ldr	r1, [r3, #12]
 800956e:	d1f8      	bne.n	8009562 <_reclaim_reent+0x8a>
 8009570:	4620      	mov	r0, r4
 8009572:	f7ff fe35 	bl	80091e0 <_free_r>
 8009576:	e7ba      	b.n	80094ee <_reclaim_reent+0x16>
 8009578:	680e      	ldr	r6, [r1, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff fe30 	bl	80091e0 <_free_r>
 8009580:	4631      	mov	r1, r6
 8009582:	e7ef      	b.n	8009564 <_reclaim_reent+0x8c>
 8009584:	2500      	movs	r5, #0
 8009586:	e7ef      	b.n	8009568 <_reclaim_reent+0x90>
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	bf00      	nop
 800958c:	20000028 	.word	0x20000028

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f8 ff72 	bl	8002484 <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	200099d4 	.word	0x200099d4

080095b0 <__sread>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	f000 fd68 	bl	800a08c <_read_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	bfab      	itete	ge
 80095c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095c2:	89a3      	ldrhlt	r3, [r4, #12]
 80095c4:	181b      	addge	r3, r3, r0
 80095c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ca:	bfac      	ite	ge
 80095cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ce:	81a3      	strhlt	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__swrite>:
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	461f      	mov	r7, r3
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	4616      	mov	r6, r2
 80095e2:	d505      	bpl.n	80095f0 <__swrite+0x1e>
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2302      	movs	r3, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f000 f9dc 	bl	80099a8 <_lseek_r>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	4632      	mov	r2, r6
 80095fe:	463b      	mov	r3, r7
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	f000 b87d 	b.w	8009704 <_write_r>

0800960a <__sseek>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f000 f9c9 	bl	80099a8 <_lseek_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	bf15      	itete	ne
 800961c:	6560      	strne	r0, [r4, #84]	; 0x54
 800961e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009626:	81a3      	strheq	r3, [r4, #12]
 8009628:	bf18      	it	ne
 800962a:	81a3      	strhne	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__sclose>:
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 b8e7 	b.w	8009804 <_close_r>

08009636 <strncmp>:
 8009636:	b510      	push	{r4, lr}
 8009638:	b17a      	cbz	r2, 800965a <strncmp+0x24>
 800963a:	4603      	mov	r3, r0
 800963c:	3901      	subs	r1, #1
 800963e:	1884      	adds	r4, r0, r2
 8009640:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009644:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009648:	4290      	cmp	r0, r2
 800964a:	d101      	bne.n	8009650 <strncmp+0x1a>
 800964c:	42a3      	cmp	r3, r4
 800964e:	d101      	bne.n	8009654 <strncmp+0x1e>
 8009650:	1a80      	subs	r0, r0, r2
 8009652:	bd10      	pop	{r4, pc}
 8009654:	2800      	cmp	r0, #0
 8009656:	d1f3      	bne.n	8009640 <strncmp+0xa>
 8009658:	e7fa      	b.n	8009650 <strncmp+0x1a>
 800965a:	4610      	mov	r0, r2
 800965c:	e7f9      	b.n	8009652 <strncmp+0x1c>
	...

08009660 <__swbuf_r>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	460e      	mov	r6, r1
 8009664:	4614      	mov	r4, r2
 8009666:	4605      	mov	r5, r0
 8009668:	b118      	cbz	r0, 8009672 <__swbuf_r+0x12>
 800966a:	6983      	ldr	r3, [r0, #24]
 800966c:	b90b      	cbnz	r3, 8009672 <__swbuf_r+0x12>
 800966e:	f7ff fcdb 	bl	8009028 <__sinit>
 8009672:	4b21      	ldr	r3, [pc, #132]	; (80096f8 <__swbuf_r+0x98>)
 8009674:	429c      	cmp	r4, r3
 8009676:	d12b      	bne.n	80096d0 <__swbuf_r+0x70>
 8009678:	686c      	ldr	r4, [r5, #4]
 800967a:	69a3      	ldr	r3, [r4, #24]
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	071a      	lsls	r2, r3, #28
 8009682:	d52f      	bpl.n	80096e4 <__swbuf_r+0x84>
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	b36b      	cbz	r3, 80096e4 <__swbuf_r+0x84>
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	1ac0      	subs	r0, r0, r3
 800968e:	6963      	ldr	r3, [r4, #20]
 8009690:	b2f6      	uxtb	r6, r6
 8009692:	4283      	cmp	r3, r0
 8009694:	4637      	mov	r7, r6
 8009696:	dc04      	bgt.n	80096a2 <__swbuf_r+0x42>
 8009698:	4621      	mov	r1, r4
 800969a:	4628      	mov	r0, r5
 800969c:	f000 f948 	bl	8009930 <_fflush_r>
 80096a0:	bb30      	cbnz	r0, 80096f0 <__swbuf_r+0x90>
 80096a2:	68a3      	ldr	r3, [r4, #8]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	60a3      	str	r3, [r4, #8]
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	6022      	str	r2, [r4, #0]
 80096ae:	701e      	strb	r6, [r3, #0]
 80096b0:	6963      	ldr	r3, [r4, #20]
 80096b2:	3001      	adds	r0, #1
 80096b4:	4283      	cmp	r3, r0
 80096b6:	d004      	beq.n	80096c2 <__swbuf_r+0x62>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	07db      	lsls	r3, r3, #31
 80096bc:	d506      	bpl.n	80096cc <__swbuf_r+0x6c>
 80096be:	2e0a      	cmp	r6, #10
 80096c0:	d104      	bne.n	80096cc <__swbuf_r+0x6c>
 80096c2:	4621      	mov	r1, r4
 80096c4:	4628      	mov	r0, r5
 80096c6:	f000 f933 	bl	8009930 <_fflush_r>
 80096ca:	b988      	cbnz	r0, 80096f0 <__swbuf_r+0x90>
 80096cc:	4638      	mov	r0, r7
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <__swbuf_r+0x9c>)
 80096d2:	429c      	cmp	r4, r3
 80096d4:	d101      	bne.n	80096da <__swbuf_r+0x7a>
 80096d6:	68ac      	ldr	r4, [r5, #8]
 80096d8:	e7cf      	b.n	800967a <__swbuf_r+0x1a>
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <__swbuf_r+0xa0>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	bf08      	it	eq
 80096e0:	68ec      	ldreq	r4, [r5, #12]
 80096e2:	e7ca      	b.n	800967a <__swbuf_r+0x1a>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f81e 	bl	8009728 <__swsetup_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d0cb      	beq.n	8009688 <__swbuf_r+0x28>
 80096f0:	f04f 37ff 	mov.w	r7, #4294967295
 80096f4:	e7ea      	b.n	80096cc <__swbuf_r+0x6c>
 80096f6:	bf00      	nop
 80096f8:	0800a408 	.word	0x0800a408
 80096fc:	0800a428 	.word	0x0800a428
 8009700:	0800a3e8 	.word	0x0800a3e8

08009704 <_write_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4d07      	ldr	r5, [pc, #28]	; (8009724 <_write_r+0x20>)
 8009708:	4604      	mov	r4, r0
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	2200      	movs	r2, #0
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f7f7 fcf6 	bl	8001104 <_write>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_write_r+0x1e>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_write_r+0x1e>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200099d4 	.word	0x200099d4

08009728 <__swsetup_r>:
 8009728:	4b32      	ldr	r3, [pc, #200]	; (80097f4 <__swsetup_r+0xcc>)
 800972a:	b570      	push	{r4, r5, r6, lr}
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	b125      	cbz	r5, 800973e <__swsetup_r+0x16>
 8009734:	69ab      	ldr	r3, [r5, #24]
 8009736:	b913      	cbnz	r3, 800973e <__swsetup_r+0x16>
 8009738:	4628      	mov	r0, r5
 800973a:	f7ff fc75 	bl	8009028 <__sinit>
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <__swsetup_r+0xd0>)
 8009740:	429c      	cmp	r4, r3
 8009742:	d10f      	bne.n	8009764 <__swsetup_r+0x3c>
 8009744:	686c      	ldr	r4, [r5, #4]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800974c:	0719      	lsls	r1, r3, #28
 800974e:	d42c      	bmi.n	80097aa <__swsetup_r+0x82>
 8009750:	06dd      	lsls	r5, r3, #27
 8009752:	d411      	bmi.n	8009778 <__swsetup_r+0x50>
 8009754:	2309      	movs	r3, #9
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	e03e      	b.n	80097e2 <__swsetup_r+0xba>
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <__swsetup_r+0xd4>)
 8009766:	429c      	cmp	r4, r3
 8009768:	d101      	bne.n	800976e <__swsetup_r+0x46>
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	e7eb      	b.n	8009746 <__swsetup_r+0x1e>
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <__swsetup_r+0xd8>)
 8009770:	429c      	cmp	r4, r3
 8009772:	bf08      	it	eq
 8009774:	68ec      	ldreq	r4, [r5, #12]
 8009776:	e7e6      	b.n	8009746 <__swsetup_r+0x1e>
 8009778:	0758      	lsls	r0, r3, #29
 800977a:	d512      	bpl.n	80097a2 <__swsetup_r+0x7a>
 800977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977e:	b141      	cbz	r1, 8009792 <__swsetup_r+0x6a>
 8009780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009784:	4299      	cmp	r1, r3
 8009786:	d002      	beq.n	800978e <__swsetup_r+0x66>
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fd29 	bl	80091e0 <_free_r>
 800978e:	2300      	movs	r3, #0
 8009790:	6363      	str	r3, [r4, #52]	; 0x34
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	2300      	movs	r3, #0
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f043 0308 	orr.w	r3, r3, #8
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b94b      	cbnz	r3, 80097c2 <__swsetup_r+0x9a>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b8:	d003      	beq.n	80097c2 <__swsetup_r+0x9a>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 f92b 	bl	8009a18 <__smakebuf_r>
 80097c2:	89a0      	ldrh	r0, [r4, #12]
 80097c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c8:	f010 0301 	ands.w	r3, r0, #1
 80097cc:	d00a      	beq.n	80097e4 <__swsetup_r+0xbc>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	425b      	negs	r3, r3
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b943      	cbnz	r3, 80097ee <__swsetup_r+0xc6>
 80097dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e0:	d1ba      	bne.n	8009758 <__swsetup_r+0x30>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	0781      	lsls	r1, r0, #30
 80097e6:	bf58      	it	pl
 80097e8:	6963      	ldrpl	r3, [r4, #20]
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	e7f4      	b.n	80097d8 <__swsetup_r+0xb0>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e7f7      	b.n	80097e2 <__swsetup_r+0xba>
 80097f2:	bf00      	nop
 80097f4:	20000028 	.word	0x20000028
 80097f8:	0800a408 	.word	0x0800a408
 80097fc:	0800a428 	.word	0x0800a428
 8009800:	0800a3e8 	.word	0x0800a3e8

08009804 <_close_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d06      	ldr	r5, [pc, #24]	; (8009820 <_close_r+0x1c>)
 8009808:	2300      	movs	r3, #0
 800980a:	4604      	mov	r4, r0
 800980c:	4608      	mov	r0, r1
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	f7f8 fe03 	bl	800241a <_close>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_close_r+0x1a>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_close_r+0x1a>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	200099d4 	.word	0x200099d4

08009824 <__sflush_r>:
 8009824:	898a      	ldrh	r2, [r1, #12]
 8009826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982a:	4605      	mov	r5, r0
 800982c:	0710      	lsls	r0, r2, #28
 800982e:	460c      	mov	r4, r1
 8009830:	d458      	bmi.n	80098e4 <__sflush_r+0xc0>
 8009832:	684b      	ldr	r3, [r1, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	dc05      	bgt.n	8009844 <__sflush_r+0x20>
 8009838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	dc02      	bgt.n	8009844 <__sflush_r+0x20>
 800983e:	2000      	movs	r0, #0
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009846:	2e00      	cmp	r6, #0
 8009848:	d0f9      	beq.n	800983e <__sflush_r+0x1a>
 800984a:	2300      	movs	r3, #0
 800984c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009850:	682f      	ldr	r7, [r5, #0]
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	d032      	beq.n	80098bc <__sflush_r+0x98>
 8009856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	075a      	lsls	r2, r3, #29
 800985c:	d505      	bpl.n	800986a <__sflush_r+0x46>
 800985e:	6863      	ldr	r3, [r4, #4]
 8009860:	1ac0      	subs	r0, r0, r3
 8009862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009864:	b10b      	cbz	r3, 800986a <__sflush_r+0x46>
 8009866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009868:	1ac0      	subs	r0, r0, r3
 800986a:	2300      	movs	r3, #0
 800986c:	4602      	mov	r2, r0
 800986e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009870:	6a21      	ldr	r1, [r4, #32]
 8009872:	4628      	mov	r0, r5
 8009874:	47b0      	blx	r6
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	d106      	bne.n	800988a <__sflush_r+0x66>
 800987c:	6829      	ldr	r1, [r5, #0]
 800987e:	291d      	cmp	r1, #29
 8009880:	d82c      	bhi.n	80098dc <__sflush_r+0xb8>
 8009882:	4a2a      	ldr	r2, [pc, #168]	; (800992c <__sflush_r+0x108>)
 8009884:	40ca      	lsrs	r2, r1
 8009886:	07d6      	lsls	r6, r2, #31
 8009888:	d528      	bpl.n	80098dc <__sflush_r+0xb8>
 800988a:	2200      	movs	r2, #0
 800988c:	6062      	str	r2, [r4, #4]
 800988e:	04d9      	lsls	r1, r3, #19
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	d504      	bpl.n	80098a0 <__sflush_r+0x7c>
 8009896:	1c42      	adds	r2, r0, #1
 8009898:	d101      	bne.n	800989e <__sflush_r+0x7a>
 800989a:	682b      	ldr	r3, [r5, #0]
 800989c:	b903      	cbnz	r3, 80098a0 <__sflush_r+0x7c>
 800989e:	6560      	str	r0, [r4, #84]	; 0x54
 80098a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a2:	602f      	str	r7, [r5, #0]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	d0ca      	beq.n	800983e <__sflush_r+0x1a>
 80098a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ac:	4299      	cmp	r1, r3
 80098ae:	d002      	beq.n	80098b6 <__sflush_r+0x92>
 80098b0:	4628      	mov	r0, r5
 80098b2:	f7ff fc95 	bl	80091e0 <_free_r>
 80098b6:	2000      	movs	r0, #0
 80098b8:	6360      	str	r0, [r4, #52]	; 0x34
 80098ba:	e7c1      	b.n	8009840 <__sflush_r+0x1c>
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	2301      	movs	r3, #1
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	1c41      	adds	r1, r0, #1
 80098c6:	d1c7      	bne.n	8009858 <__sflush_r+0x34>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0c4      	beq.n	8009858 <__sflush_r+0x34>
 80098ce:	2b1d      	cmp	r3, #29
 80098d0:	d001      	beq.n	80098d6 <__sflush_r+0xb2>
 80098d2:	2b16      	cmp	r3, #22
 80098d4:	d101      	bne.n	80098da <__sflush_r+0xb6>
 80098d6:	602f      	str	r7, [r5, #0]
 80098d8:	e7b1      	b.n	800983e <__sflush_r+0x1a>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	e7ad      	b.n	8009840 <__sflush_r+0x1c>
 80098e4:	690f      	ldr	r7, [r1, #16]
 80098e6:	2f00      	cmp	r7, #0
 80098e8:	d0a9      	beq.n	800983e <__sflush_r+0x1a>
 80098ea:	0793      	lsls	r3, r2, #30
 80098ec:	680e      	ldr	r6, [r1, #0]
 80098ee:	bf08      	it	eq
 80098f0:	694b      	ldreq	r3, [r1, #20]
 80098f2:	600f      	str	r7, [r1, #0]
 80098f4:	bf18      	it	ne
 80098f6:	2300      	movne	r3, #0
 80098f8:	eba6 0807 	sub.w	r8, r6, r7
 80098fc:	608b      	str	r3, [r1, #8]
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	dd9c      	ble.n	800983e <__sflush_r+0x1a>
 8009904:	6a21      	ldr	r1, [r4, #32]
 8009906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009908:	4643      	mov	r3, r8
 800990a:	463a      	mov	r2, r7
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	2800      	cmp	r0, #0
 8009912:	dc06      	bgt.n	8009922 <__sflush_r+0xfe>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991a:	81a3      	strh	r3, [r4, #12]
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	e78e      	b.n	8009840 <__sflush_r+0x1c>
 8009922:	4407      	add	r7, r0
 8009924:	eba8 0800 	sub.w	r8, r8, r0
 8009928:	e7e9      	b.n	80098fe <__sflush_r+0xda>
 800992a:	bf00      	nop
 800992c:	20400001 	.word	0x20400001

08009930 <_fflush_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	690b      	ldr	r3, [r1, #16]
 8009934:	4605      	mov	r5, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b913      	cbnz	r3, 8009940 <_fflush_r+0x10>
 800993a:	2500      	movs	r5, #0
 800993c:	4628      	mov	r0, r5
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	b118      	cbz	r0, 800994a <_fflush_r+0x1a>
 8009942:	6983      	ldr	r3, [r0, #24]
 8009944:	b90b      	cbnz	r3, 800994a <_fflush_r+0x1a>
 8009946:	f7ff fb6f 	bl	8009028 <__sinit>
 800994a:	4b14      	ldr	r3, [pc, #80]	; (800999c <_fflush_r+0x6c>)
 800994c:	429c      	cmp	r4, r3
 800994e:	d11b      	bne.n	8009988 <_fflush_r+0x58>
 8009950:	686c      	ldr	r4, [r5, #4]
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0ef      	beq.n	800993a <_fflush_r+0xa>
 800995a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800995c:	07d0      	lsls	r0, r2, #31
 800995e:	d404      	bmi.n	800996a <_fflush_r+0x3a>
 8009960:	0599      	lsls	r1, r3, #22
 8009962:	d402      	bmi.n	800996a <_fflush_r+0x3a>
 8009964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009966:	f7ff fc22 	bl	80091ae <__retarget_lock_acquire_recursive>
 800996a:	4628      	mov	r0, r5
 800996c:	4621      	mov	r1, r4
 800996e:	f7ff ff59 	bl	8009824 <__sflush_r>
 8009972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009974:	07da      	lsls	r2, r3, #31
 8009976:	4605      	mov	r5, r0
 8009978:	d4e0      	bmi.n	800993c <_fflush_r+0xc>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	059b      	lsls	r3, r3, #22
 800997e:	d4dd      	bmi.n	800993c <_fflush_r+0xc>
 8009980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009982:	f7ff fc15 	bl	80091b0 <__retarget_lock_release_recursive>
 8009986:	e7d9      	b.n	800993c <_fflush_r+0xc>
 8009988:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <_fflush_r+0x70>)
 800998a:	429c      	cmp	r4, r3
 800998c:	d101      	bne.n	8009992 <_fflush_r+0x62>
 800998e:	68ac      	ldr	r4, [r5, #8]
 8009990:	e7df      	b.n	8009952 <_fflush_r+0x22>
 8009992:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <_fflush_r+0x74>)
 8009994:	429c      	cmp	r4, r3
 8009996:	bf08      	it	eq
 8009998:	68ec      	ldreq	r4, [r5, #12]
 800999a:	e7da      	b.n	8009952 <_fflush_r+0x22>
 800999c:	0800a408 	.word	0x0800a408
 80099a0:	0800a428 	.word	0x0800a428
 80099a4:	0800a3e8 	.word	0x0800a3e8

080099a8 <_lseek_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	; (80099c8 <_lseek_r+0x20>)
 80099ac:	4604      	mov	r4, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f8 fd56 	bl	8002468 <_lseek>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_lseek_r+0x1e>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_lseek_r+0x1e>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200099d4 	.word	0x200099d4

080099cc <__swhatbuf_r>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	460e      	mov	r6, r1
 80099d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d4:	2900      	cmp	r1, #0
 80099d6:	b096      	sub	sp, #88	; 0x58
 80099d8:	4614      	mov	r4, r2
 80099da:	461d      	mov	r5, r3
 80099dc:	da08      	bge.n	80099f0 <__swhatbuf_r+0x24>
 80099de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	061a      	lsls	r2, r3, #24
 80099e8:	d410      	bmi.n	8009a0c <__swhatbuf_r+0x40>
 80099ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ee:	e00e      	b.n	8009a0e <__swhatbuf_r+0x42>
 80099f0:	466a      	mov	r2, sp
 80099f2:	f000 fb5d 	bl	800a0b0 <_fstat_r>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	dbf1      	blt.n	80099de <__swhatbuf_r+0x12>
 80099fa:	9a01      	ldr	r2, [sp, #4]
 80099fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a04:	425a      	negs	r2, r3
 8009a06:	415a      	adcs	r2, r3
 8009a08:	602a      	str	r2, [r5, #0]
 8009a0a:	e7ee      	b.n	80099ea <__swhatbuf_r+0x1e>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	2000      	movs	r0, #0
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	b016      	add	sp, #88	; 0x58
 8009a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a18 <__smakebuf_r>:
 8009a18:	898b      	ldrh	r3, [r1, #12]
 8009a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a1c:	079d      	lsls	r5, r3, #30
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460c      	mov	r4, r1
 8009a22:	d507      	bpl.n	8009a34 <__smakebuf_r+0x1c>
 8009a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	6163      	str	r3, [r4, #20]
 8009a30:	b002      	add	sp, #8
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	ab01      	add	r3, sp, #4
 8009a36:	466a      	mov	r2, sp
 8009a38:	f7ff ffc8 	bl	80099cc <__swhatbuf_r>
 8009a3c:	9900      	ldr	r1, [sp, #0]
 8009a3e:	4605      	mov	r5, r0
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7ff fc39 	bl	80092b8 <_malloc_r>
 8009a46:	b948      	cbnz	r0, 8009a5c <__smakebuf_r+0x44>
 8009a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4c:	059a      	lsls	r2, r3, #22
 8009a4e:	d4ef      	bmi.n	8009a30 <__smakebuf_r+0x18>
 8009a50:	f023 0303 	bic.w	r3, r3, #3
 8009a54:	f043 0302 	orr.w	r3, r3, #2
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	e7e3      	b.n	8009a24 <__smakebuf_r+0xc>
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <__smakebuf_r+0x7c>)
 8009a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	6163      	str	r3, [r4, #20]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	6120      	str	r0, [r4, #16]
 8009a72:	b15b      	cbz	r3, 8009a8c <__smakebuf_r+0x74>
 8009a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fb2b 	bl	800a0d4 <_isatty_r>
 8009a7e:	b128      	cbz	r0, 8009a8c <__smakebuf_r+0x74>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	89a0      	ldrh	r0, [r4, #12]
 8009a8e:	4305      	orrs	r5, r0
 8009a90:	81a5      	strh	r5, [r4, #12]
 8009a92:	e7cd      	b.n	8009a30 <__smakebuf_r+0x18>
 8009a94:	08008fc1 	.word	0x08008fc1

08009a98 <__malloc_lock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_lock+0x8>)
 8009a9a:	f7ff bb88 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	200099c8 	.word	0x200099c8

08009aa4 <__malloc_unlock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__malloc_unlock+0x8>)
 8009aa6:	f7ff bb83 	b.w	80091b0 <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	200099c8 	.word	0x200099c8

08009ab0 <__sfputc_r>:
 8009ab0:	6893      	ldr	r3, [r2, #8]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	b410      	push	{r4}
 8009ab8:	6093      	str	r3, [r2, #8]
 8009aba:	da08      	bge.n	8009ace <__sfputc_r+0x1e>
 8009abc:	6994      	ldr	r4, [r2, #24]
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	db01      	blt.n	8009ac6 <__sfputc_r+0x16>
 8009ac2:	290a      	cmp	r1, #10
 8009ac4:	d103      	bne.n	8009ace <__sfputc_r+0x1e>
 8009ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aca:	f7ff bdc9 	b.w	8009660 <__swbuf_r>
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	1c58      	adds	r0, r3, #1
 8009ad2:	6010      	str	r0, [r2, #0]
 8009ad4:	7019      	strb	r1, [r3, #0]
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <__sfputs_r>:
 8009ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	460f      	mov	r7, r1
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	18d5      	adds	r5, r2, r3
 8009ae8:	42ac      	cmp	r4, r5
 8009aea:	d101      	bne.n	8009af0 <__sfputs_r+0x12>
 8009aec:	2000      	movs	r0, #0
 8009aee:	e007      	b.n	8009b00 <__sfputs_r+0x22>
 8009af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af4:	463a      	mov	r2, r7
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ffda 	bl	8009ab0 <__sfputc_r>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d1f3      	bne.n	8009ae8 <__sfputs_r+0xa>
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b04 <_vfiprintf_r>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	460d      	mov	r5, r1
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	4698      	mov	r8, r3
 8009b10:	4606      	mov	r6, r0
 8009b12:	b118      	cbz	r0, 8009b1c <_vfiprintf_r+0x18>
 8009b14:	6983      	ldr	r3, [r0, #24]
 8009b16:	b90b      	cbnz	r3, 8009b1c <_vfiprintf_r+0x18>
 8009b18:	f7ff fa86 	bl	8009028 <__sinit>
 8009b1c:	4b89      	ldr	r3, [pc, #548]	; (8009d44 <_vfiprintf_r+0x240>)
 8009b1e:	429d      	cmp	r5, r3
 8009b20:	d11b      	bne.n	8009b5a <_vfiprintf_r+0x56>
 8009b22:	6875      	ldr	r5, [r6, #4]
 8009b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b26:	07d9      	lsls	r1, r3, #31
 8009b28:	d405      	bmi.n	8009b36 <_vfiprintf_r+0x32>
 8009b2a:	89ab      	ldrh	r3, [r5, #12]
 8009b2c:	059a      	lsls	r2, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_vfiprintf_r+0x32>
 8009b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b32:	f7ff fb3c 	bl	80091ae <__retarget_lock_acquire_recursive>
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	071b      	lsls	r3, r3, #28
 8009b3a:	d501      	bpl.n	8009b40 <_vfiprintf_r+0x3c>
 8009b3c:	692b      	ldr	r3, [r5, #16]
 8009b3e:	b9eb      	cbnz	r3, 8009b7c <_vfiprintf_r+0x78>
 8009b40:	4629      	mov	r1, r5
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff fdf0 	bl	8009728 <__swsetup_r>
 8009b48:	b1c0      	cbz	r0, 8009b7c <_vfiprintf_r+0x78>
 8009b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b4c:	07dc      	lsls	r4, r3, #31
 8009b4e:	d50e      	bpl.n	8009b6e <_vfiprintf_r+0x6a>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	b01d      	add	sp, #116	; 0x74
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5a:	4b7b      	ldr	r3, [pc, #492]	; (8009d48 <_vfiprintf_r+0x244>)
 8009b5c:	429d      	cmp	r5, r3
 8009b5e:	d101      	bne.n	8009b64 <_vfiprintf_r+0x60>
 8009b60:	68b5      	ldr	r5, [r6, #8]
 8009b62:	e7df      	b.n	8009b24 <_vfiprintf_r+0x20>
 8009b64:	4b79      	ldr	r3, [pc, #484]	; (8009d4c <_vfiprintf_r+0x248>)
 8009b66:	429d      	cmp	r5, r3
 8009b68:	bf08      	it	eq
 8009b6a:	68f5      	ldreq	r5, [r6, #12]
 8009b6c:	e7da      	b.n	8009b24 <_vfiprintf_r+0x20>
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	0598      	lsls	r0, r3, #22
 8009b72:	d4ed      	bmi.n	8009b50 <_vfiprintf_r+0x4c>
 8009b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b76:	f7ff fb1b 	bl	80091b0 <__retarget_lock_release_recursive>
 8009b7a:	e7e9      	b.n	8009b50 <_vfiprintf_r+0x4c>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b80:	2320      	movs	r3, #32
 8009b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b8a:	2330      	movs	r3, #48	; 0x30
 8009b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d50 <_vfiprintf_r+0x24c>
 8009b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b94:	f04f 0901 	mov.w	r9, #1
 8009b98:	4623      	mov	r3, r4
 8009b9a:	469a      	mov	sl, r3
 8009b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba0:	b10a      	cbz	r2, 8009ba6 <_vfiprintf_r+0xa2>
 8009ba2:	2a25      	cmp	r2, #37	; 0x25
 8009ba4:	d1f9      	bne.n	8009b9a <_vfiprintf_r+0x96>
 8009ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8009baa:	d00b      	beq.n	8009bc4 <_vfiprintf_r+0xc0>
 8009bac:	465b      	mov	r3, fp
 8009bae:	4622      	mov	r2, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ff93 	bl	8009ade <__sfputs_r>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f000 80aa 	beq.w	8009d12 <_vfiprintf_r+0x20e>
 8009bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bc0:	445a      	add	r2, fp
 8009bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80a2 	beq.w	8009d12 <_vfiprintf_r+0x20e>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bd8:	f10a 0a01 	add.w	sl, sl, #1
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009be4:	931a      	str	r3, [sp, #104]	; 0x68
 8009be6:	4654      	mov	r4, sl
 8009be8:	2205      	movs	r2, #5
 8009bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bee:	4858      	ldr	r0, [pc, #352]	; (8009d50 <_vfiprintf_r+0x24c>)
 8009bf0:	f7f6 faee 	bl	80001d0 <memchr>
 8009bf4:	9a04      	ldr	r2, [sp, #16]
 8009bf6:	b9d8      	cbnz	r0, 8009c30 <_vfiprintf_r+0x12c>
 8009bf8:	06d1      	lsls	r1, r2, #27
 8009bfa:	bf44      	itt	mi
 8009bfc:	2320      	movmi	r3, #32
 8009bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c02:	0713      	lsls	r3, r2, #28
 8009c04:	bf44      	itt	mi
 8009c06:	232b      	movmi	r3, #43	; 0x2b
 8009c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c10:	2b2a      	cmp	r3, #42	; 0x2a
 8009c12:	d015      	beq.n	8009c40 <_vfiprintf_r+0x13c>
 8009c14:	9a07      	ldr	r2, [sp, #28]
 8009c16:	4654      	mov	r4, sl
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f04f 0c0a 	mov.w	ip, #10
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c24:	3b30      	subs	r3, #48	; 0x30
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	d94e      	bls.n	8009cc8 <_vfiprintf_r+0x1c4>
 8009c2a:	b1b0      	cbz	r0, 8009c5a <_vfiprintf_r+0x156>
 8009c2c:	9207      	str	r2, [sp, #28]
 8009c2e:	e014      	b.n	8009c5a <_vfiprintf_r+0x156>
 8009c30:	eba0 0308 	sub.w	r3, r0, r8
 8009c34:	fa09 f303 	lsl.w	r3, r9, r3
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	46a2      	mov	sl, r4
 8009c3e:	e7d2      	b.n	8009be6 <_vfiprintf_r+0xe2>
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	1d19      	adds	r1, r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	9103      	str	r1, [sp, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	bfbb      	ittet	lt
 8009c4c:	425b      	neglt	r3, r3
 8009c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c52:	9307      	strge	r3, [sp, #28]
 8009c54:	9307      	strlt	r3, [sp, #28]
 8009c56:	bfb8      	it	lt
 8009c58:	9204      	strlt	r2, [sp, #16]
 8009c5a:	7823      	ldrb	r3, [r4, #0]
 8009c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c5e:	d10c      	bne.n	8009c7a <_vfiprintf_r+0x176>
 8009c60:	7863      	ldrb	r3, [r4, #1]
 8009c62:	2b2a      	cmp	r3, #42	; 0x2a
 8009c64:	d135      	bne.n	8009cd2 <_vfiprintf_r+0x1ce>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	1d1a      	adds	r2, r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	9203      	str	r2, [sp, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bfb8      	it	lt
 8009c72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c76:	3402      	adds	r4, #2
 8009c78:	9305      	str	r3, [sp, #20]
 8009c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d60 <_vfiprintf_r+0x25c>
 8009c7e:	7821      	ldrb	r1, [r4, #0]
 8009c80:	2203      	movs	r2, #3
 8009c82:	4650      	mov	r0, sl
 8009c84:	f7f6 faa4 	bl	80001d0 <memchr>
 8009c88:	b140      	cbz	r0, 8009c9c <_vfiprintf_r+0x198>
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	eba0 000a 	sub.w	r0, r0, sl
 8009c90:	fa03 f000 	lsl.w	r0, r3, r0
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	4303      	orrs	r3, r0
 8009c98:	3401      	adds	r4, #1
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca0:	482c      	ldr	r0, [pc, #176]	; (8009d54 <_vfiprintf_r+0x250>)
 8009ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ca6:	2206      	movs	r2, #6
 8009ca8:	f7f6 fa92 	bl	80001d0 <memchr>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d03f      	beq.n	8009d30 <_vfiprintf_r+0x22c>
 8009cb0:	4b29      	ldr	r3, [pc, #164]	; (8009d58 <_vfiprintf_r+0x254>)
 8009cb2:	bb1b      	cbnz	r3, 8009cfc <_vfiprintf_r+0x1f8>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	3307      	adds	r3, #7
 8009cb8:	f023 0307 	bic.w	r3, r3, #7
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc2:	443b      	add	r3, r7
 8009cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc6:	e767      	b.n	8009b98 <_vfiprintf_r+0x94>
 8009cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ccc:	460c      	mov	r4, r1
 8009cce:	2001      	movs	r0, #1
 8009cd0:	e7a5      	b.n	8009c1e <_vfiprintf_r+0x11a>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	3401      	adds	r4, #1
 8009cd6:	9305      	str	r3, [sp, #20]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f04f 0c0a 	mov.w	ip, #10
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ce4:	3a30      	subs	r2, #48	; 0x30
 8009ce6:	2a09      	cmp	r2, #9
 8009ce8:	d903      	bls.n	8009cf2 <_vfiprintf_r+0x1ee>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0c5      	beq.n	8009c7a <_vfiprintf_r+0x176>
 8009cee:	9105      	str	r1, [sp, #20]
 8009cf0:	e7c3      	b.n	8009c7a <_vfiprintf_r+0x176>
 8009cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e7f0      	b.n	8009cde <_vfiprintf_r+0x1da>
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	462a      	mov	r2, r5
 8009d02:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <_vfiprintf_r+0x258>)
 8009d04:	a904      	add	r1, sp, #16
 8009d06:	4630      	mov	r0, r6
 8009d08:	f3af 8000 	nop.w
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	1c78      	adds	r0, r7, #1
 8009d10:	d1d6      	bne.n	8009cc0 <_vfiprintf_r+0x1bc>
 8009d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d14:	07d9      	lsls	r1, r3, #31
 8009d16:	d405      	bmi.n	8009d24 <_vfiprintf_r+0x220>
 8009d18:	89ab      	ldrh	r3, [r5, #12]
 8009d1a:	059a      	lsls	r2, r3, #22
 8009d1c:	d402      	bmi.n	8009d24 <_vfiprintf_r+0x220>
 8009d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d20:	f7ff fa46 	bl	80091b0 <__retarget_lock_release_recursive>
 8009d24:	89ab      	ldrh	r3, [r5, #12]
 8009d26:	065b      	lsls	r3, r3, #25
 8009d28:	f53f af12 	bmi.w	8009b50 <_vfiprintf_r+0x4c>
 8009d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d2e:	e711      	b.n	8009b54 <_vfiprintf_r+0x50>
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	462a      	mov	r2, r5
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <_vfiprintf_r+0x258>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f000 f880 	bl	8009e40 <_printf_i>
 8009d40:	e7e4      	b.n	8009d0c <_vfiprintf_r+0x208>
 8009d42:	bf00      	nop
 8009d44:	0800a408 	.word	0x0800a408
 8009d48:	0800a428 	.word	0x0800a428
 8009d4c:	0800a3e8 	.word	0x0800a3e8
 8009d50:	0800a44c 	.word	0x0800a44c
 8009d54:	0800a456 	.word	0x0800a456
 8009d58:	00000000 	.word	0x00000000
 8009d5c:	08009adf 	.word	0x08009adf
 8009d60:	0800a452 	.word	0x0800a452

08009d64 <_printf_common>:
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	4616      	mov	r6, r2
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	688a      	ldr	r2, [r1, #8]
 8009d6e:	690b      	ldr	r3, [r1, #16]
 8009d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	bfb8      	it	lt
 8009d78:	4613      	movlt	r3, r2
 8009d7a:	6033      	str	r3, [r6, #0]
 8009d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d80:	4607      	mov	r7, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	b10a      	cbz	r2, 8009d8a <_printf_common+0x26>
 8009d86:	3301      	adds	r3, #1
 8009d88:	6033      	str	r3, [r6, #0]
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	0699      	lsls	r1, r3, #26
 8009d8e:	bf42      	ittt	mi
 8009d90:	6833      	ldrmi	r3, [r6, #0]
 8009d92:	3302      	addmi	r3, #2
 8009d94:	6033      	strmi	r3, [r6, #0]
 8009d96:	6825      	ldr	r5, [r4, #0]
 8009d98:	f015 0506 	ands.w	r5, r5, #6
 8009d9c:	d106      	bne.n	8009dac <_printf_common+0x48>
 8009d9e:	f104 0a19 	add.w	sl, r4, #25
 8009da2:	68e3      	ldr	r3, [r4, #12]
 8009da4:	6832      	ldr	r2, [r6, #0]
 8009da6:	1a9b      	subs	r3, r3, r2
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	dc26      	bgt.n	8009dfa <_printf_common+0x96>
 8009dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009db0:	1e13      	subs	r3, r2, #0
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	bf18      	it	ne
 8009db6:	2301      	movne	r3, #1
 8009db8:	0692      	lsls	r2, r2, #26
 8009dba:	d42b      	bmi.n	8009e14 <_printf_common+0xb0>
 8009dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	47c0      	blx	r8
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d01e      	beq.n	8009e08 <_printf_common+0xa4>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	68e5      	ldr	r5, [r4, #12]
 8009dce:	6832      	ldr	r2, [r6, #0]
 8009dd0:	f003 0306 	and.w	r3, r3, #6
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	bf08      	it	eq
 8009dd8:	1aad      	subeq	r5, r5, r2
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	6922      	ldr	r2, [r4, #16]
 8009dde:	bf0c      	ite	eq
 8009de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de4:	2500      	movne	r5, #0
 8009de6:	4293      	cmp	r3, r2
 8009de8:	bfc4      	itt	gt
 8009dea:	1a9b      	subgt	r3, r3, r2
 8009dec:	18ed      	addgt	r5, r5, r3
 8009dee:	2600      	movs	r6, #0
 8009df0:	341a      	adds	r4, #26
 8009df2:	42b5      	cmp	r5, r6
 8009df4:	d11a      	bne.n	8009e2c <_printf_common+0xc8>
 8009df6:	2000      	movs	r0, #0
 8009df8:	e008      	b.n	8009e0c <_printf_common+0xa8>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4638      	mov	r0, r7
 8009e02:	47c0      	blx	r8
 8009e04:	3001      	adds	r0, #1
 8009e06:	d103      	bne.n	8009e10 <_printf_common+0xac>
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e10:	3501      	adds	r5, #1
 8009e12:	e7c6      	b.n	8009da2 <_printf_common+0x3e>
 8009e14:	18e1      	adds	r1, r4, r3
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	2030      	movs	r0, #48	; 0x30
 8009e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e1e:	4422      	add	r2, r4
 8009e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e28:	3302      	adds	r3, #2
 8009e2a:	e7c7      	b.n	8009dbc <_printf_common+0x58>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	4622      	mov	r2, r4
 8009e30:	4649      	mov	r1, r9
 8009e32:	4638      	mov	r0, r7
 8009e34:	47c0      	blx	r8
 8009e36:	3001      	adds	r0, #1
 8009e38:	d0e6      	beq.n	8009e08 <_printf_common+0xa4>
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7d9      	b.n	8009df2 <_printf_common+0x8e>
	...

08009e40 <_printf_i>:
 8009e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	7e0f      	ldrb	r7, [r1, #24]
 8009e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e48:	2f78      	cmp	r7, #120	; 0x78
 8009e4a:	4691      	mov	r9, r2
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	469a      	mov	sl, r3
 8009e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e56:	d807      	bhi.n	8009e68 <_printf_i+0x28>
 8009e58:	2f62      	cmp	r7, #98	; 0x62
 8009e5a:	d80a      	bhi.n	8009e72 <_printf_i+0x32>
 8009e5c:	2f00      	cmp	r7, #0
 8009e5e:	f000 80d8 	beq.w	800a012 <_printf_i+0x1d2>
 8009e62:	2f58      	cmp	r7, #88	; 0x58
 8009e64:	f000 80a3 	beq.w	8009fae <_printf_i+0x16e>
 8009e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e70:	e03a      	b.n	8009ee8 <_printf_i+0xa8>
 8009e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e76:	2b15      	cmp	r3, #21
 8009e78:	d8f6      	bhi.n	8009e68 <_printf_i+0x28>
 8009e7a:	a101      	add	r1, pc, #4	; (adr r1, 8009e80 <_printf_i+0x40>)
 8009e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	08009eed 	.word	0x08009eed
 8009e88:	08009e69 	.word	0x08009e69
 8009e8c:	08009e69 	.word	0x08009e69
 8009e90:	08009e69 	.word	0x08009e69
 8009e94:	08009e69 	.word	0x08009e69
 8009e98:	08009eed 	.word	0x08009eed
 8009e9c:	08009e69 	.word	0x08009e69
 8009ea0:	08009e69 	.word	0x08009e69
 8009ea4:	08009e69 	.word	0x08009e69
 8009ea8:	08009e69 	.word	0x08009e69
 8009eac:	08009ff9 	.word	0x08009ff9
 8009eb0:	08009f1d 	.word	0x08009f1d
 8009eb4:	08009fdb 	.word	0x08009fdb
 8009eb8:	08009e69 	.word	0x08009e69
 8009ebc:	08009e69 	.word	0x08009e69
 8009ec0:	0800a01b 	.word	0x0800a01b
 8009ec4:	08009e69 	.word	0x08009e69
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009e69 	.word	0x08009e69
 8009ed0:	08009e69 	.word	0x08009e69
 8009ed4:	08009fe3 	.word	0x08009fe3
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	1d1a      	adds	r2, r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	602a      	str	r2, [r5, #0]
 8009ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e0a3      	b.n	800a034 <_printf_i+0x1f4>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	6829      	ldr	r1, [r5, #0]
 8009ef0:	0606      	lsls	r6, r0, #24
 8009ef2:	f101 0304 	add.w	r3, r1, #4
 8009ef6:	d50a      	bpl.n	8009f0e <_printf_i+0xce>
 8009ef8:	680e      	ldr	r6, [r1, #0]
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	2e00      	cmp	r6, #0
 8009efe:	da03      	bge.n	8009f08 <_printf_i+0xc8>
 8009f00:	232d      	movs	r3, #45	; 0x2d
 8009f02:	4276      	negs	r6, r6
 8009f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f08:	485e      	ldr	r0, [pc, #376]	; (800a084 <_printf_i+0x244>)
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	e019      	b.n	8009f42 <_printf_i+0x102>
 8009f0e:	680e      	ldr	r6, [r1, #0]
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f16:	bf18      	it	ne
 8009f18:	b236      	sxthne	r6, r6
 8009f1a:	e7ef      	b.n	8009efc <_printf_i+0xbc>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	6029      	str	r1, [r5, #0]
 8009f24:	0601      	lsls	r1, r0, #24
 8009f26:	d501      	bpl.n	8009f2c <_printf_i+0xec>
 8009f28:	681e      	ldr	r6, [r3, #0]
 8009f2a:	e002      	b.n	8009f32 <_printf_i+0xf2>
 8009f2c:	0646      	lsls	r6, r0, #25
 8009f2e:	d5fb      	bpl.n	8009f28 <_printf_i+0xe8>
 8009f30:	881e      	ldrh	r6, [r3, #0]
 8009f32:	4854      	ldr	r0, [pc, #336]	; (800a084 <_printf_i+0x244>)
 8009f34:	2f6f      	cmp	r7, #111	; 0x6f
 8009f36:	bf0c      	ite	eq
 8009f38:	2308      	moveq	r3, #8
 8009f3a:	230a      	movne	r3, #10
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f42:	6865      	ldr	r5, [r4, #4]
 8009f44:	60a5      	str	r5, [r4, #8]
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	bfa2      	ittt	ge
 8009f4a:	6821      	ldrge	r1, [r4, #0]
 8009f4c:	f021 0104 	bicge.w	r1, r1, #4
 8009f50:	6021      	strge	r1, [r4, #0]
 8009f52:	b90e      	cbnz	r6, 8009f58 <_printf_i+0x118>
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	d04d      	beq.n	8009ff4 <_printf_i+0x1b4>
 8009f58:	4615      	mov	r5, r2
 8009f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f62:	5dc7      	ldrb	r7, [r0, r7]
 8009f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f68:	4637      	mov	r7, r6
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	460e      	mov	r6, r1
 8009f6e:	d9f4      	bls.n	8009f5a <_printf_i+0x11a>
 8009f70:	2b08      	cmp	r3, #8
 8009f72:	d10b      	bne.n	8009f8c <_printf_i+0x14c>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	07de      	lsls	r6, r3, #31
 8009f78:	d508      	bpl.n	8009f8c <_printf_i+0x14c>
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	bfde      	ittt	le
 8009f82:	2330      	movle	r3, #48	; 0x30
 8009f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f8c:	1b52      	subs	r2, r2, r5
 8009f8e:	6122      	str	r2, [r4, #16]
 8009f90:	f8cd a000 	str.w	sl, [sp]
 8009f94:	464b      	mov	r3, r9
 8009f96:	aa03      	add	r2, sp, #12
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7ff fee2 	bl	8009d64 <_printf_common>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d14c      	bne.n	800a03e <_printf_i+0x1fe>
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	b004      	add	sp, #16
 8009faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fae:	4835      	ldr	r0, [pc, #212]	; (800a084 <_printf_i+0x244>)
 8009fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fb4:	6829      	ldr	r1, [r5, #0]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fbc:	6029      	str	r1, [r5, #0]
 8009fbe:	061d      	lsls	r5, r3, #24
 8009fc0:	d514      	bpl.n	8009fec <_printf_i+0x1ac>
 8009fc2:	07df      	lsls	r7, r3, #31
 8009fc4:	bf44      	itt	mi
 8009fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fca:	6023      	strmi	r3, [r4, #0]
 8009fcc:	b91e      	cbnz	r6, 8009fd6 <_printf_i+0x196>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	f023 0320 	bic.w	r3, r3, #32
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	2310      	movs	r3, #16
 8009fd8:	e7b0      	b.n	8009f3c <_printf_i+0xfc>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	f043 0320 	orr.w	r3, r3, #32
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	2378      	movs	r3, #120	; 0x78
 8009fe4:	4828      	ldr	r0, [pc, #160]	; (800a088 <_printf_i+0x248>)
 8009fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fea:	e7e3      	b.n	8009fb4 <_printf_i+0x174>
 8009fec:	0659      	lsls	r1, r3, #25
 8009fee:	bf48      	it	mi
 8009ff0:	b2b6      	uxthmi	r6, r6
 8009ff2:	e7e6      	b.n	8009fc2 <_printf_i+0x182>
 8009ff4:	4615      	mov	r5, r2
 8009ff6:	e7bb      	b.n	8009f70 <_printf_i+0x130>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	6826      	ldr	r6, [r4, #0]
 8009ffc:	6961      	ldr	r1, [r4, #20]
 8009ffe:	1d18      	adds	r0, r3, #4
 800a000:	6028      	str	r0, [r5, #0]
 800a002:	0635      	lsls	r5, r6, #24
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	d501      	bpl.n	800a00c <_printf_i+0x1cc>
 800a008:	6019      	str	r1, [r3, #0]
 800a00a:	e002      	b.n	800a012 <_printf_i+0x1d2>
 800a00c:	0670      	lsls	r0, r6, #25
 800a00e:	d5fb      	bpl.n	800a008 <_printf_i+0x1c8>
 800a010:	8019      	strh	r1, [r3, #0]
 800a012:	2300      	movs	r3, #0
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	4615      	mov	r5, r2
 800a018:	e7ba      	b.n	8009f90 <_printf_i+0x150>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	1d1a      	adds	r2, r3, #4
 800a01e:	602a      	str	r2, [r5, #0]
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	2100      	movs	r1, #0
 800a026:	4628      	mov	r0, r5
 800a028:	f7f6 f8d2 	bl	80001d0 <memchr>
 800a02c:	b108      	cbz	r0, 800a032 <_printf_i+0x1f2>
 800a02e:	1b40      	subs	r0, r0, r5
 800a030:	6060      	str	r0, [r4, #4]
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	2300      	movs	r3, #0
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03c:	e7a8      	b.n	8009f90 <_printf_i+0x150>
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	462a      	mov	r2, r5
 800a042:	4649      	mov	r1, r9
 800a044:	4640      	mov	r0, r8
 800a046:	47d0      	blx	sl
 800a048:	3001      	adds	r0, #1
 800a04a:	d0ab      	beq.n	8009fa4 <_printf_i+0x164>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	079b      	lsls	r3, r3, #30
 800a050:	d413      	bmi.n	800a07a <_printf_i+0x23a>
 800a052:	68e0      	ldr	r0, [r4, #12]
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	4298      	cmp	r0, r3
 800a058:	bfb8      	it	lt
 800a05a:	4618      	movlt	r0, r3
 800a05c:	e7a4      	b.n	8009fa8 <_printf_i+0x168>
 800a05e:	2301      	movs	r3, #1
 800a060:	4632      	mov	r2, r6
 800a062:	4649      	mov	r1, r9
 800a064:	4640      	mov	r0, r8
 800a066:	47d0      	blx	sl
 800a068:	3001      	adds	r0, #1
 800a06a:	d09b      	beq.n	8009fa4 <_printf_i+0x164>
 800a06c:	3501      	adds	r5, #1
 800a06e:	68e3      	ldr	r3, [r4, #12]
 800a070:	9903      	ldr	r1, [sp, #12]
 800a072:	1a5b      	subs	r3, r3, r1
 800a074:	42ab      	cmp	r3, r5
 800a076:	dcf2      	bgt.n	800a05e <_printf_i+0x21e>
 800a078:	e7eb      	b.n	800a052 <_printf_i+0x212>
 800a07a:	2500      	movs	r5, #0
 800a07c:	f104 0619 	add.w	r6, r4, #25
 800a080:	e7f5      	b.n	800a06e <_printf_i+0x22e>
 800a082:	bf00      	nop
 800a084:	0800a45d 	.word	0x0800a45d
 800a088:	0800a46e 	.word	0x0800a46e

0800a08c <_read_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_read_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f8 f9a0 	bl	80023e0 <_read>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_read_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_read_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	200099d4 	.word	0x200099d4

0800a0b0 <_fstat_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	; (800a0d0 <_fstat_r+0x20>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f7f8 f9b8 	bl	8002432 <_fstat>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <_fstat_r+0x1c>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b103      	cbz	r3, 800a0cc <_fstat_r+0x1c>
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200099d4 	.word	0x200099d4

0800a0d4 <_isatty_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	; (800a0f0 <_isatty_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f8 f9b7 	bl	8002452 <_isatty>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_isatty_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_isatty_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	200099d4 	.word	0x200099d4

0800a0f4 <_init>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

0800a100 <_fini>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr
