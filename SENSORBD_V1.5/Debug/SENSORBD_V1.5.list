
SENSORBD_V1.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800cd0c  0800cd0c  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b4  0800d1b4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1bc  0800d1bc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          0000be98  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c068  2000c068  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024680  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050d4  00000000  00000000  00044880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  00049958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a00  00000000  00000000  0004b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ec  00000000  00000000  0004cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227ca  00000000  00000000  0007473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db3f2  00000000  00000000  00096f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001722f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dc4  00000000  00000000  00172348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccf4 	.word	0x0800ccf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800ccf4 	.word	0x0800ccf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <LED_PWM_init>:
int32_t Ring2_LED_rotateData[MAX_LED_RING + 1];

uint16_t LED_PWM_low = 0;//LED_PWM_PERIOD / 3;
uint16_t LED_PWM_high = 0;//LED_PWM_PERIOD / 3 * 2;
static void LED_PWM_init()
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	LED_PWM_low = TIM1_PWM_LED_LOW;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <LED_PWM_init+0x48>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <LED_PWM_init+0x4c>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	085b      	lsrs	r3, r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	3b01      	subs	r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <LED_PWM_init+0x50>)
 8000b9c:	801a      	strh	r2, [r3, #0]
	LED_PWM_high = TIM1_PWM_LED_HIGH;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <LED_PWM_init+0x48>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <LED_PWM_init+0x4c>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	085b      	lsrs	r3, r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LED_PWM_init+0x54>)
 8000bba:	801a      	strh	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20002e4c 	.word	0x20002e4c
 8000bcc:	aaaaaaab 	.word	0xaaaaaaab
 8000bd0:	200029ec 	.word	0x200029ec
 8000bd4:	200029ee 	.word	0x200029ee

08000bd8 <Set_LED>:
********************************************************************************************************************************
 * SET WS2812 LED RGB
********************************************************************************************************************************
*/
static void Set_LED (int LEDnum, int led, color _color)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	switch(led){
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d045      	beq.n	8000c76 <Set_LED+0x9e>
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	dc60      	bgt.n	8000cb2 <Set_LED+0xda>
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d003      	beq.n	8000bfe <Set_LED+0x26>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d01e      	beq.n	8000c3a <Set_LED+0x62>
	case 3:
		Belt_LED_Data[LEDnum][0] = (uint8_t)_color.Green;
		Belt_LED_Data[LEDnum][1] = (uint8_t)_color.Red;
		Belt_LED_Data[LEDnum][2] = (uint8_t)_color.Blue;
	}
}
 8000bfc:	e059      	b.n	8000cb2 <Set_LED+0xda>
		Ring1_LED_Data[LEDnum][0] = (uint8_t)_color.Green;
 8000bfe:	7978      	ldrb	r0, [r7, #5]
 8000c00:	492f      	ldr	r1, [pc, #188]	; (8000cc0 <Set_LED+0xe8>)
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	701a      	strb	r2, [r3, #0]
		Ring1_LED_Data[LEDnum][1] = (uint8_t)_color.Red;
 8000c10:	7938      	ldrb	r0, [r7, #4]
 8000c12:	492b      	ldr	r1, [pc, #172]	; (8000cc0 <Set_LED+0xe8>)
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4602      	mov	r2, r0
 8000c22:	701a      	strb	r2, [r3, #0]
		Ring1_LED_Data[LEDnum][2] = (uint8_t)_color.Blue;
 8000c24:	79b8      	ldrb	r0, [r7, #6]
 8000c26:	4926      	ldr	r1, [pc, #152]	; (8000cc0 <Set_LED+0xe8>)
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	3302      	adds	r3, #2
 8000c34:	4602      	mov	r2, r0
 8000c36:	701a      	strb	r2, [r3, #0]
		break;
 8000c38:	e03b      	b.n	8000cb2 <Set_LED+0xda>
		Ring2_LED_Data[LEDnum][0] = (uint8_t)_color.Green;;
 8000c3a:	7978      	ldrb	r0, [r7, #5]
 8000c3c:	4921      	ldr	r1, [pc, #132]	; (8000cc4 <Set_LED+0xec>)
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	4602      	mov	r2, r0
 8000c4a:	701a      	strb	r2, [r3, #0]
		Ring2_LED_Data[LEDnum][1] = (uint8_t)_color.Red;
 8000c4c:	7938      	ldrb	r0, [r7, #4]
 8000c4e:	491d      	ldr	r1, [pc, #116]	; (8000cc4 <Set_LED+0xec>)
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	701a      	strb	r2, [r3, #0]
		Ring2_LED_Data[LEDnum][2] = (uint8_t)_color.Blue;
 8000c60:	79b8      	ldrb	r0, [r7, #6]
 8000c62:	4918      	ldr	r1, [pc, #96]	; (8000cc4 <Set_LED+0xec>)
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3302      	adds	r3, #2
 8000c70:	4602      	mov	r2, r0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e01d      	b.n	8000cb2 <Set_LED+0xda>
		Belt_LED_Data[LEDnum][0] = (uint8_t)_color.Green;
 8000c76:	7978      	ldrb	r0, [r7, #5]
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <Set_LED+0xf0>)
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	4602      	mov	r2, r0
 8000c86:	701a      	strb	r2, [r3, #0]
		Belt_LED_Data[LEDnum][1] = (uint8_t)_color.Red;
 8000c88:	7938      	ldrb	r0, [r7, #4]
 8000c8a:	490f      	ldr	r1, [pc, #60]	; (8000cc8 <Set_LED+0xf0>)
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	3301      	adds	r3, #1
 8000c98:	4602      	mov	r2, r0
 8000c9a:	701a      	strb	r2, [r3, #0]
		Belt_LED_Data[LEDnum][2] = (uint8_t)_color.Blue;
 8000c9c:	79b8      	ldrb	r0, [r7, #6]
 8000c9e:	490a      	ldr	r1, [pc, #40]	; (8000cc8 <Set_LED+0xf0>)
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	3302      	adds	r3, #2
 8000cac:	4602      	mov	r2, r0
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	e7ff      	b.n	8000cb2 <Set_LED+0xda>
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000036c 	.word	0x2000036c
 8000cc4:	200003c8 	.word	0x200003c8
 8000cc8:	20000204 	.word	0x20000204

08000ccc <WS2812_Send>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void WS2812_Send (int led)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b092      	sub	sp, #72	; 0x48
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t color;

	switch(led){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	f200 81d2 	bhi.w	8001084 <WS2812_Send+0x3b8>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <WS2812_Send+0x1c>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000cf9 	.word	0x08000cf9
 8000cec:	08000df1 	.word	0x08000df1
 8000cf0:	08000ec1 	.word	0x08000ec1
 8000cf4:	08000fb5 	.word	0x08000fb5
	case 0: // clear
		for (int i= 0; i<MAX_LED_RING; i++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8000cfc:	e015      	b.n	8000d2a <WS2812_Send+0x5e>
		{
			for (int i=23; i>=0; i--)
 8000cfe:	2317      	movs	r3, #23
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d02:	e00c      	b.n	8000d1e <WS2812_Send+0x52>
			{
				ring1PwmData[indx] = 0;
 8000d04:	4a93      	ldr	r2, [pc, #588]	; (8000f54 <WS2812_Send+0x288>)
 8000d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				ring2PwmData[indx] = 0;
 8000d0e:	4a92      	ldr	r2, [pc, #584]	; (8000f58 <WS2812_Send+0x28c>)
 8000d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d12:	2100      	movs	r1, #0
 8000d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i=23; i>=0; i--)
 8000d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	daef      	bge.n	8000d04 <WS2812_Send+0x38>
		for (int i= 0; i<MAX_LED_RING; i++)
 8000d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d26:	3301      	adds	r3, #1
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	2b1d      	cmp	r3, #29
 8000d2e:	dde6      	ble.n	8000cfe <WS2812_Send+0x32>
			}
		}
		for (int i= 0; i<MAX_LED_BELT; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d34:	e010      	b.n	8000d58 <WS2812_Send+0x8c>
		{
			for (int i=23; i>=0; i--)
 8000d36:	2317      	movs	r3, #23
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
 8000d3a:	e007      	b.n	8000d4c <WS2812_Send+0x80>
			{
				beltPwmData[indx] = 0;
 8000d3c:	4a87      	ldr	r2, [pc, #540]	; (8000f5c <WS2812_Send+0x290>)
 8000d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d40:	2100      	movs	r1, #0
 8000d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i=23; i>=0; i--)
 8000d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	daf4      	bge.n	8000d3c <WS2812_Send+0x70>
		for (int i= 0; i<MAX_LED_BELT; i++)
 8000d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d54:	3301      	adds	r3, #1
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d5a:	2b77      	cmp	r3, #119	; 0x77
 8000d5c:	ddeb      	ble.n	8000d36 <WS2812_Send+0x6a>
			}
		}

		for (int i=0; i<50; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
 8000d62:	e014      	b.n	8000d8e <WS2812_Send+0xc2>
		{
			ring1PwmData[indx] = 0;
 8000d64:	4a7b      	ldr	r2, [pc, #492]	; (8000f54 <WS2812_Send+0x288>)
 8000d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ring2PwmData[indx] = 0;
 8000d6e:	4a7a      	ldr	r2, [pc, #488]	; (8000f58 <WS2812_Send+0x28c>)
 8000d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d72:	2100      	movs	r1, #0
 8000d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			beltPwmData[indx] = 0;
 8000d78:	4a78      	ldr	r2, [pc, #480]	; (8000f5c <WS2812_Send+0x290>)
 8000d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d84:	3301      	adds	r3, #1
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i=0; i<50; i++)
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	2b31      	cmp	r3, #49	; 0x31
 8000d92:	dde7      	ble.n	8000d64 <WS2812_Send+0x98>
		}

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)ring1PwmData, indx);
 8000d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <WS2812_Send+0x288>)
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4870      	ldr	r0, [pc, #448]	; (8000f60 <WS2812_Send+0x294>)
 8000d9e:	f006 f953 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.ring1datasentflag){};
 8000da2:	bf00      	nop
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <WS2812_Send+0x298>)
 8000da6:	7b5b      	ldrb	r3, [r3, #13]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0fb      	beq.n	8000da4 <WS2812_Send+0xd8>
		gv.ring1datasentflag = 0;
 8000dac:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <WS2812_Send+0x298>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	735a      	strb	r2, [r3, #13]

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)ring2PwmData, indx);
 8000db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4a68      	ldr	r2, [pc, #416]	; (8000f58 <WS2812_Send+0x28c>)
 8000db8:	2108      	movs	r1, #8
 8000dba:	4869      	ldr	r0, [pc, #420]	; (8000f60 <WS2812_Send+0x294>)
 8000dbc:	f006 f944 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.ring2datasentflag){};
 8000dc0:	bf00      	nop
 8000dc2:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <WS2812_Send+0x298>)
 8000dc4:	7b9b      	ldrb	r3, [r3, #14]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0fb      	beq.n	8000dc2 <WS2812_Send+0xf6>
		gv.ring2datasentflag = 0;
 8000dca:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <WS2812_Send+0x298>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	739a      	strb	r2, [r3, #14]

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)beltPwmData, indx);
 8000dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4a61      	ldr	r2, [pc, #388]	; (8000f5c <WS2812_Send+0x290>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4861      	ldr	r0, [pc, #388]	; (8000f60 <WS2812_Send+0x294>)
 8000dda:	f006 f935 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.beltdatasentflag){};
 8000dde:	bf00      	nop
 8000de0:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <WS2812_Send+0x298>)
 8000de2:	7b1b      	ldrb	r3, [r3, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0fb      	beq.n	8000de0 <WS2812_Send+0x114>
		gv.beltdatasentflag = 0;
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <WS2812_Send+0x298>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	731a      	strb	r2, [r3, #12]
		break;
 8000dee:	e14a      	b.n	8001086 <WS2812_Send+0x3ba>

	case 1: // ring 1
		for (int i= 0; i<MAX_LED_RING; i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df4:	e040      	b.n	8000e78 <WS2812_Send+0x1ac>
		{
			color = ((Ring1_LED_Data[i][0]<<16) | (Ring1_LED_Data[i][1]<<8) | (Ring1_LED_Data[i][2]));
 8000df6:	495c      	ldr	r1, [pc, #368]	; (8000f68 <WS2812_Send+0x29c>)
 8000df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	0419      	lsls	r1, r3, #16
 8000e06:	4858      	ldr	r0, [pc, #352]	; (8000f68 <WS2812_Send+0x29c>)
 8000e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	4403      	add	r3, r0
 8000e12:	3301      	adds	r3, #1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	4853      	ldr	r0, [pc, #332]	; (8000f68 <WS2812_Send+0x29c>)
 8000e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	4403      	add	r3, r0
 8000e26:	3302      	adds	r3, #2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	60bb      	str	r3, [r7, #8]
			for (int i=23; i>=0; i--)
 8000e2e:	2317      	movs	r3, #23
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e32:	e01b      	b.n	8000e6c <WS2812_Send+0x1a0>
			{
				if (color&(1<<i)) ring1PwmData[indx] = LED_PWM_high;  // 2/3 of period
 8000e34:	2201      	movs	r2, #1
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <WS2812_Send+0x188>
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <WS2812_Send+0x2a0>)
 8000e48:	8819      	ldrh	r1, [r3, #0]
 8000e4a:	4a42      	ldr	r2, [pc, #264]	; (8000f54 <WS2812_Send+0x288>)
 8000e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e52:	e005      	b.n	8000e60 <WS2812_Send+0x194>
				else ring1PwmData[indx] = LED_PWM_low;  // 1/3 of period
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <WS2812_Send+0x2a4>)
 8000e56:	8819      	ldrh	r1, [r3, #0]
 8000e58:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <WS2812_Send+0x288>)
 8000e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8000e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e62:	3301      	adds	r3, #1
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
			for (int i=23; i>=0; i--)
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dae0      	bge.n	8000e34 <WS2812_Send+0x168>
		for (int i= 0; i<MAX_LED_RING; i++)
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	3301      	adds	r3, #1
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	2b1d      	cmp	r3, #29
 8000e7c:	ddbb      	ble.n	8000df6 <WS2812_Send+0x12a>
			}
		}
		for (int i=0; i<50; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	e00a      	b.n	8000e9a <WS2812_Send+0x1ce>
		{
			ring1PwmData[indx] = 0;
 8000e84:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <WS2812_Send+0x288>)
 8000e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e90:	3301      	adds	r3, #1
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i=0; i<50; i++)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	3301      	adds	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	2b31      	cmp	r3, #49	; 0x31
 8000e9e:	ddf1      	ble.n	8000e84 <WS2812_Send+0x1b8>
		}

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)ring1PwmData, indx);
 8000ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <WS2812_Send+0x288>)
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	482d      	ldr	r0, [pc, #180]	; (8000f60 <WS2812_Send+0x294>)
 8000eaa:	f006 f8cd 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.ring1datasentflag){};
 8000eae:	bf00      	nop
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <WS2812_Send+0x298>)
 8000eb2:	7b5b      	ldrb	r3, [r3, #13]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0fb      	beq.n	8000eb0 <WS2812_Send+0x1e4>
		gv.ring1datasentflag = 0;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <WS2812_Send+0x298>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	735a      	strb	r2, [r3, #13]

		break;
 8000ebe:	e0e2      	b.n	8001086 <WS2812_Send+0x3ba>

	case 2: // ring 2
	for (int i= 0; i<MAX_LED_RING; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	e040      	b.n	8000f48 <WS2812_Send+0x27c>
		{
			color = ((Ring2_LED_Data[i][0]<<16) | (Ring2_LED_Data[i][1]<<8) | (Ring2_LED_Data[i][2]));
 8000ec6:	492b      	ldr	r1, [pc, #172]	; (8000f74 <WS2812_Send+0x2a8>)
 8000ec8:	6a3a      	ldr	r2, [r7, #32]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0419      	lsls	r1, r3, #16
 8000ed6:	4827      	ldr	r0, [pc, #156]	; (8000f74 <WS2812_Send+0x2a8>)
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	4403      	add	r3, r0
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4319      	orrs	r1, r3
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <WS2812_Send+0x2a8>)
 8000eec:	6a3a      	ldr	r2, [r7, #32]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4403      	add	r3, r0
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	430b      	orrs	r3, r1
 8000efc:	60bb      	str	r3, [r7, #8]
			for (int i=23; i>=0; i--)
 8000efe:	2317      	movs	r3, #23
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e01b      	b.n	8000f3c <WS2812_Send+0x270>
			{
				if (color&(1<<i)) ring2PwmData[indx] = LED_PWM_high;  // 2/3 of period
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <WS2812_Send+0x258>
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <WS2812_Send+0x2a0>)
 8000f18:	8819      	ldrh	r1, [r3, #0]
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <WS2812_Send+0x28c>)
 8000f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f22:	e005      	b.n	8000f30 <WS2812_Send+0x264>
				else ring2PwmData[indx] = LED_PWM_low;  // 1/3 of period
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <WS2812_Send+0x2a4>)
 8000f26:	8819      	ldrh	r1, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <WS2812_Send+0x28c>)
 8000f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	3301      	adds	r3, #1
 8000f34:	647b      	str	r3, [r7, #68]	; 0x44
			for (int i=23; i>=0; i--)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dae0      	bge.n	8000f04 <WS2812_Send+0x238>
	for (int i= 0; i<MAX_LED_RING; i++)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	3301      	adds	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	2b1d      	cmp	r3, #29
 8000f4c:	ddbb      	ble.n	8000ec6 <WS2812_Send+0x1fa>
			}
		}
		for (int i=0; i<50; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	e01c      	b.n	8000f8e <WS2812_Send+0x2c2>
 8000f54:	20001b08 	.word	0x20001b08
 8000f58:	2000210c 	.word	0x2000210c
 8000f5c:	20000424 	.word	0x20000424
 8000f60:	20002e4c 	.word	0x20002e4c
 8000f64:	200001f0 	.word	0x200001f0
 8000f68:	2000036c 	.word	0x2000036c
 8000f6c:	200029ee 	.word	0x200029ee
 8000f70:	200029ec 	.word	0x200029ec
 8000f74:	200003c8 	.word	0x200003c8
		{
			ring2PwmData[indx] = 0;
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <WS2812_Send+0x3c4>)
 8000f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f84:	3301      	adds	r3, #1
 8000f86:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i=0; i<50; i++)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b31      	cmp	r3, #49	; 0x31
 8000f92:	ddf1      	ble.n	8000f78 <WS2812_Send+0x2ac>
		}

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)ring2PwmData, indx);
 8000f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <WS2812_Send+0x3c4>)
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	483d      	ldr	r0, [pc, #244]	; (8001094 <WS2812_Send+0x3c8>)
 8000f9e:	f006 f853 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.ring2datasentflag){};
 8000fa2:	bf00      	nop
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <WS2812_Send+0x3cc>)
 8000fa6:	7b9b      	ldrb	r3, [r3, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0fb      	beq.n	8000fa4 <WS2812_Send+0x2d8>
		gv.ring2datasentflag = 0;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <WS2812_Send+0x3cc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	739a      	strb	r2, [r3, #14]
		break;
 8000fb2:	e068      	b.n	8001086 <WS2812_Send+0x3ba>

	case 3: // Belt
		for (int i= 0; i<MAX_LED_BELT; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e040      	b.n	800103c <WS2812_Send+0x370>
		{
			color = ((Belt_LED_Data[i][0]<<16) | (Belt_LED_Data[i][1]<<8) | (Belt_LED_Data[i][2]));
 8000fba:	4938      	ldr	r1, [pc, #224]	; (800109c <WS2812_Send+0x3d0>)
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	0419      	lsls	r1, r3, #16
 8000fca:	4834      	ldr	r0, [pc, #208]	; (800109c <WS2812_Send+0x3d0>)
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4403      	add	r3, r0
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	4319      	orrs	r1, r3
 8000fde:	482f      	ldr	r0, [pc, #188]	; (800109c <WS2812_Send+0x3d0>)
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4403      	add	r3, r0
 8000fea:	3302      	adds	r3, #2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	60bb      	str	r3, [r7, #8]
			for (int i=23; i>=0; i--)
 8000ff2:	2317      	movs	r3, #23
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e01b      	b.n	8001030 <WS2812_Send+0x364>
			{
				if (color&(1<<i)) beltPwmData[indx] = LED_PWM_high;  // 2/3 of period
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <WS2812_Send+0x34c>
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <WS2812_Send+0x3d4>)
 800100c:	8819      	ldrh	r1, [r3, #0]
 800100e:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <WS2812_Send+0x3d8>)
 8001010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001012:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001016:	e005      	b.n	8001024 <WS2812_Send+0x358>
				else beltPwmData[indx] = LED_PWM_low;  // 1/3 of period
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <WS2812_Send+0x3dc>)
 800101a:	8819      	ldrh	r1, [r3, #0]
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <WS2812_Send+0x3d8>)
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8001024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001026:	3301      	adds	r3, #1
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
			for (int i=23; i>=0; i--)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	3b01      	subs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dae0      	bge.n	8000ff8 <WS2812_Send+0x32c>
		for (int i= 0; i<MAX_LED_BELT; i++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b77      	cmp	r3, #119	; 0x77
 8001040:	ddbb      	ble.n	8000fba <WS2812_Send+0x2ee>
			}
		}
		for (int i=0; i<50; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e00a      	b.n	800105e <WS2812_Send+0x392>
		{
			beltPwmData[indx] = 0;
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <WS2812_Send+0x3d8>)
 800104a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8001052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001054:	3301      	adds	r3, #1
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i=0; i<50; i++)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b31      	cmp	r3, #49	; 0x31
 8001062:	ddf1      	ble.n	8001048 <WS2812_Send+0x37c>
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)beltPwmData, indx);
 8001064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001066:	b29b      	uxth	r3, r3
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <WS2812_Send+0x3d8>)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <WS2812_Send+0x3c8>)
 800106e:	f005 ffeb 	bl	8007048 <HAL_TIM_PWM_Start_DMA>
		while (!gv.beltdatasentflag){};
 8001072:	bf00      	nop
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <WS2812_Send+0x3cc>)
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0fb      	beq.n	8001074 <WS2812_Send+0x3a8>
		gv.beltdatasentflag = 0;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <WS2812_Send+0x3cc>)
 800107e:	2200      	movs	r2, #0
 8001080:	731a      	strb	r2, [r3, #12]
		break;
 8001082:	e000      	b.n	8001086 <WS2812_Send+0x3ba>
	default : break;
 8001084:	bf00      	nop
	}


}
 8001086:	bf00      	nop
 8001088:	3748      	adds	r7, #72	; 0x48
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000210c 	.word	0x2000210c
 8001094:	20002e4c 	.word	0x20002e4c
 8001098:	200001f0 	.word	0x200001f0
 800109c:	20000204 	.word	0x20000204
 80010a0:	200029ee 	.word	0x200029ee
 80010a4:	20000424 	.word	0x20000424
 80010a8:	200029ec 	.word	0x200029ec

080010ac <Belt_Reset_LED>:


void Belt_Reset_LED (void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED_BELT; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	e01c      	b.n	80010f2 <Belt_Reset_LED+0x46>
	{
		Belt_LED_Data[i][0] = 0;
 80010b8:	4913      	ldr	r1, [pc, #76]	; (8001108 <Belt_Reset_LED+0x5c>)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		Belt_LED_Data[i][1] = 0;
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <Belt_Reset_LED+0x5c>)
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	3301      	adds	r3, #1
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
		Belt_LED_Data[i][2] = 0;
 80010da:	490b      	ldr	r1, [pc, #44]	; (8001108 <Belt_Reset_LED+0x5c>)
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	3302      	adds	r3, #2
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<MAX_LED_BELT; i++)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b77      	cmp	r3, #119	; 0x77
 80010f6:	dddf      	ble.n	80010b8 <Belt_Reset_LED+0xc>
	}
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000204 	.word	0x20000204

0800110c <Belt_Allset_LED>:

void Belt_Allset_LED (color _color)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	for (int i=0; i<MAX_LED_BELT; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e007      	b.n	800112a <Belt_Allset_LED+0x1e>
	{
		Set_LED (i, LED_BELT, _color);
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	2103      	movs	r1, #3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fd5a 	bl	8000bd8 <Set_LED>
	for (int i=0; i<MAX_LED_BELT; i++)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b77      	cmp	r3, #119	; 0x77
 800112e:	ddf4      	ble.n	800111a <Belt_Allset_LED+0xe>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <Ring1_Reset_LED>:

void Ring1_Reset_LED (void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED_RING; i++)
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e01c      	b.n	8001182 <Ring1_Reset_LED+0x46>
	{
		Ring1_LED_Data[i][0] = 0;
 8001148:	4913      	ldr	r1, [pc, #76]	; (8001198 <Ring1_Reset_LED+0x5c>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	440b      	add	r3, r1
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		Ring1_LED_Data[i][1] = 0;
 8001158:	490f      	ldr	r1, [pc, #60]	; (8001198 <Ring1_Reset_LED+0x5c>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	440b      	add	r3, r1
 8001164:	3301      	adds	r3, #1
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		Ring1_LED_Data[i][2] = 0;
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <Ring1_Reset_LED+0x5c>)
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	440b      	add	r3, r1
 8001176:	3302      	adds	r3, #2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<MAX_LED_RING; i++)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b1d      	cmp	r3, #29
 8001186:	dddf      	ble.n	8001148 <Ring1_Reset_LED+0xc>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000036c 	.word	0x2000036c

0800119c <Ring2_Reset_LED>:

void Ring2_Reset_LED (void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED_RING; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	e01c      	b.n	80011e2 <Ring2_Reset_LED+0x46>
	{
		Ring2_LED_Data[i][0] = 0;
 80011a8:	4913      	ldr	r1, [pc, #76]	; (80011f8 <Ring2_Reset_LED+0x5c>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
		Ring2_LED_Data[i][1] = 0;
 80011b8:	490f      	ldr	r1, [pc, #60]	; (80011f8 <Ring2_Reset_LED+0x5c>)
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	3301      	adds	r3, #1
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		Ring2_LED_Data[i][2] = 0;
 80011ca:	490b      	ldr	r1, [pc, #44]	; (80011f8 <Ring2_Reset_LED+0x5c>)
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	3302      	adds	r3, #2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<MAX_LED_RING; i++)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b1d      	cmp	r3, #29
 80011e6:	dddf      	ble.n	80011a8 <Ring2_Reset_LED+0xc>
	}
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200003c8 	.word	0x200003c8

080011fc <Belt_Rotate_Init>:

void Belt_Rotate_Init(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_LED_BELT; i += 10)
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	e03d      	b.n	8001284 <Belt_Rotate_Init+0x88>
	{
		Belt_LED_rotateData[i] = 50;
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <Belt_Rotate_Init+0x9c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2132      	movs	r1, #50	; 0x32
 800120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+1] = 50;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	4a20      	ldr	r2, [pc, #128]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001218:	2132      	movs	r1, #50	; 0x32
 800121a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+2] = 50;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3302      	adds	r3, #2
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001224:	2132      	movs	r1, #50	; 0x32
 8001226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+3] = 50;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3303      	adds	r3, #3
 800122e:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001230:	2132      	movs	r1, #50	; 0x32
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+4] = 50;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <Belt_Rotate_Init+0x9c>)
 800123c:	2132      	movs	r1, #50	; 0x32
 800123e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+5] = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3305      	adds	r3, #5
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001248:	2100      	movs	r1, #0
 800124a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+6] = 0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3306      	adds	r3, #6
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001254:	2100      	movs	r1, #0
 8001256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+7] = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3307      	adds	r3, #7
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001260:	2100      	movs	r1, #0
 8001262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+8] = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3308      	adds	r3, #8
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <Belt_Rotate_Init+0x9c>)
 800126c:	2100      	movs	r1, #0
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Belt_LED_rotateData[i+9] = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3309      	adds	r3, #9
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <Belt_Rotate_Init+0x9c>)
 8001278:	2100      	movs	r1, #0
 800127a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_LED_BELT; i += 10)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	330a      	adds	r3, #10
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b77      	cmp	r3, #119	; 0x77
 8001288:	ddbe      	ble.n	8001208 <Belt_Rotate_Init+0xc>
	}
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20002710 	.word	0x20002710

0800129c <Ring_Rotate_Init>:

void Ring_Rotate_Init(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_LED_RING; i += 5)
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e03c      	b.n	8001322 <Ring_Rotate_Init+0x86>
	{
		Ring1_LED_rotateData[i] = 50;
 80012a8:	4a23      	ldr	r2, [pc, #140]	; (8001338 <Ring_Rotate_Init+0x9c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2132      	movs	r1, #50	; 0x32
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+1] = 50;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a20      	ldr	r2, [pc, #128]	; (8001338 <Ring_Rotate_Init+0x9c>)
 80012b8:	2132      	movs	r1, #50	; 0x32
 80012ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+2] = 50;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3302      	adds	r3, #2
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <Ring_Rotate_Init+0x9c>)
 80012c4:	2132      	movs	r1, #50	; 0x32
 80012c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+3] = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3303      	adds	r3, #3
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <Ring_Rotate_Init+0x9c>)
 80012d0:	2100      	movs	r1, #0
 80012d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring1_LED_rotateData[i+4] = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <Ring_Rotate_Init+0x9c>)
 80012dc:	2100      	movs	r1, #0
 80012de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		Ring2_LED_rotateData[i] = 50;
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <Ring_Rotate_Init+0xa0>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2132      	movs	r1, #50	; 0x32
 80012e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+1] = 50;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <Ring_Rotate_Init+0xa0>)
 80012f2:	2132      	movs	r1, #50	; 0x32
 80012f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+2] = 50;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <Ring_Rotate_Init+0xa0>)
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+3] = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3303      	adds	r3, #3
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <Ring_Rotate_Init+0xa0>)
 800130a:	2100      	movs	r1, #0
 800130c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Ring2_LED_rotateData[i+4] = 0;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3304      	adds	r3, #4
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <Ring_Rotate_Init+0xa0>)
 8001316:	2100      	movs	r1, #0
 8001318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_LED_RING; i += 5)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3305      	adds	r3, #5
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b1d      	cmp	r3, #29
 8001326:	ddbf      	ble.n	80012a8 <Ring_Rotate_Init+0xc>

	}
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200028f4 	.word	0x200028f4
 800133c:	20002970 	.word	0x20002970

08001340 <Belt_Toggle_LED>:

static uint8_t beltToggle;
void Belt_Toggle_LED (color _color)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if(beltToggle == 0)
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <Belt_Toggle_LED+0x30>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <Belt_Toggle_LED+0x1c>
	{
		Belt_Reset_LED();
 8001350:	f7ff feac 	bl	80010ac <Belt_Reset_LED>
		beltToggle = 1;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <Belt_Toggle_LED+0x30>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	else
	{
		Belt_Allset_LED (_color);
		beltToggle = 0;
	}
}
 800135a:	e005      	b.n	8001368 <Belt_Toggle_LED+0x28>
		Belt_Allset_LED (_color);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fed5 	bl	800110c <Belt_Allset_LED>
		beltToggle = 0;
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <Belt_Toggle_LED+0x30>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200029f0 	.word	0x200029f0

08001374 <Set_LED_violet>:

void Set_LED_violet(uint8_t lednumber ,uint8_t led, uint8_t brightness)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]
	color SetColor;
	SetColor.Red = brightness;
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	733b      	strb	r3, [r7, #12]
	SetColor.Green = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	737b      	strb	r3, [r7, #13]
	SetColor.Blue = brightness;
 800138e:	797b      	ldrb	r3, [r7, #5]
 8001390:	73bb      	strb	r3, [r7, #14]

	Set_LED(lednumber,led,SetColor);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	79b9      	ldrb	r1, [r7, #6]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc1d 	bl	8000bd8 <Set_LED>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <Set_LED_red>:
	SetColor.Green = brightness;
	SetColor.Blue = 0;
	Set_LED(lednumber,led,SetColor);
}
void Set_LED_red(uint8_t lednumber ,uint8_t led, uint8_t brightness)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
	color SetColor;
	SetColor.Red = brightness;
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	733b      	strb	r3, [r7, #12]
	SetColor.Green = brightness*0.2;
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f9d1 	bl	8000768 <__aeabi_i2d>
 80013c6:	a30e      	add	r3, pc, #56	; (adr r3, 8001400 <Set_LED_red+0x58>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7fe ff50 	bl	8000270 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fa30 	bl	800083c <__aeabi_d2uiz>
 80013dc:	4603      	mov	r3, r0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
	SetColor.Blue = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73bb      	strb	r3, [r7, #14]
	Set_LED(lednumber,led,SetColor);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	79b9      	ldrb	r1, [r7, #6]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fbf3 	bl	8000bd8 <Set_LED>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	9999999a 	.word	0x9999999a
 8001404:	3fc99999 	.word	0x3fc99999

08001408 <Set_LED_yellow>:
void Set_LED_yellow(uint8_t lednumber ,uint8_t led, uint8_t brightness)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	460b      	mov	r3, r1
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	4613      	mov	r3, r2
 8001418:	717b      	strb	r3, [r7, #5]
	color SetColor;
	SetColor.Red = brightness;
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	733b      	strb	r3, [r7, #12]
	SetColor.Green = brightness*0.5;
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f9a1 	bl	8000768 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <Set_LED_yellow+0x54>)
 800142c:	f7fe ff20 	bl	8000270 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fa00 	bl	800083c <__aeabi_d2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	737b      	strb	r3, [r7, #13]
	SetColor.Blue = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	73bb      	strb	r3, [r7, #14]
	Set_LED(lednumber,led,SetColor);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	79b9      	ldrb	r1, [r7, #6]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fbc3 	bl	8000bd8 <Set_LED>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	3fe00000 	.word	0x3fe00000

08001460 <Set_LED_white>:
void Set_LED_white(uint8_t lednumber ,uint8_t led, uint8_t brightness)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
	color SetColor;
	SetColor.Red = brightness;
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	733b      	strb	r3, [r7, #12]
	SetColor.Green = brightness*0.8;
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f975 	bl	8000768 <__aeabi_i2d>
 800147e:	a316      	add	r3, pc, #88	; (adr r3, 80014d8 <Set_LED_white+0x78>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fef4 	bl	8000270 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff f9d4 	bl	800083c <__aeabi_d2uiz>
 8001494:	4603      	mov	r3, r0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	737b      	strb	r3, [r7, #13]
	SetColor.Blue = brightness*0.6;
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f963 	bl	8000768 <__aeabi_i2d>
 80014a2:	a30f      	add	r3, pc, #60	; (adr r3, 80014e0 <Set_LED_white+0x80>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fee2 	bl	8000270 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff f9c2 	bl	800083c <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	73bb      	strb	r3, [r7, #14]

	Set_LED(lednumber,led,SetColor);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	79b9      	ldrb	r1, [r7, #6]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fb87 	bl	8000bd8 <Set_LED>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fe99999 	.word	0x3fe99999
 80014e0:	33333333 	.word	0x33333333
 80014e4:	3fe33333 	.word	0x3fe33333

080014e8 <GetColorCode>:
	SetColor.Blue = 0;
	Set_LED(lednumber,led,SetColor);
}

color GetColorCode(uint8_t colorselect)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	color code = {0,0,0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	723b      	strb	r3, [r7, #8]
 80014f6:	2300      	movs	r3, #0
 80014f8:	727b      	strb	r3, [r7, #9]
 80014fa:	2300      	movs	r3, #0
 80014fc:	72bb      	strb	r3, [r7, #10]
	switch (colorselect)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	3b02      	subs	r3, #2
 8001502:	2b05      	cmp	r3, #5
 8001504:	d838      	bhi.n	8001578 <GetColorCode+0x90>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <GetColorCode+0x24>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800156b 	.word	0x0800156b
 8001510:	0800154f 	.word	0x0800154f
 8001514:	08001525 	.word	0x08001525
 8001518:	08001533 	.word	0x08001533
 800151c:	08001541 	.word	0x08001541
 8001520:	0800155d 	.word	0x0800155d
	{
	case COLORRED:
		code.Red = 150;
 8001524:	2396      	movs	r3, #150	; 0x96
 8001526:	723b      	strb	r3, [r7, #8]
		code.Green = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	727b      	strb	r3, [r7, #9]
		code.Blue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	72bb      	strb	r3, [r7, #10]
		break;
 8001530:	e029      	b.n	8001586 <GetColorCode+0x9e>

	case COLORSKYBLUE:
		code.Red = 20;
 8001532:	2314      	movs	r3, #20
 8001534:	723b      	strb	r3, [r7, #8]
		code.Green = 70;
 8001536:	2346      	movs	r3, #70	; 0x46
 8001538:	727b      	strb	r3, [r7, #9]
		code.Blue = 70;
 800153a:	2346      	movs	r3, #70	; 0x46
 800153c:	72bb      	strb	r3, [r7, #10]
		break;
 800153e:	e022      	b.n	8001586 <GetColorCode+0x9e>

	case COLORVIOLET:
		code.Red = 75;
 8001540:	234b      	movs	r3, #75	; 0x4b
 8001542:	723b      	strb	r3, [r7, #8]
		code.Green = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	727b      	strb	r3, [r7, #9]
		code.Blue = 75;
 8001548:	234b      	movs	r3, #75	; 0x4b
 800154a:	72bb      	strb	r3, [r7, #10]
		break;
 800154c:	e01b      	b.n	8001586 <GetColorCode+0x9e>

	case COLORORANGE:
		code.Red = 130;
 800154e:	2382      	movs	r3, #130	; 0x82
 8001550:	723b      	strb	r3, [r7, #8]
		code.Green = 20;
 8001552:	2314      	movs	r3, #20
 8001554:	727b      	strb	r3, [r7, #9]
		code.Blue = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	72bb      	strb	r3, [r7, #10]
		break;
 800155a:	e014      	b.n	8001586 <GetColorCode+0x9e>

	case COLORGREEN:
		code.Red = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	723b      	strb	r3, [r7, #8]
		code.Green = 150;
 8001560:	2396      	movs	r3, #150	; 0x96
 8001562:	727b      	strb	r3, [r7, #9]
		code.Blue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	72bb      	strb	r3, [r7, #10]
		break;
 8001568:	e00d      	b.n	8001586 <GetColorCode+0x9e>

	case COLOROFF:
		code.Red = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	723b      	strb	r3, [r7, #8]
		code.Green = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	727b      	strb	r3, [r7, #9]
		code.Blue = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	72bb      	strb	r3, [r7, #10]
		break;
 8001576:	e006      	b.n	8001586 <GetColorCode+0x9e>

	default: // COLORORANGE
		code.Red = 130;
 8001578:	2382      	movs	r3, #130	; 0x82
 800157a:	723b      	strb	r3, [r7, #8]
		code.Green = 20;
 800157c:	2314      	movs	r3, #20
 800157e:	727b      	strb	r3, [r7, #9]
		code.Blue = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	72bb      	strb	r3, [r7, #10]
		break;
 8001584:	bf00      	nop

	}

	return code;
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	f107 0208 	add.w	r2, r7, #8
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	4611      	mov	r1, r2
 8001592:	8019      	strh	r1, [r3, #0]
 8001594:	3302      	adds	r3, #2
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	7b3a      	ldrb	r2, [r7, #12]
 800159e:	f362 0307 	bfi	r3, r2, #0, #8
 80015a2:	7b7a      	ldrb	r2, [r7, #13]
 80015a4:	f362 230f 	bfi	r3, r2, #8, #8
 80015a8:	7bba      	ldrb	r2, [r7, #14]
 80015aa:	f362 4317 	bfi	r3, r2, #16, #8
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <Belt_MODE_breathing>:

uint8_t Belt_Brightness;
uint8_t Belt_Brightness_flag;
void Belt_MODE_breathing(uint8_t maxBrightness, color _color)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
	color setled;
	if(Belt_Brightness_flag == 0)
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <Belt_MODE_breathing+0xb8>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <Belt_MODE_breathing+0x30>
	{
		Belt_Brightness++;
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <Belt_MODE_breathing+0xbc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <Belt_MODE_breathing+0xbc>)
 80015da:	701a      	strb	r2, [r3, #0]
		if(Belt_Brightness > maxBrightness) Belt_Brightness_flag = 1;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <Belt_MODE_breathing+0xbc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d202      	bcs.n	80015ec <Belt_MODE_breathing+0x30>
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <Belt_MODE_breathing+0xb8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
	}

	if(Belt_Brightness_flag == 1)
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <Belt_MODE_breathing+0xb8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <Belt_MODE_breathing+0x52>
	{
		Belt_Brightness--;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <Belt_MODE_breathing+0xbc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <Belt_MODE_breathing+0xbc>)
 80015fe:	701a      	strb	r2, [r3, #0]
		if(Belt_Brightness <= 0) Belt_Brightness_flag = 0;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <Belt_MODE_breathing+0xbc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <Belt_MODE_breathing+0x52>
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <Belt_MODE_breathing+0xb8>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	}

	for(int j = 0; j<MAX_LED_BELT; j++)
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e025      	b.n	8001660 <Belt_MODE_breathing+0xa4>
	{
		setled.Red = (Belt_Brightness*_color.Red)/maxBrightness;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <Belt_MODE_breathing+0xbc>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	783a      	ldrb	r2, [r7, #0]
 800161a:	fb03 f202 	mul.w	r2, r3, r2
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	fb92 f3f3 	sdiv	r3, r2, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	723b      	strb	r3, [r7, #8]
		setled.Green = (Belt_Brightness*_color.Green)/maxBrightness;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <Belt_MODE_breathing+0xbc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	787a      	ldrb	r2, [r7, #1]
 800162e:	fb03 f202 	mul.w	r2, r3, r2
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	fb92 f3f3 	sdiv	r3, r2, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	727b      	strb	r3, [r7, #9]
		setled.Blue = (Belt_Brightness*_color.Blue)/maxBrightness;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <Belt_MODE_breathing+0xbc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	78ba      	ldrb	r2, [r7, #2]
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	fb92 f3f3 	sdiv	r3, r2, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	72bb      	strb	r3, [r7, #10]

		Set_LED(j,LED_BELT,setled);
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	2103      	movs	r1, #3
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fabf 	bl	8000bd8 <Set_LED>
	for(int j = 0; j<MAX_LED_BELT; j++)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b77      	cmp	r3, #119	; 0x77
 8001664:	ddd6      	ble.n	8001614 <Belt_MODE_breathing+0x58>
	}
	WS2812_Send(LED_BELT);
 8001666:	2003      	movs	r0, #3
 8001668:	f7ff fb30 	bl	8000ccc <WS2812_Send>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200029f2 	.word	0x200029f2
 8001678:	200029f1 	.word	0x200029f1

0800167c <reverse>:

void reverse(int32_t arr[], int start, int end)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	int temp;
    end = end - 1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
    while (start < end) {
 800168e:	e01b      	b.n	80016c8 <reverse+0x4c>
        temp = arr[start];
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	617b      	str	r3, [r7, #20]
        arr[start] = arr[end];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	441a      	add	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	68f9      	ldr	r1, [r7, #12]
 80016aa:	440b      	add	r3, r1
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	601a      	str	r2, [r3, #0]
        arr[end] = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
        start++;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3301      	adds	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
        end--;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
    while (start < end) {
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbdf      	blt.n	8001690 <reverse+0x14>
    }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <shiftRight>:
void shiftRight(int32_t arr[], int d, int n)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
    reverse(arr, 0, n - d);
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ffc1 	bl	800167c <reverse>
    reverse(arr, n - d, n);
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4619      	mov	r1, r3
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff ffb9 	bl	800167c <reverse>
    reverse(arr, 0, n);
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	2100      	movs	r1, #0
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff ffb4 	bl	800167c <reverse>
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <shiftLeft>:

void shiftLeft(int32_t arr[], int d, int n)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
    reverse(arr, 0, d);
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	2100      	movs	r1, #0
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff ffa5 	bl	800167c <reverse>
    reverse(arr, d, n);
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff ffa0 	bl	800167c <reverse>
    reverse(arr, 0, n);
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	2100      	movs	r1, #0
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ff9b 	bl	800167c <reverse>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <Belt_MODE_rotation>:
void Belt_MODE_rotation(uint8_t direction, color _color)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
	if (direction == 0)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <Belt_MODE_rotation+0x40>
	{
		shiftLeft(Belt_LED_rotateData, 1, MAX_LED_BELT);
 8001762:	2278      	movs	r2, #120	; 0x78
 8001764:	2101      	movs	r1, #1
 8001766:	4817      	ldr	r0, [pc, #92]	; (80017c4 <Belt_MODE_rotation+0x74>)
 8001768:	f7ff ffd8 	bl	800171c <shiftLeft>

		for(int i = 0; i < MAX_LED_BELT; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e007      	b.n	8001782 <Belt_MODE_rotation+0x32>
		{
			Set_LED(i,LED_BELT,_color);
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	2103      	movs	r1, #3
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff fa2e 	bl	8000bd8 <Set_LED>
		for(int i = 0; i < MAX_LED_BELT; i++)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b77      	cmp	r3, #119	; 0x77
 8001786:	ddf4      	ble.n	8001772 <Belt_MODE_rotation+0x22>
		}
		WS2812_Send(LED_BELT);
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff fa9f 	bl	8000ccc <WS2812_Send>
		{
			Set_LED(i,LED_BELT,_color);
		}
		WS2812_Send(LED_BELT);
	}
}
 800178e:	e015      	b.n	80017bc <Belt_MODE_rotation+0x6c>
		shiftRight(Belt_LED_rotateData, 1, MAX_LED_BELT);
 8001790:	2278      	movs	r2, #120	; 0x78
 8001792:	2101      	movs	r1, #1
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <Belt_MODE_rotation+0x74>)
 8001796:	f7ff ffa2 	bl	80016de <shiftRight>
		for(int i = 0; i < MAX_LED_BELT; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e007      	b.n	80017b0 <Belt_MODE_rotation+0x60>
			Set_LED(i,LED_BELT,_color);
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	2103      	movs	r1, #3
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f7ff fa17 	bl	8000bd8 <Set_LED>
		for(int i = 0; i < MAX_LED_BELT; i++)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b77      	cmp	r3, #119	; 0x77
 80017b4:	ddf4      	ble.n	80017a0 <Belt_MODE_rotation+0x50>
		WS2812_Send(LED_BELT);
 80017b6:	2003      	movs	r0, #3
 80017b8:	f7ff fa88 	bl	8000ccc <WS2812_Send>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20002710 	.word	0x20002710

080017c8 <Ring1_MODE_breathing>:


uint8_t Ring1_Brightness;
uint8_t Ring1_Brightness_flag;
void Ring1_MODE_breathing(uint8_t maxBrightness)//left
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 60;
 80017d2:	233c      	movs	r3, #60	; 0x3c
 80017d4:	72fb      	strb	r3, [r7, #11]

	if(Ring1_Brightness_flag == 0)
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <Ring1_MODE_breathing+0x8c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d110      	bne.n	8001800 <Ring1_MODE_breathing+0x38>
	{
		Ring1_Brightness++;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <Ring1_MODE_breathing+0x90>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <Ring1_MODE_breathing+0x90>)
 80017e8:	701a      	strb	r2, [r3, #0]
		if(Ring1_Brightness >= maxBrightness+offset)
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <Ring1_MODE_breathing+0x90>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	4413      	add	r3, r2
 80017f6:	4299      	cmp	r1, r3
 80017f8:	db02      	blt.n	8001800 <Ring1_MODE_breathing+0x38>
		{
			Ring1_Brightness_flag = 1;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <Ring1_MODE_breathing+0x8c>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Ring1_Brightness_flag == 1)
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <Ring1_MODE_breathing+0x8c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10d      	bne.n	8001824 <Ring1_MODE_breathing+0x5c>
	{
		Ring1_Brightness--;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <Ring1_MODE_breathing+0x90>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <Ring1_MODE_breathing+0x90>)
 8001812:	701a      	strb	r2, [r3, #0]
		if(Ring1_Brightness <= offset)
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <Ring1_MODE_breathing+0x90>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	7afa      	ldrb	r2, [r7, #11]
 800181a:	429a      	cmp	r2, r3
 800181c:	d302      	bcc.n	8001824 <Ring1_MODE_breathing+0x5c>
		{
			Ring1_Brightness_flag = 0;
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <Ring1_MODE_breathing+0x8c>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
		}
	}


	for(int j = 0; j<MAX_LED_RING; j++)
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e00a      	b.n	8001840 <Ring1_MODE_breathing+0x78>
	{
	  	Set_LED_white(j,LED_RING1,Ring1_Brightness);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <Ring1_MODE_breathing+0x90>)
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe13 	bl	8001460 <Set_LED_white>
	for(int j = 0; j<MAX_LED_RING; j++)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b1d      	cmp	r3, #29
 8001844:	ddf1      	ble.n	800182a <Ring1_MODE_breathing+0x62>
	}
	WS2812_Send(LED_RING1);
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fa40 	bl	8000ccc <WS2812_Send>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200029f4 	.word	0x200029f4
 8001858:	200029f3 	.word	0x200029f3

0800185c <Ring1_MODE_rotation>:

void Ring1_MODE_rotation(uint8_t direction)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	if (direction == 0)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11c      	bne.n	80018a6 <Ring1_MODE_rotation+0x4a>
	{
		shiftLeft(Ring1_LED_rotateData, 1, MAX_LED_RING);
 800186c:	221e      	movs	r2, #30
 800186e:	2101      	movs	r1, #1
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <Ring1_MODE_rotation+0x8c>)
 8001872:	f7ff ff53 	bl	800171c <shiftLeft>

		for(int i = 0; i < MAX_LED_RING; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e00d      	b.n	8001898 <Ring1_MODE_rotation+0x3c>
		{
			Set_LED_violet(i,LED_RING1,Ring1_LED_rotateData[i]);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b2d8      	uxtb	r0, r3
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <Ring1_MODE_rotation+0x8c>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	2101      	movs	r1, #1
 800188e:	f7ff fd71 	bl	8001374 <Set_LED_violet>
		for(int i = 0; i < MAX_LED_RING; i++)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b1d      	cmp	r3, #29
 800189c:	ddee      	ble.n	800187c <Ring1_MODE_rotation+0x20>
		}
		WS2812_Send(LED_RING1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fa14 	bl	8000ccc <WS2812_Send>
		{
			Set_LED_violet(i,LED_RING1,Ring1_LED_rotateData[i]);
		}
		WS2812_Send(LED_RING1);
	}
}
 80018a4:	e01b      	b.n	80018de <Ring1_MODE_rotation+0x82>
		shiftRight(Ring1_LED_rotateData, 1, MAX_LED_RING);
 80018a6:	221e      	movs	r2, #30
 80018a8:	2101      	movs	r1, #1
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <Ring1_MODE_rotation+0x8c>)
 80018ac:	f7ff ff17 	bl	80016de <shiftRight>
		for(int i = 0; i < MAX_LED_RING; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	e00d      	b.n	80018d2 <Ring1_MODE_rotation+0x76>
			Set_LED_violet(i,LED_RING1,Ring1_LED_rotateData[i]);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	b2d8      	uxtb	r0, r3
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <Ring1_MODE_rotation+0x8c>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	f7ff fd54 	bl	8001374 <Set_LED_violet>
		for(int i = 0; i < MAX_LED_RING; i++)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b1d      	cmp	r3, #29
 80018d6:	ddee      	ble.n	80018b6 <Ring1_MODE_rotation+0x5a>
		WS2812_Send(LED_RING1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff f9f7 	bl	8000ccc <WS2812_Send>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200028f4 	.word	0x200028f4

080018ec <Ring2_MODE_breathing>:

uint8_t Ring2_Brightness;
uint8_t Ring2_Brightness_flag;
void Ring2_MODE_breathing(uint8_t maxBrightness)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 60;
 80018f6:	233c      	movs	r3, #60	; 0x3c
 80018f8:	72fb      	strb	r3, [r7, #11]
	if(Ring2_Brightness_flag == 0)
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <Ring2_MODE_breathing+0x8c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d110      	bne.n	8001924 <Ring2_MODE_breathing+0x38>
	{
		Ring2_Brightness++;
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <Ring2_MODE_breathing+0x90>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <Ring2_MODE_breathing+0x90>)
 800190c:	701a      	strb	r2, [r3, #0]
		if(Ring2_Brightness >= maxBrightness + offset)
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <Ring2_MODE_breathing+0x90>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	4413      	add	r3, r2
 800191a:	4299      	cmp	r1, r3
 800191c:	db02      	blt.n	8001924 <Ring2_MODE_breathing+0x38>
		{
			Ring2_Brightness_flag = 1;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <Ring2_MODE_breathing+0x8c>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Ring2_Brightness_flag == 1)
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <Ring2_MODE_breathing+0x8c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10d      	bne.n	8001948 <Ring2_MODE_breathing+0x5c>
	{
		Ring2_Brightness--;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <Ring2_MODE_breathing+0x90>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <Ring2_MODE_breathing+0x90>)
 8001936:	701a      	strb	r2, [r3, #0]
		if(Ring2_Brightness <= offset)
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <Ring2_MODE_breathing+0x90>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	7afa      	ldrb	r2, [r7, #11]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <Ring2_MODE_breathing+0x5c>
		{
			Ring2_Brightness_flag = 0;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <Ring2_MODE_breathing+0x8c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
		}
	}


	for(int j = 0; j<MAX_LED_RING; j++)
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e00a      	b.n	8001964 <Ring2_MODE_breathing+0x78>
	{
		Set_LED_white(j,LED_RING2,Ring2_Brightness);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <Ring2_MODE_breathing+0x90>)
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	2102      	movs	r1, #2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fd81 	bl	8001460 <Set_LED_white>
	for(int j = 0; j<MAX_LED_RING; j++)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b1d      	cmp	r3, #29
 8001968:	ddf1      	ble.n	800194e <Ring2_MODE_breathing+0x62>
	}
	WS2812_Send(LED_RING2);
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff f9ae 	bl	8000ccc <WS2812_Send>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200029f6 	.word	0x200029f6
 800197c:	200029f5 	.word	0x200029f5

08001980 <Ring2_MODE_rotation>:

void Ring2_MODE_rotation(uint8_t direction)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	if (direction == 0)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d11c      	bne.n	80019ca <Ring2_MODE_rotation+0x4a>
	{
		shiftLeft(Ring2_LED_rotateData, 1, MAX_LED_RING);
 8001990:	221e      	movs	r2, #30
 8001992:	2101      	movs	r1, #1
 8001994:	481d      	ldr	r0, [pc, #116]	; (8001a0c <Ring2_MODE_rotation+0x8c>)
 8001996:	f7ff fec1 	bl	800171c <shiftLeft>

		for(int i = 0; i < MAX_LED_RING; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00d      	b.n	80019bc <Ring2_MODE_rotation+0x3c>
		{
			Set_LED_violet(i,LED_RING2,Ring2_LED_rotateData[i]);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <Ring2_MODE_rotation+0x8c>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	2102      	movs	r1, #2
 80019b2:	f7ff fcdf 	bl	8001374 <Set_LED_violet>
		for(int i = 0; i < MAX_LED_RING; i++)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b1d      	cmp	r3, #29
 80019c0:	ddee      	ble.n	80019a0 <Ring2_MODE_rotation+0x20>
		}
		WS2812_Send(LED_RING2);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f7ff f982 	bl	8000ccc <WS2812_Send>
		{
			Set_LED_violet(i,LED_RING2,Ring2_LED_rotateData[i]);
		}
		WS2812_Send(LED_RING2);
	}
}
 80019c8:	e01b      	b.n	8001a02 <Ring2_MODE_rotation+0x82>
		shiftRight(Ring2_LED_rotateData, 1, MAX_LED_RING);
 80019ca:	221e      	movs	r2, #30
 80019cc:	2101      	movs	r1, #1
 80019ce:	480f      	ldr	r0, [pc, #60]	; (8001a0c <Ring2_MODE_rotation+0x8c>)
 80019d0:	f7ff fe85 	bl	80016de <shiftRight>
		for(int i = 0; i < MAX_LED_RING; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	e00d      	b.n	80019f6 <Ring2_MODE_rotation+0x76>
			Set_LED_violet(i,LED_RING2,Ring2_LED_rotateData[i]);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	b2d8      	uxtb	r0, r3
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <Ring2_MODE_rotation+0x8c>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	2102      	movs	r1, #2
 80019ec:	f7ff fcc2 	bl	8001374 <Set_LED_violet>
		for(int i = 0; i < MAX_LED_RING; i++)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b1d      	cmp	r3, #29
 80019fa:	ddee      	ble.n	80019da <Ring2_MODE_rotation+0x5a>
		WS2812_Send(LED_RING2);
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7ff f965 	bl	8000ccc <WS2812_Send>
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20002970 	.word	0x20002970

08001a10 <ShowBatteryStatus>:
	MATRIX2_Write_Char(0, DOT_DEFAULT);
	MATRIX1_Write_Char(0, DOT_DEFAULT);
}

void ShowBatteryStatus(uint8_t batteryLevel)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	if(batteryLevel > 100)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d925      	bls.n	8001a6c <ShowBatteryStatus+0x5c>
	{
		MATRIX1_Write_Char(0, DOT_N);
 8001a20:	2104      	movs	r1, #4
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 f802 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_N);
 8001a28:	2104      	movs	r1, #4
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f001 f998 	bl	8002d60 <MATRIX2_Write_Char>

		for(int j = 0; j<MAX_LED_RING; j++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
 8001a34:	e010      	b.n	8001a58 <ShowBatteryStatus+0x48>
		{
			Set_LED_violet(j,LED_RING1,100);
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2264      	movs	r2, #100	; 0x64
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fc98 	bl	8001374 <Set_LED_violet>
			Set_LED_violet(j,LED_RING2,100);
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2264      	movs	r2, #100	; 0x64
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc91 	bl	8001374 <Set_LED_violet>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	3301      	adds	r3, #1
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
 8001a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5a:	2b1d      	cmp	r3, #29
 8001a5c:	ddeb      	ble.n	8001a36 <ShowBatteryStatus+0x26>
		}
		WS2812_Send(LED_RING1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff f934 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);		//ovf error
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7ff f931 	bl	8000ccc <WS2812_Send>
			Set_LED_violet(j,LED_RING2,100);
		}
		WS2812_Send(LED_RING1);
		WS2812_Send(LED_RING2);		//ovf error
	}
}
 8001a6a:	e1ae      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 100) && (batteryLevel > 90))
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d828      	bhi.n	8001ac4 <ShowBatteryStatus+0xb4>
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b5a      	cmp	r3, #90	; 0x5a
 8001a76:	d925      	bls.n	8001ac4 <ShowBatteryStatus+0xb4>
		MATRIX1_Write_Char(0, DOT_BATT_FULL);
 8001a78:	210b      	movs	r1, #11
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 ffd6 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_FULL);
 8001a80:	210b      	movs	r1, #11
 8001a82:	2000      	movs	r0, #0
 8001a84:	f001 f96c 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8c:	e010      	b.n	8001ab0 <ShowBatteryStatus+0xa0>
			Set_LED_white(j,LED_RING1,100);
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fce2 	bl	8001460 <Set_LED_white>
			Set_LED_white(j,LED_RING2,100);
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2264      	movs	r2, #100	; 0x64
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fcdb 	bl	8001460 <Set_LED_white>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	3301      	adds	r3, #1
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	2b1d      	cmp	r3, #29
 8001ab4:	ddeb      	ble.n	8001a8e <ShowBatteryStatus+0x7e>
		WS2812_Send(LED_RING1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff f908 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff f905 	bl	8000ccc <WS2812_Send>
 8001ac2:	e182      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 90) && (batteryLevel > 80))
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b5a      	cmp	r3, #90	; 0x5a
 8001ac8:	d828      	bhi.n	8001b1c <ShowBatteryStatus+0x10c>
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b50      	cmp	r3, #80	; 0x50
 8001ace:	d925      	bls.n	8001b1c <ShowBatteryStatus+0x10c>
		MATRIX1_Write_Char(0, DOT_BATT_NINE);
 8001ad0:	210c      	movs	r1, #12
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 ffaa 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_NINE);
 8001ad8:	210c      	movs	r1, #12
 8001ada:	2000      	movs	r0, #0
 8001adc:	f001 f940 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	e010      	b.n	8001b08 <ShowBatteryStatus+0xf8>
			Set_LED_white(j,LED_RING1,100);
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2264      	movs	r2, #100	; 0x64
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fcb6 	bl	8001460 <Set_LED_white>
			Set_LED_white(j,LED_RING2,100);
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2264      	movs	r2, #100	; 0x64
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fcaf 	bl	8001460 <Set_LED_white>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	3301      	adds	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	2b1d      	cmp	r3, #29
 8001b0c:	ddeb      	ble.n	8001ae6 <ShowBatteryStatus+0xd6>
		WS2812_Send(LED_RING1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff f8dc 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7ff f8d9 	bl	8000ccc <WS2812_Send>
 8001b1a:	e156      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 80) && (batteryLevel > 70))
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b50      	cmp	r3, #80	; 0x50
 8001b20:	d828      	bhi.n	8001b74 <ShowBatteryStatus+0x164>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b46      	cmp	r3, #70	; 0x46
 8001b26:	d925      	bls.n	8001b74 <ShowBatteryStatus+0x164>
		MATRIX1_Write_Char(0, DOT_BATT_EIGHT);
 8001b28:	210d      	movs	r1, #13
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 ff7e 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_EIGHT);
 8001b30:	210d      	movs	r1, #13
 8001b32:	2000      	movs	r0, #0
 8001b34:	f001 f914 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	e010      	b.n	8001b60 <ShowBatteryStatus+0x150>
			Set_LED_white(j,LED_RING1,100);
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2264      	movs	r2, #100	; 0x64
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc8a 	bl	8001460 <Set_LED_white>
			Set_LED_white(j,LED_RING2,100);
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2264      	movs	r2, #100	; 0x64
 8001b52:	2102      	movs	r1, #2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fc83 	bl	8001460 <Set_LED_white>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	2b1d      	cmp	r3, #29
 8001b64:	ddeb      	ble.n	8001b3e <ShowBatteryStatus+0x12e>
		WS2812_Send(LED_RING1);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff f8b0 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f7ff f8ad 	bl	8000ccc <WS2812_Send>
 8001b72:	e12a      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 70) && (batteryLevel > 60))
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b46      	cmp	r3, #70	; 0x46
 8001b78:	d828      	bhi.n	8001bcc <ShowBatteryStatus+0x1bc>
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b3c      	cmp	r3, #60	; 0x3c
 8001b7e:	d925      	bls.n	8001bcc <ShowBatteryStatus+0x1bc>
		MATRIX1_Write_Char(0, DOT_BATT_SEVEN);
 8001b80:	210e      	movs	r1, #14
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 ff52 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_SEVEN);
 8001b88:	210e      	movs	r1, #14
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f001 f8e8 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	e010      	b.n	8001bb8 <ShowBatteryStatus+0x1a8>
			Set_LED_white(j,LED_RING1,100);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2264      	movs	r2, #100	; 0x64
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fc5e 	bl	8001460 <Set_LED_white>
			Set_LED_white(j,LED_RING2,100);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2264      	movs	r2, #100	; 0x64
 8001baa:	2102      	movs	r1, #2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fc57 	bl	8001460 <Set_LED_white>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	2b1d      	cmp	r3, #29
 8001bbc:	ddeb      	ble.n	8001b96 <ShowBatteryStatus+0x186>
		WS2812_Send(LED_RING1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff f884 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7ff f881 	bl	8000ccc <WS2812_Send>
 8001bca:	e0fe      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 60) && (batteryLevel > 50))
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	2b3c      	cmp	r3, #60	; 0x3c
 8001bd0:	d828      	bhi.n	8001c24 <ShowBatteryStatus+0x214>
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b32      	cmp	r3, #50	; 0x32
 8001bd6:	d925      	bls.n	8001c24 <ShowBatteryStatus+0x214>
		MATRIX1_Write_Char(0, DOT_BATT_SIX);
 8001bd8:	210f      	movs	r1, #15
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 ff26 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_SIX);
 8001be0:	210f      	movs	r1, #15
 8001be2:	2000      	movs	r0, #0
 8001be4:	f001 f8bc 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	e010      	b.n	8001c10 <ShowBatteryStatus+0x200>
			Set_LED_yellow(j,LED_RING1,100);
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2264      	movs	r2, #100	; 0x64
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fc06 	bl	8001408 <Set_LED_yellow>
			Set_LED_yellow(j,LED_RING2,100);
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2264      	movs	r2, #100	; 0x64
 8001c02:	2102      	movs	r1, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbff 	bl	8001408 <Set_LED_yellow>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b1d      	cmp	r3, #29
 8001c14:	ddeb      	ble.n	8001bee <ShowBatteryStatus+0x1de>
		WS2812_Send(LED_RING1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff f858 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7ff f855 	bl	8000ccc <WS2812_Send>
 8001c22:	e0d2      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 50) && (batteryLevel > 40))
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b32      	cmp	r3, #50	; 0x32
 8001c28:	d828      	bhi.n	8001c7c <ShowBatteryStatus+0x26c>
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b28      	cmp	r3, #40	; 0x28
 8001c2e:	d925      	bls.n	8001c7c <ShowBatteryStatus+0x26c>
		MATRIX1_Write_Char(0, DOT_BATT_FIVE);
 8001c30:	2110      	movs	r1, #16
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 fefa 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_FIVE);
 8001c38:	2110      	movs	r1, #16
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f001 f890 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	e010      	b.n	8001c68 <ShowBatteryStatus+0x258>
			Set_LED_yellow(j,LED_RING1,100);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2264      	movs	r2, #100	; 0x64
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fbda 	bl	8001408 <Set_LED_yellow>
			Set_LED_yellow(j,LED_RING2,100);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fbd3 	bl	8001408 <Set_LED_yellow>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b1d      	cmp	r3, #29
 8001c6c:	ddeb      	ble.n	8001c46 <ShowBatteryStatus+0x236>
		WS2812_Send(LED_RING1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7ff f82c 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001c74:	2002      	movs	r0, #2
 8001c76:	f7ff f829 	bl	8000ccc <WS2812_Send>
 8001c7a:	e0a6      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 40) && (batteryLevel > 30))
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2b28      	cmp	r3, #40	; 0x28
 8001c80:	d828      	bhi.n	8001cd4 <ShowBatteryStatus+0x2c4>
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b1e      	cmp	r3, #30
 8001c86:	d925      	bls.n	8001cd4 <ShowBatteryStatus+0x2c4>
		MATRIX1_Write_Char(0, DOT_BATT_FOUR);
 8001c88:	2111      	movs	r1, #17
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 fece 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_FOUR);
 8001c90:	2111      	movs	r1, #17
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 f864 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e010      	b.n	8001cc0 <ShowBatteryStatus+0x2b0>
			Set_LED_yellow(j,LED_RING1,100);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2264      	movs	r2, #100	; 0x64
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fbae 	bl	8001408 <Set_LED_yellow>
			Set_LED_yellow(j,LED_RING2,100);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2264      	movs	r2, #100	; 0x64
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fba7 	bl	8001408 <Set_LED_yellow>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b1d      	cmp	r3, #29
 8001cc4:	ddeb      	ble.n	8001c9e <ShowBatteryStatus+0x28e>
		WS2812_Send(LED_RING1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f800 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7fe fffd 	bl	8000ccc <WS2812_Send>
 8001cd2:	e07a      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if((batteryLevel <= 30) && (batteryLevel > 20))
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b1e      	cmp	r3, #30
 8001cd8:	d828      	bhi.n	8001d2c <ShowBatteryStatus+0x31c>
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b14      	cmp	r3, #20
 8001cde:	d925      	bls.n	8001d2c <ShowBatteryStatus+0x31c>
		MATRIX1_Write_Char(0, DOT_BATT_THREE);
 8001ce0:	2112      	movs	r1, #18
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 fea2 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_THREE);
 8001ce8:	2112      	movs	r1, #18
 8001cea:	2000      	movs	r0, #0
 8001cec:	f001 f838 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e010      	b.n	8001d18 <ShowBatteryStatus+0x308>
			Set_LED_red(j,LED_RING1,100);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2264      	movs	r2, #100	; 0x64
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fb52 	bl	80013a8 <Set_LED_red>
			Set_LED_red(j,LED_RING2,100);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2264      	movs	r2, #100	; 0x64
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fb4b 	bl	80013a8 <Set_LED_red>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b1d      	cmp	r3, #29
 8001d1c:	ddeb      	ble.n	8001cf6 <ShowBatteryStatus+0x2e6>
		WS2812_Send(LED_RING1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7fe ffd4 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7fe ffd1 	bl	8000ccc <WS2812_Send>
 8001d2a:	e04e      	b.n	8001dca <ShowBatteryStatus+0x3ba>
	else if(batteryLevel <= 20)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b14      	cmp	r3, #20
 8001d30:	d825      	bhi.n	8001d7e <ShowBatteryStatus+0x36e>
		MATRIX1_Write_Char(0, DOT_BATT_EMPTY);
 8001d32:	2113      	movs	r1, #19
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 fe79 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_BATT_EMPTY);
 8001d3a:	2113      	movs	r1, #19
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f001 f80f 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e010      	b.n	8001d6a <ShowBatteryStatus+0x35a>
			Set_LED_red(j,LED_RING1,100);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2264      	movs	r2, #100	; 0x64
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fb29 	bl	80013a8 <Set_LED_red>
			Set_LED_red(j,LED_RING2,100);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2264      	movs	r2, #100	; 0x64
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fb22 	bl	80013a8 <Set_LED_red>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	3301      	adds	r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b1d      	cmp	r3, #29
 8001d6e:	ddeb      	ble.n	8001d48 <ShowBatteryStatus+0x338>
		WS2812_Send(LED_RING1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7fe ffab 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);	//empty
 8001d76:	2002      	movs	r0, #2
 8001d78:	f7fe ffa8 	bl	8000ccc <WS2812_Send>
}
 8001d7c:	e025      	b.n	8001dca <ShowBatteryStatus+0x3ba>
		MATRIX1_Write_Char(0, DOT_I);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fe53 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_I);
 8001d86:	2101      	movs	r1, #1
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 ffe9 	bl	8002d60 <MATRIX2_Write_Char>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e010      	b.n	8001db6 <ShowBatteryStatus+0x3a6>
			Set_LED_violet(j,LED_RING1,100);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2264      	movs	r2, #100	; 0x64
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fae9 	bl	8001374 <Set_LED_violet>
			Set_LED_violet(j,LED_RING2,100);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2264      	movs	r2, #100	; 0x64
 8001da8:	2102      	movs	r1, #2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fae2 	bl	8001374 <Set_LED_violet>
		for(int j = 0; j<MAX_LED_RING; j++)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b1d      	cmp	r3, #29
 8001dba:	ddeb      	ble.n	8001d94 <ShowBatteryStatus+0x384>
		WS2812_Send(LED_RING1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7fe ff85 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);		//ovf error
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7fe ff82 	bl	8000ccc <WS2812_Send>
}
 8001dc8:	e7ff      	b.n	8001dca <ShowBatteryStatus+0x3ba>
 8001dca:	bf00      	nop
 8001dcc:	3738      	adds	r7, #56	; 0x38
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <FrontLight_SetPWM>:



/*FrontLight*/
void FrontLight_SetPWM(uint16_t _pwm)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR1 = _pwm;
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <FrontLight_SetPWM+0x20>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	88fa      	ldrh	r2, [r7, #6]
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20002e94 	.word	0x20002e94

08001df8 <FrontLight_Enable>:
void FrontLight_Enable(bool _bool)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	if(_bool == true)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d104      	bne.n	8001e12 <FrontLight_Enable+0x1a>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <FrontLight_Enable+0x2c>)
 8001e0c:	f004 ffe4 	bl	8006dd8 <HAL_TIM_PWM_Start>
	else
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
}
 8001e10:	e003      	b.n	8001e1a <FrontLight_Enable+0x22>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001e12:	2100      	movs	r1, #0
 8001e14:	4803      	ldr	r0, [pc, #12]	; (8001e24 <FrontLight_Enable+0x2c>)
 8001e16:	f005 f8a7 	bl	8006f68 <HAL_TIM_PWM_Stop>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20002e94 	.word	0x20002e94

08001e28 <Set_Belt_Color>:
/*Control algorithm*/
static color beltRGB;
static uint16_t belt_action_cnt = 0;
static uint8_t prev_belt_action = 0xFF;
void Set_Belt_Color( uint8_t belt_color )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	belt_action_cnt = 0;
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <Set_Belt_Color+0x128>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]
	prev_belt_action = 0xFF;
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <Set_Belt_Color+0x12c>)
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	701a      	strb	r2, [r3, #0]
	switch(belt_color)
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d872      	bhi.n	8001f2c <Set_Belt_Color+0x104>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <Set_Belt_Color+0x24>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e69 	.word	0x08001e69
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08001ea1 	.word	0x08001ea1
 8001e58:	08001ebd 	.word	0x08001ebd
 8001e5c:	08001ed9 	.word	0x08001ed9
 8001e60:	08001ef5 	.word	0x08001ef5
 8001e64:	08001f11 	.word	0x08001f11
	{
		case 1 : beltRGB = GetColorCode(COLORDEFAULT); break;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fb3d 	bl	80014e8 <GetColorCode>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <Set_Belt_Color+0x130>)
 8001e72:	4611      	mov	r1, r2
 8001e74:	7019      	strb	r1, [r3, #0]
 8001e76:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001e7a:	7059      	strb	r1, [r3, #1]
 8001e7c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001e80:	709a      	strb	r2, [r3, #2]
 8001e82:	e061      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 2 : beltRGB = GetColorCode(COLOROFF); break;
 8001e84:	2002      	movs	r0, #2
 8001e86:	f7ff fb2f 	bl	80014e8 <GetColorCode>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <Set_Belt_Color+0x130>)
 8001e8e:	4611      	mov	r1, r2
 8001e90:	7019      	strb	r1, [r3, #0]
 8001e92:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001e96:	7059      	strb	r1, [r3, #1]
 8001e98:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001e9c:	709a      	strb	r2, [r3, #2]
 8001e9e:	e053      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 3 : beltRGB = GetColorCode(COLORORANGE); break;
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f7ff fb21 	bl	80014e8 <GetColorCode>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <Set_Belt_Color+0x130>)
 8001eaa:	4611      	mov	r1, r2
 8001eac:	7019      	strb	r1, [r3, #0]
 8001eae:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001eb2:	7059      	strb	r1, [r3, #1]
 8001eb4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001eb8:	709a      	strb	r2, [r3, #2]
 8001eba:	e045      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 4 : beltRGB = GetColorCode(COLORRED); break;
 8001ebc:	2004      	movs	r0, #4
 8001ebe:	f7ff fb13 	bl	80014e8 <GetColorCode>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <Set_Belt_Color+0x130>)
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	7019      	strb	r1, [r3, #0]
 8001eca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001ece:	7059      	strb	r1, [r3, #1]
 8001ed0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001ed4:	709a      	strb	r2, [r3, #2]
 8001ed6:	e037      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 5 : beltRGB = GetColorCode(COLORSKYBLUE); break;
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f7ff fb05 	bl	80014e8 <GetColorCode>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <Set_Belt_Color+0x130>)
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	7019      	strb	r1, [r3, #0]
 8001ee6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001eea:	7059      	strb	r1, [r3, #1]
 8001eec:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001ef0:	709a      	strb	r2, [r3, #2]
 8001ef2:	e029      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 6 : beltRGB = GetColorCode(COLORVIOLET); break;
 8001ef4:	2006      	movs	r0, #6
 8001ef6:	f7ff faf7 	bl	80014e8 <GetColorCode>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <Set_Belt_Color+0x130>)
 8001efe:	4611      	mov	r1, r2
 8001f00:	7019      	strb	r1, [r3, #0]
 8001f02:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001f06:	7059      	strb	r1, [r3, #1]
 8001f08:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001f0c:	709a      	strb	r2, [r3, #2]
 8001f0e:	e01b      	b.n	8001f48 <Set_Belt_Color+0x120>
		case 7 : beltRGB = GetColorCode(COLORGREEN); break;
 8001f10:	2007      	movs	r0, #7
 8001f12:	f7ff fae9 	bl	80014e8 <GetColorCode>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <Set_Belt_Color+0x130>)
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	7019      	strb	r1, [r3, #0]
 8001f1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001f22:	7059      	strb	r1, [r3, #1]
 8001f24:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001f28:	709a      	strb	r2, [r3, #2]
 8001f2a:	e00d      	b.n	8001f48 <Set_Belt_Color+0x120>
		default : beltRGB = GetColorCode(COLORDEFAULT); break;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff fadb 	bl	80014e8 <GetColorCode>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <Set_Belt_Color+0x130>)
 8001f36:	4611      	mov	r1, r2
 8001f38:	7019      	strb	r1, [r3, #0]
 8001f3a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001f3e:	7059      	strb	r1, [r3, #1]
 8001f40:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001f44:	709a      	strb	r2, [r3, #2]
 8001f46:	bf00      	nop
	}
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200029fc 	.word	0x200029fc
 8001f54:	20000002 	.word	0x20000002
 8001f58:	200029f8 	.word	0x200029f8

08001f5c <Set_Belt_Action>:

void Set_Belt_Action( uint8_t belt_action )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
	switch(belt_action)
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d84a      	bhi.n	8002002 <Set_Belt_Action+0xa6>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <Set_Belt_Action+0x18>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f89 	.word	0x08001f89
 8001f78:	08001faf 	.word	0x08001faf
 8001f7c:	08001fbb 	.word	0x08001fbb
 8001f80:	08001fc7 	.word	0x08001fc7
 8001f84:	08001ff1 	.word	0x08001ff1
	{
		case 0 : //STOP
			if(prev_belt_action != belt_action )
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <Set_Belt_Action+0xbc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d03b      	beq.n	800200a <Set_Belt_Action+0xae>
			{
				prev_belt_action = belt_action;
 8001f92:	4a21      	ldr	r2, [pc, #132]	; (8002018 <Set_Belt_Action+0xbc>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	7013      	strb	r3, [r2, #0]
				belt_action_cnt = 0;
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <Set_Belt_Action+0xc0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	801a      	strh	r2, [r3, #0]
				Belt_Allset_LED(beltRGB);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <Set_Belt_Action+0xc4>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f7ff f8b3 	bl	800110c <Belt_Allset_LED>
				WS2812_Send(LED_BELT);
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	f7fe fe90 	bl	8000ccc <WS2812_Send>
			}
			break;
 8001fac:	e02d      	b.n	800200a <Set_Belt_Action+0xae>
		case 1 : Belt_MODE_rotation(0,beltRGB); break; //move_CW
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <Set_Belt_Action+0xc4>)
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff fbcc 	bl	8001750 <Belt_MODE_rotation>
 8001fb8:	e02a      	b.n	8002010 <Set_Belt_Action+0xb4>
		case 2 : Belt_MODE_rotation(1,beltRGB); break; //move_CCW
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <Set_Belt_Action+0xc4>)
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fbc6 	bl	8001750 <Belt_MODE_rotation>
 8001fc4:	e024      	b.n	8002010 <Set_Belt_Action+0xb4>

		case 3 : //blink
			belt_action_cnt++;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <Set_Belt_Action+0xc0>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <Set_Belt_Action+0xc0>)
 8001fd0:	801a      	strh	r2, [r3, #0]
			if(belt_action_cnt >= BELT_BLINK_INTERVAL)
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <Set_Belt_Action+0xc0>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b13      	cmp	r3, #19
 8001fd8:	d919      	bls.n	800200e <Set_Belt_Action+0xb2>
			{
				belt_action_cnt = 0;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <Set_Belt_Action+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	801a      	strh	r2, [r3, #0]
				Belt_Toggle_LED(beltRGB);
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <Set_Belt_Action+0xc4>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	f7ff f9ac 	bl	8001340 <Belt_Toggle_LED>
				WS2812_Send(LED_BELT);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f7fe fe6f 	bl	8000ccc <WS2812_Send>
			}
			break;
 8001fee:	e00e      	b.n	800200e <Set_Belt_Action+0xb2>
		case 4 :
			belt_action_cnt = 0;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <Set_Belt_Action+0xc0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
			Belt_MODE_breathing(100,beltRGB);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <Set_Belt_Action+0xc4>)
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f7ff fade 	bl	80015bc <Belt_MODE_breathing>
			break;
 8002000:	e006      	b.n	8002010 <Set_Belt_Action+0xb4>
		default :
			belt_action_cnt = 0;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <Set_Belt_Action+0xc0>)
 8002004:	2200      	movs	r2, #0
 8002006:	801a      	strh	r2, [r3, #0]
			break;
 8002008:	e002      	b.n	8002010 <Set_Belt_Action+0xb4>
			break;
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <Set_Belt_Action+0xb4>
			break;
 800200e:	bf00      	nop
	}
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000002 	.word	0x20000002
 800201c:	200029fc 	.word	0x200029fc
 8002020:	200029f8 	.word	0x200029f8

08002024 <EyeControl>:
void EyeControl(uint8_t eye_status)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	switch(eye_status)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b06      	cmp	r3, #6
 8002032:	f200 80ac 	bhi.w	800218e <EyeControl+0x16a>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <EyeControl+0x18>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	08002059 	.word	0x08002059
 8002040:	0800206f 	.word	0x0800206f
 8002044:	0800208d 	.word	0x0800208d
 8002048:	08002099 	.word	0x08002099
 800204c:	080020b7 	.word	0x080020b7
 8002050:	080020d5 	.word	0x080020d5
 8002054:	08002171 	.word	0x08002171
	{
	case EYESTATUSOFF : //OFF mode
		Ring1_Reset_LED();
 8002058:	f7ff f870 	bl	800113c <Ring1_Reset_LED>
		Ring2_Reset_LED();
 800205c:	f7ff f89e 	bl	800119c <Ring2_Reset_LED>
		WS2812_Send(LED_RING1);
 8002060:	2001      	movs	r0, #1
 8002062:	f7fe fe33 	bl	8000ccc <WS2812_Send>
		WS2812_Send(LED_RING2);
 8002066:	2002      	movs	r0, #2
 8002068:	f7fe fe30 	bl	8000ccc <WS2812_Send>
		break;
 800206c:	e097      	b.n	800219e <EyeControl+0x17a>

	case EYESTATUSDEFAULT : //default mode
		Ring1_MODE_breathing(100);
 800206e:	2064      	movs	r0, #100	; 0x64
 8002070:	f7ff fbaa 	bl	80017c8 <Ring1_MODE_breathing>
		Ring2_MODE_breathing(100);
 8002074:	2064      	movs	r0, #100	; 0x64
 8002076:	f7ff fc39 	bl	80018ec <Ring2_MODE_breathing>
		MATRIX1_Write_Char(0, DOT_DEFAULT);
 800207a:	2107      	movs	r1, #7
 800207c:	2000      	movs	r0, #0
 800207e:	f000 fcd5 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_DEFAULT);
 8002082:	2107      	movs	r1, #7
 8002084:	2000      	movs	r0, #0
 8002086:	f000 fe6b 	bl	8002d60 <MATRIX2_Write_Char>
		break;
 800208a:	e088      	b.n	800219e <EyeControl+0x17a>

	case EYESTATUSBATTERY : //battery mode
		ShowBatteryStatus(eyeAction);
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <EyeControl+0x184>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fcbd 	bl	8001a10 <ShowBatteryStatus>
		break;
 8002096:	e082      	b.n	800219e <EyeControl+0x17a>

	case EYESTATUSSMILE : //smile mode
		Ring1_MODE_breathing(100);
 8002098:	2064      	movs	r0, #100	; 0x64
 800209a:	f7ff fb95 	bl	80017c8 <Ring1_MODE_breathing>
		Ring2_MODE_breathing(100);
 800209e:	2064      	movs	r0, #100	; 0x64
 80020a0:	f7ff fc24 	bl	80018ec <Ring2_MODE_breathing>
		MATRIX1_Write_Char(0, DOT_EXCITED);
 80020a4:	2109      	movs	r1, #9
 80020a6:	2000      	movs	r0, #0
 80020a8:	f000 fcc0 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_EXCITED);
 80020ac:	2109      	movs	r1, #9
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 fe56 	bl	8002d60 <MATRIX2_Write_Char>
		break;
 80020b4:	e073      	b.n	800219e <EyeControl+0x17a>

	case EYESTATUSHEART : //heart mode
		Ring1_MODE_breathing(100);
 80020b6:	2064      	movs	r0, #100	; 0x64
 80020b8:	f7ff fb86 	bl	80017c8 <Ring1_MODE_breathing>
		Ring2_MODE_breathing(100);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f7ff fc15 	bl	80018ec <Ring2_MODE_breathing>
		MATRIX1_Write_Char(0, DOT_HEART);
 80020c2:	2108      	movs	r1, #8
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 fcb1 	bl	8002a2c <MATRIX1_Write_Char>
		MATRIX2_Write_Char(0, DOT_HEART);
 80020ca:	2108      	movs	r1, #8
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 fe47 	bl	8002d60 <MATRIX2_Write_Char>
		break;
 80020d2:	e064      	b.n	800219e <EyeControl+0x17a>

	case EYESTATUSHELLO : //hello mode
		if(eyeHelloFlag == 0) helloItr++;
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <EyeControl+0x188>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <EyeControl+0xc6>
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <EyeControl+0x18c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <EyeControl+0x18c>)
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e005      	b.n	80020f6 <EyeControl+0xd2>
		else helloItr = helloItr + 5;
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <EyeControl+0x18c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3305      	adds	r3, #5
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <EyeControl+0x18c>)
 80020f4:	701a      	strb	r2, [r3, #0]

		Ring1_MODE_breathing(100);
 80020f6:	2064      	movs	r0, #100	; 0x64
 80020f8:	f7ff fb66 	bl	80017c8 <Ring1_MODE_breathing>
		Ring2_MODE_breathing(100);
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	f7ff fbf5 	bl	80018ec <Ring2_MODE_breathing>

		if(helloItr >= 100)
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <EyeControl+0x18c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b63      	cmp	r3, #99	; 0x63
 8002108:	d90d      	bls.n	8002126 <EyeControl+0x102>
		{
			if(eyeHelloFlag == 0) eyeHelloFlag = 1;
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <EyeControl+0x188>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <EyeControl+0xf6>
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <EyeControl+0x188>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e002      	b.n	8002120 <EyeControl+0xfc>
			else eyeHelloFlag = 0;
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <EyeControl+0x188>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
			helloItr = 0;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <EyeControl+0x18c>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
		}
		if(eyeHelloFlag == 0)
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <EyeControl+0x188>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <EyeControl+0x126>
		{
			MATRIX1_Write_Char(0, 6);DWT_Delay_us(50);
 800212e:	2106      	movs	r1, #6
 8002130:	2000      	movs	r0, #0
 8002132:	f000 fc7b 	bl	8002a2c <MATRIX1_Write_Char>
 8002136:	2032      	movs	r0, #50	; 0x32
 8002138:	f000 fe6a 	bl	8002e10 <DWT_Delay_us>
			MATRIX2_Write_Char(0, 6);DWT_Delay_us(50);
 800213c:	2106      	movs	r1, #6
 800213e:	2000      	movs	r0, #0
 8002140:	f000 fe0e 	bl	8002d60 <MATRIX2_Write_Char>
 8002144:	2032      	movs	r0, #50	; 0x32
 8002146:	f000 fe63 	bl	8002e10 <DWT_Delay_us>
		}
		if(eyeHelloFlag == 1)
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <EyeControl+0x188>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d124      	bne.n	800219c <EyeControl+0x178>
		{
			MATRIX1_Write_Char(0, 0);DWT_Delay_us(50);
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f000 fc69 	bl	8002a2c <MATRIX1_Write_Char>
 800215a:	2032      	movs	r0, #50	; 0x32
 800215c:	f000 fe58 	bl	8002e10 <DWT_Delay_us>
			MATRIX2_Write_Char(0, 0);DWT_Delay_us(50);
 8002160:	2100      	movs	r1, #0
 8002162:	2000      	movs	r0, #0
 8002164:	f000 fdfc 	bl	8002d60 <MATRIX2_Write_Char>
 8002168:	2032      	movs	r0, #50	; 0x32
 800216a:	f000 fe51 	bl	8002e10 <DWT_Delay_us>
		}

		break;
 800216e:	e015      	b.n	800219c <EyeControl+0x178>

	case EYESTATUSHAPPY : //happy mode
			Ring1_MODE_breathing(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f7ff fb29 	bl	80017c8 <Ring1_MODE_breathing>
			Ring2_MODE_breathing(100);
 8002176:	2064      	movs	r0, #100	; 0x64
 8002178:	f7ff fbb8 	bl	80018ec <Ring2_MODE_breathing>
			MATRIX1_Write_Char(0, 10);
 800217c:	210a      	movs	r1, #10
 800217e:	2000      	movs	r0, #0
 8002180:	f000 fc54 	bl	8002a2c <MATRIX1_Write_Char>
			MATRIX2_Write_Char(0, 10);
 8002184:	210a      	movs	r1, #10
 8002186:	2000      	movs	r0, #0
 8002188:	f000 fdea 	bl	8002d60 <MATRIX2_Write_Char>
		break;
 800218c:	e007      	b.n	800219e <EyeControl+0x17a>

	default :
			Ring1_MODE_rotation(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f7ff fb64 	bl	800185c <Ring1_MODE_rotation>
			Ring2_MODE_rotation(0);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fbf3 	bl	8001980 <Ring2_MODE_rotation>
		break;
 800219a:	e000      	b.n	800219e <EyeControl+0x17a>
		break;
 800219c:	bf00      	nop
	}
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000001 	.word	0x20000001
 80021ac:	20000201 	.word	0x20000201
 80021b0:	20000200 	.word	0x20000200

080021b4 <LED_Control_Set>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void LED_Control_Set(uint8_t category,uint8_t mode, uint8_t action)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	460b      	mov	r3, r1
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	4613      	mov	r3, r2
 80021c4:	717b      	strb	r3, [r7, #5]
	switch(category)
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d83e      	bhi.n	800224c <LED_Control_Set+0x98>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <LED_Control_Set+0x20>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021f3 	.word	0x080021f3
 80021dc:	0800220b 	.word	0x0800220b
 80021e0:	0800224d 	.word	0x0800224d
	{
		case LEDCATEGORYEYE :
			gv.LED_EYE_Status = mode;
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <LED_Control_Set+0xa8>)
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	7193      	strb	r3, [r2, #6]
			gv.LED_EYE_Action = action;
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <LED_Control_Set+0xa8>)
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	71d3      	strb	r3, [r2, #7]
			break;
 80021f0:	e02f      	b.n	8002252 <LED_Control_Set+0x9e>
		case LEDCATEGORYBELT :
			gv.LED_Belt_Status = mode;
 80021f2:	4a1a      	ldr	r2, [pc, #104]	; (800225c <LED_Control_Set+0xa8>)
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	7213      	strb	r3, [r2, #8]
			gv.LED_Belt_Action = action;
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <LED_Control_Set+0xa8>)
 80021fa:	797b      	ldrb	r3, [r7, #5]
 80021fc:	7253      	strb	r3, [r2, #9]
			Set_Belt_Color( gv.LED_Belt_Status );
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <LED_Control_Set+0xa8>)
 8002200:	7a1b      	ldrb	r3, [r3, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe10 	bl	8001e28 <Set_Belt_Color>

			break;
 8002208:	e023      	b.n	8002252 <LED_Control_Set+0x9e>
		case LEDCATEGORYHEAD :
			gv.LED_Front_Status = mode;
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <LED_Control_Set+0xa8>)
 800220c:	79bb      	ldrb	r3, [r7, #6]
 800220e:	7293      	strb	r3, [r2, #10]
			gv.LED_Front_Action = action;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <LED_Control_Set+0xa8>)
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	72d3      	strb	r3, [r2, #11]
			if(gv.LED_Front_Action == 0 )
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <LED_Control_Set+0xa8>)
 8002218:	7adb      	ldrb	r3, [r3, #11]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <LED_Control_Set+0x8a>
			{
				if(gv.LED_Front_Status == 1) FrontLight_SetPWM(250);//LED ON
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <LED_Control_Set+0xa8>)
 8002220:	7a9b      	ldrb	r3, [r3, #10]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d103      	bne.n	800222e <LED_Control_Set+0x7a>
 8002226:	20fa      	movs	r0, #250	; 0xfa
 8002228:	f7ff fdd4 	bl	8001dd4 <FrontLight_SetPWM>
				else if(gv.LED_Front_Status == 2) FrontLight_SetPWM(0);//LED OFF
			}
			else FrontLight_SetPWM(gv.LED_Front_Action);
			break;
 800222c:	e010      	b.n	8002250 <LED_Control_Set+0x9c>
				else if(gv.LED_Front_Status == 2) FrontLight_SetPWM(0);//LED OFF
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <LED_Control_Set+0xa8>)
 8002230:	7a9b      	ldrb	r3, [r3, #10]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10c      	bne.n	8002250 <LED_Control_Set+0x9c>
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fdcc 	bl	8001dd4 <FrontLight_SetPWM>
			break;
 800223c:	e008      	b.n	8002250 <LED_Control_Set+0x9c>
			else FrontLight_SetPWM(gv.LED_Front_Action);
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <LED_Control_Set+0xa8>)
 8002240:	7adb      	ldrb	r3, [r3, #11]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fdc5 	bl	8001dd4 <FrontLight_SetPWM>
			break;
 800224a:	e001      	b.n	8002250 <LED_Control_Set+0x9c>
		case LEDCATEGORYBACK :
			break;
		default : break;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <LED_Control_Set+0x9e>
			break;
 8002250:	bf00      	nop
	}
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200001f0 	.word	0x200001f0

08002260 <init_pwm_leds>:




void init_pwm_leds(void)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b095      	sub	sp, #84	; 0x54
 8002264:	af12      	add	r7, sp, #72	; 0x48
	// FRONT LIGHT
	FrontLight_Enable(true);
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff fdc6 	bl	8001df8 <FrontLight_Enable>
	FrontLight_SetPWM(FRONTLIGHTON);
 800226c:	4b40      	ldr	r3, [pc, #256]	; (8002370 <init_pwm_leds+0x110>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fa68 	bl	8000748 <__aeabi_ui2d>
 8002278:	a33b      	add	r3, pc, #236	; (adr r3, 8002368 <init_pwm_leds+0x108>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f7fd fff7 	bl	8000270 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fad7 	bl	800083c <__aeabi_d2uiz>
 800228e:	4603      	mov	r3, r0
 8002290:	b29b      	uxth	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fd9e 	bl	8001dd4 <FrontLight_SetPWM>

	// WS2812
	LED_PWM_init();
 8002298:	f7fe fc72 	bl	8000b80 <LED_PWM_init>

	// CLEAR
	// RING1 / RING2
	Ring_Rotate_Init();
 800229c:	f7fe fffe 	bl	800129c <Ring_Rotate_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1); // eye1 en
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a6:	4833      	ldr	r0, [pc, #204]	; (8002374 <init_pwm_leds+0x114>)
 80022a8:	f003 fd12 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 1); // eye2 en
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b2:	4830      	ldr	r0, [pc, #192]	; (8002374 <init_pwm_leds+0x114>)
 80022b4:	f003 fd0c 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	f002 fed5 	bl	8005068 <HAL_Delay>
	Ring1_Reset_LED();
 80022be:	f7fe ff3d 	bl	800113c <Ring1_Reset_LED>
	WS2812_Send(LED_RING1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe fd02 	bl	8000ccc <WS2812_Send>
	Ring2_Reset_LED();
 80022c8:	f7fe ff68 	bl	800119c <Ring2_Reset_LED>
	WS2812_Send(LED_RING2);
 80022cc:	2002      	movs	r0, #2
 80022ce:	f7fe fcfd 	bl	8000ccc <WS2812_Send>

	// BELT
	Belt_Rotate_Init();
 80022d2:	f7fe ff93 	bl	80011fc <Belt_Rotate_Init>
	Belt_Reset_LED();
 80022d6:	f7fe fee9 	bl	80010ac <Belt_Reset_LED>
	WS2812_Send(LED_BELT);
 80022da:	2003      	movs	r0, #3
 80022dc:	f7fe fcf6 	bl	8000ccc <WS2812_Send>

	// INIT
	Belt_Allset_LED(GetColorCode(COLORORANGE));
 80022e0:	2003      	movs	r0, #3
 80022e2:	f7ff f901 	bl	80014e8 <GetColorCode>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	713a      	strb	r2, [r7, #4]
 80022ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80022f0:	717a      	strb	r2, [r7, #5]
 80022f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80022f6:	71bb      	strb	r3, [r7, #6]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe ff07 	bl	800110c <Belt_Allset_LED>
	WS2812_Send(LED_BELT);
 80022fe:	2003      	movs	r0, #3
 8002300:	f7fe fce4 	bl	8000ccc <WS2812_Send>


	// DOT MATRIX INTI
	DOT_MATRIX1_Init(hspi1);
 8002304:	4c1c      	ldr	r4, [pc, #112]	; (8002378 <init_pwm_leds+0x118>)
 8002306:	4668      	mov	r0, sp
 8002308:	f104 0310 	add.w	r3, r4, #16
 800230c:	2248      	movs	r2, #72	; 0x48
 800230e:	4619      	mov	r1, r3
 8002310:	f009 fcc3 	bl	800bc9a <memcpy>
 8002314:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002318:	f000 fa88 	bl	800282c <DOT_MATRIX1_Init>
	DOT_MATRIX2_Init(hspi1);
 800231c:	4c16      	ldr	r4, [pc, #88]	; (8002378 <init_pwm_leds+0x118>)
 800231e:	4668      	mov	r0, sp
 8002320:	f104 0310 	add.w	r3, r4, #16
 8002324:	2248      	movs	r2, #72	; 0x48
 8002326:	4619      	mov	r1, r3
 8002328:	f009 fcb7 	bl	800bc9a <memcpy>
 800232c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002330:	f000 fc16 	bl	8002b60 <DOT_MATRIX2_Init>
	MATRIX1_CLEAR(0);
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fb45 	bl	80029c4 <MATRIX1_CLEAR>
	MATRIX2_CLEAR(0);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 fcdc 	bl	8002cf8 <MATRIX2_CLEAR>

	LED_Control_Set(LEDCATEGORYEYE,EYESTATUSHELLO, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2105      	movs	r1, #5
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff ff35 	bl	80021b4 <LED_Control_Set>
	LED_Control_Set(LEDCATEGORYBELT,3, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2103      	movs	r1, #3
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff ff30 	bl	80021b4 <LED_Control_Set>
	LED_Control_Set(LEDCATEGORYHEAD,1, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2101      	movs	r1, #1
 8002358:	2003      	movs	r0, #3
 800235a:	f7ff ff2b 	bl	80021b4 <LED_Control_Set>


}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}
 8002366:	bf00      	nop
 8002368:	66666666 	.word	0x66666666
 800236c:	3fee6666 	.word	0x3fee6666
 8002370:	20002e94 	.word	0x20002e94
 8002374:	40020c00 	.word	0x40020c00
 8002378:	20002df4 	.word	0x20002df4

0800237c <apps_process_task>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_process_task(void *argument)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	static msg_t msg;
	static u32 param1, param2;
	static u8 process_index = 0;

	init_apps_init_app();
 8002384:	f000 f92a 	bl	80025dc <init_apps_init_app>
	init_pwm_leds();
 8002388:	f7ff ff6a 	bl	8002260 <init_pwm_leds>

	apps_start_app(APPS_INIT_APP, 0);
 800238c:	2100      	movs	r1, #0
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f868 	bl	8002464 <apps_start_app>
	/********** timer init ***********/
	timers_init();
 8002394:	f002 fcc8 	bl	8004d28 <timers_init>
	timers_register_timer(UTIL_TIMER_1ms, apps_timer_1ms);
 8002398:	491d      	ldr	r1, [pc, #116]	; (8002410 <apps_process_task+0x94>)
 800239a:	2001      	movs	r0, #1
 800239c:	f002 fcce 	bl	8004d3c <timers_register_timer>
	timers_register_timer(UTIL_TIMER_100ms, apps_timer_100ms);
 80023a0:	491c      	ldr	r1, [pc, #112]	; (8002414 <apps_process_task+0x98>)
 80023a2:	2064      	movs	r0, #100	; 0x64
 80023a4:	f002 fcca 	bl	8004d3c <timers_register_timer>
	timers_register_timer(UTIL_TIMER_1s, apps_timer_1s);
 80023a8:	491b      	ldr	r1, [pc, #108]	; (8002418 <apps_process_task+0x9c>)
 80023aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ae:	f002 fcc5 	bl	8004d3c <timers_register_timer>
	timers_register_timer(UTIL_TIMER_5s, apps_timer_5s);
 80023b2:	491a      	ldr	r1, [pc, #104]	; (800241c <apps_process_task+0xa0>)
 80023b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80023b8:	f002 fcc0 	bl	8004d3c <timers_register_timer>
	timers_register_timer(UTIL_TIMER_1min, apps_timer_1min);
 80023bc:	4918      	ldr	r1, [pc, #96]	; (8002420 <apps_process_task+0xa4>)
 80023be:	f64e 2060 	movw	r0, #60000	; 0xea60
 80023c2:	f002 fcbb 	bl	8004d3c <timers_register_timer>

	while(1)
	{
		switch(process_index++)
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <apps_process_task+0xa8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	b2d1      	uxtb	r1, r2
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <apps_process_task+0xa8>)
 80023d0:	7011      	strb	r1, [r2, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d005      	beq.n	80023e2 <apps_process_task+0x66>
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d104      	bne.n	80023e4 <apps_process_task+0x68>
		{
			case 1 : break;
			case 2 : process_index = 0; break;
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <apps_process_task+0xa8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e000      	b.n	80023e4 <apps_process_task+0x68>
			case 1 : break;
 80023e2:	bf00      	nop
		}

		if(msgs_get_msg(&msg, &param1, &param2) == true) apps_on_msg_app(msg, param1, param2);
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <apps_process_task+0xac>)
 80023e6:	4911      	ldr	r1, [pc, #68]	; (800242c <apps_process_task+0xb0>)
 80023e8:	4811      	ldr	r0, [pc, #68]	; (8002430 <apps_process_task+0xb4>)
 80023ea:	f000 f973 	bl	80026d4 <msgs_get_msg>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <apps_process_task+0x8a>
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <apps_process_task+0xb4>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <apps_process_task+0xb0>)
 80023fa:	6811      	ldr	r1, [r2, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <apps_process_task+0xac>)
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f851 	bl	80024a8 <apps_on_msg_app>
		osDelay(1000);
 8002406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240a:	f006 fbe0 	bl	8008bce <osDelay>
		switch(process_index++)
 800240e:	e7da      	b.n	80023c6 <apps_process_task+0x4a>
 8002410:	080024f1 	.word	0x080024f1
 8002414:	0800251d 	.word	0x0800251d
 8002418:	08002559 	.word	0x08002559
 800241c:	08002571 	.word	0x08002571
 8002420:	080025c5 	.word	0x080025c5
 8002424:	200029fe 	.word	0x200029fe
 8002428:	20002a04 	.word	0x20002a04
 800242c:	20002a00 	.word	0x20002a00
 8002430:	200029ff 	.word	0x200029ff

08002434 <apps_init_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_init_app(app_t *app)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if(app == NULL) return;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <apps_init_app+0x1e>
	apps[app->id] = app;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <apps_init_app+0x2c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002450:	e000      	b.n	8002454 <apps_init_app+0x20>
	if(app == NULL) return;
 8002452:	bf00      	nop
}
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200001ec 	.word	0x200001ec

08002464 <apps_start_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
bool apps_start_app(app_id_t id, u32 param1)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
	if(apps[id]->start == NULL) return false;
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <apps_start_app+0x3c>)
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <apps_start_app+0x1e>
 800247e:	2300      	movs	r3, #0
 8002480:	e00a      	b.n	8002498 <apps_start_app+0x34>

	current_app_id = id;
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <apps_start_app+0x40>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	7013      	strb	r3, [r2, #0]
	apps[id]->start(param1);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <apps_start_app+0x3c>)
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	4798      	blx	r3

	return true;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200001ec 	.word	0x200001ec
 80024a4:	20000000 	.word	0x20000000

080024a8 <apps_on_msg_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_on_msg_app(msg_t msg, u32 param1, u32 param2)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	73fb      	strb	r3, [r7, #15]
	if(apps[current_app_id]->on_msg == NULL) return;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <apps_on_msg_app+0x40>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <apps_on_msg_app+0x44>)
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <apps_on_msg_app+0x38>
	apps[current_app_id]->on_msg(msg, param1, param2);
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <apps_on_msg_app+0x40>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <apps_on_msg_app+0x44>)
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	7bf8      	ldrb	r0, [r7, #15]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	4798      	blx	r3
 80024de:	e000      	b.n	80024e2 <apps_on_msg_app+0x3a>
	if(apps[current_app_id]->on_msg == NULL) return;
 80024e0:	bf00      	nop
}
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000000 	.word	0x20000000
 80024ec:	200001ec 	.word	0x200001ec

080024f0 <apps_timer_1ms>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_1ms(s8 timer_id, u32 param1)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
	Set_Belt_Action(gv.LED_Belt_Action);
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <apps_timer_1ms+0x28>)
 80024fe:	7a5b      	ldrb	r3, [r3, #9]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fd2b 	bl	8001f5c <Set_Belt_Action>
	EyeControl(gv.LED_EYE_Status);
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <apps_timer_1ms+0x28>)
 8002508:	799b      	ldrb	r3, [r3, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fd8a 	bl	8002024 <EyeControl>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200001f0 	.word	0x200001f0

0800251c <apps_timer_100ms>:
static void apps_timer_100ms(s8 timer_id, u32 param1)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
	DBG_MSG("ULTRA[%04d][%04d]\r\n",gv.ultrasonic_1,gv.ultrasonic_2);
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <apps_timer_100ms+0x34>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <apps_timer_100ms+0x28>
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <apps_timer_100ms+0x34>)
 8002532:	885b      	ldrh	r3, [r3, #2]
 8002534:	4619      	mov	r1, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <apps_timer_100ms+0x34>)
 8002538:	889b      	ldrh	r3, [r3, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <apps_timer_100ms+0x38>)
 800253e:	f009 fca3 	bl	800be88 <iprintf>
}
 8002542:	e000      	b.n	8002546 <apps_timer_100ms+0x2a>
	DBG_MSG("ULTRA[%04d][%04d]\r\n",gv.ultrasonic_1,gv.ultrasonic_2);
 8002544:	bf00      	nop
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200001f0 	.word	0x200001f0
 8002554:	0800cd0c 	.word	0x0800cd0c

08002558 <apps_timer_1s>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_1s(s8 timer_id, u32 param1)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
	//DBG_MSG("apps_timer_1s\r\n");
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <apps_timer_5s>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_5s(s8 timer_id, u32 param1)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b095      	sub	sp, #84	; 0x54
 8002574:	af12      	add	r7, sp, #72	; 0x48
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
	DOT_MATRIX1_Init(hspi1);
 800257c:	4c10      	ldr	r4, [pc, #64]	; (80025c0 <apps_timer_5s+0x50>)
 800257e:	4668      	mov	r0, sp
 8002580:	f104 0310 	add.w	r3, r4, #16
 8002584:	2248      	movs	r2, #72	; 0x48
 8002586:	4619      	mov	r1, r3
 8002588:	f009 fb87 	bl	800bc9a <memcpy>
 800258c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002590:	f000 f94c 	bl	800282c <DOT_MATRIX1_Init>
	DOT_MATRIX2_Init(hspi1);
 8002594:	4c0a      	ldr	r4, [pc, #40]	; (80025c0 <apps_timer_5s+0x50>)
 8002596:	4668      	mov	r0, sp
 8002598:	f104 0310 	add.w	r3, r4, #16
 800259c:	2248      	movs	r2, #72	; 0x48
 800259e:	4619      	mov	r1, r3
 80025a0:	f009 fb7b 	bl	800bc9a <memcpy>
 80025a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025a8:	f000 fada 	bl	8002b60 <DOT_MATRIX2_Init>

	MATRIX1_CLEAR(0);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 fa09 	bl	80029c4 <MATRIX1_CLEAR>
	MATRIX2_CLEAR(0);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f000 fba0 	bl	8002cf8 <MATRIX2_CLEAR>
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	20002df4 	.word	0x20002df4

080025c4 <apps_timer_1min>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void apps_timer_1min(s8 timer_id, u32 param1)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
	//DBG_MSG("apps_timer_1min\r\n");
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <init_apps_init_app>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_apps_init_app(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  apps_init_app(&this);
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <init_apps_init_app+0x14>)
 80025e2:	f7ff ff27 	bl	8002434 <apps_init_app>
  default_global_volatile();
 80025e6:	f000 f805 	bl	80025f4 <default_global_volatile>
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000004 	.word	0x20000004

080025f4 <default_global_volatile>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void default_global_volatile(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	gv.debug_mode = false;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <default_global_volatile+0x5c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
	gv.ultrasonic_1 = 9999;
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <default_global_volatile+0x5c>)
 8002600:	f242 720f 	movw	r2, #9999	; 0x270f
 8002604:	805a      	strh	r2, [r3, #2]
	gv.ultrasonic_2 = 9999;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <default_global_volatile+0x5c>)
 8002608:	f242 720f 	movw	r2, #9999	; 0x270f
 800260c:	809a      	strh	r2, [r3, #4]


	// need to check
	gv.LED_EYE_Status = 0;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <default_global_volatile+0x5c>)
 8002610:	2200      	movs	r2, #0
 8002612:	719a      	strb	r2, [r3, #6]
	gv.LED_EYE_Action = 10; // battery
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <default_global_volatile+0x5c>)
 8002616:	220a      	movs	r2, #10
 8002618:	71da      	strb	r2, [r3, #7]
	gv.LED_Belt_Status = 0;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <default_global_volatile+0x5c>)
 800261c:	2200      	movs	r2, #0
 800261e:	721a      	strb	r2, [r3, #8]
	gv.LED_Belt_Action = 0;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <default_global_volatile+0x5c>)
 8002622:	2200      	movs	r2, #0
 8002624:	725a      	strb	r2, [r3, #9]
	gv.LED_Front_Status = 0;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <default_global_volatile+0x5c>)
 8002628:	2200      	movs	r2, #0
 800262a:	729a      	strb	r2, [r3, #10]
	gv.LED_Front_Action = 0;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <default_global_volatile+0x5c>)
 800262e:	2200      	movs	r2, #0
 8002630:	72da      	strb	r2, [r3, #11]
	// LED DMA FLAG
	gv.beltdatasentflag = 0;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <default_global_volatile+0x5c>)
 8002634:	2200      	movs	r2, #0
 8002636:	731a      	strb	r2, [r3, #12]
	gv.ring1datasentflag = 0;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <default_global_volatile+0x5c>)
 800263a:	2200      	movs	r2, #0
 800263c:	735a      	strb	r2, [r3, #13]
	gv.ring2datasentflag = 0;
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <default_global_volatile+0x5c>)
 8002640:	2200      	movs	r2, #0
 8002642:	739a      	strb	r2, [r3, #14]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200001f0 	.word	0x200001f0

08002654 <start>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void start(u32 param1)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	//

	htim1.Instance->CCR1 = htim1.Instance->ARR;
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <start+0x40>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <start+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002666:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = htim1.Instance->ARR;
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <start+0x40>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <start+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = htim1.Instance->ARR;
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <start+0x40>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <start+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c

    init_ultrasonic_hg_c40u();
 8002680:	f002 f864 	bl	800474c <init_ultrasonic_hg_c40u>
    init_p_interfaceboard();
 8002684:	f001 fdce 	bl	8004224 <init_p_interfaceboard>
    init_p_uart_test();
 8002688:	f001 ff7c 	bl	8004584 <init_p_uart_test>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20002e4c 	.word	0x20002e4c

08002698 <stop>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void stop(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <on_msg>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void on_msg(msg_t msg, u32 param1, u32 param2)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  switch(msg)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d002      	beq.n	80026c0 <on_msg+0x1a>
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d002      	beq.n	80026c4 <on_msg+0x1e>

    case MSG_SEND_ULTEASONIC_VALUE:
    	break;

    default:
      break;
 80026be:	e002      	b.n	80026c6 <on_msg+0x20>
    	break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <on_msg+0x20>
    	break;
 80026c4:	bf00      	nop
  }
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <msgs_get_msg>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
bool msgs_get_msg(msg_t *msg, u32 *param1, u32 *param2)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  if(g_msgs_queue_head == g_msgs_queue_tail)
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <msgs_get_msg+0x90>)
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <msgs_get_msg+0x94>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d101      	bne.n	80026f0 <msgs_get_msg+0x1c>
    return false;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e033      	b.n	8002758 <msgs_get_msg+0x84>

  *msg = g_msgs_queue[g_msgs_queue_tail].msg;
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <msgs_get_msg+0x94>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <msgs_get_msg+0x98>)
 80026f8:	460b      	mov	r3, r1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	701a      	strb	r2, [r3, #0]
  *param1 = g_msgs_queue[g_msgs_queue_tail].param1;
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <msgs_get_msg+0x94>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <msgs_get_msg+0x98>)
 8002710:	460b      	mov	r3, r1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	440b      	add	r3, r1
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	601a      	str	r2, [r3, #0]
  *param2 = g_msgs_queue[g_msgs_queue_tail].param2;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <msgs_get_msg+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4a10      	ldr	r2, [pc, #64]	; (800276c <msgs_get_msg+0x98>)
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3308      	adds	r3, #8
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]

  g_msgs_queue_tail++;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <msgs_get_msg+0x94>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <msgs_get_msg+0x94>)
 8002746:	701a      	strb	r2, [r3, #0]

  if(g_msgs_queue_tail >= MSGS_QUEUE_LEN)
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <msgs_get_msg+0x94>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b3f      	cmp	r3, #63	; 0x3f
 800274e:	d902      	bls.n	8002756 <msgs_get_msg+0x82>
    g_msgs_queue_tail = 0;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <msgs_get_msg+0x94>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]

  return true;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20002d08 	.word	0x20002d08
 8002768:	20002d09 	.word	0x20002d09
 800276c:	20002a08 	.word	0x20002a08

08002770 <SPI1_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI1_TX_Byte(uint8_t au8_DATA)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi_dot1, &au8_DATA, 1, 10);
 800277a:	1df9      	adds	r1, r7, #7
 800277c:	230a      	movs	r3, #10
 800277e:	2201      	movs	r2, #1
 8002780:	4804      	ldr	r0, [pc, #16]	; (8002794 <SPI1_TX_Byte+0x24>)
 8002782:	f004 f812 	bl	80067aa <HAL_SPI_Transmit>
	DWT_Delay_us(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 fb42 	bl	8002e10 <DWT_Delay_us>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20002d28 	.word	0x20002d28

08002798 <SS1_ENABLE>:

static void SS1_ENABLE(uint8_t au8_MATRIX_Instance)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//ss2_disable
 80027a2:	2201      	movs	r2, #1
 80027a4:	2110      	movs	r1, #16
 80027a6:	4807      	ldr	r0, [pc, #28]	; (80027c4 <SS1_ENABLE+0x2c>)
 80027a8:	f003 fa92 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <SS1_ENABLE+0x2c>)
 80027b2:	f003 fa8d 	bl	8005cd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 fb2a 	bl	8002e10 <DWT_Delay_us>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40020000 	.word	0x40020000

080027c8 <SS1_DISABLE>:

static void SS1_DISABLE(uint8_t au8_MATRIX_Instance)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80027d2:	2201      	movs	r2, #1
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <SS1_DISABLE+0x24>)
 80027d8:	f003 fa7a 	bl	8005cd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 80027dc:	2001      	movs	r0, #1
 80027de:	f000 fb17 	bl	8002e10 <DWT_Delay_us>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000

080027f0 <TxByte1>:

static void TxByte1(uint8_t au8_MATRIX_Instance, uint8_t au8_Col, uint8_t au8_Val)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	460b      	mov	r3, r1
 80027fc:	71bb      	strb	r3, [r7, #6]
 80027fe:	4613      	mov	r3, r2
 8002800:	717b      	strb	r3, [r7, #5]
	SS1_ENABLE(au8_MATRIX_Instance);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ffc7 	bl	8002798 <SS1_ENABLE>
	SPI1_TX_Byte(au8_Col);
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ffaf 	bl	8002770 <SPI1_TX_Byte>
	SPI1_TX_Byte(au8_Val);
 8002812:	797b      	ldrb	r3, [r7, #5]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ffab 	bl	8002770 <SPI1_TX_Byte>
	SS1_DISABLE(au8_MATRIX_Instance);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ffd3 	bl	80027c8 <SS1_DISABLE>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <DOT_MATRIX1_Init>:
//----------------------------[ Library Functions' Definitions ]---------------------------

// Functions To Be Used By The User Who Include The Library (Driver)

void DOT_MATRIX1_Init(SPI_HandleTypeDef _hspi)
{
 800282c:	b084      	sub	sp, #16
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	f107 0c10 	add.w	ip, r7, #16
 8002838:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t i = 0, j = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	2300      	movs	r3, #0
 8002842:	71bb      	strb	r3, [r7, #6]
    hspi_dot1 = _hspi;
 8002844:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <DOT_MATRIX1_Init+0x18c>)
 8002846:	4618      	mov	r0, r3
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	2258      	movs	r2, #88	; 0x58
 800284e:	4619      	mov	r1, r3
 8002850:	f009 fa23 	bl	800bc9a <memcpy>
    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	e0a1      	b.n	800299e <DOT_MATRIX1_Init+0x172>
    {
    	// Set BCD Decode Mode
    	SS1_ENABLE(i);
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff9b 	bl	8002798 <SS1_ENABLE>
    	SPI1_TX_Byte(0x09);
 8002862:	2009      	movs	r0, #9
 8002864:	f7ff ff84 	bl	8002770 <SPI1_TX_Byte>
    	SPI1_TX_Byte(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff ff81 	bl	8002770 <SPI1_TX_Byte>
    	SS1_DISABLE(i);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ffa9 	bl	80027c8 <SS1_DISABLE>

    	// Set Dot Matrix Unit Brightness
    	SS1_ENABLE(i);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff8d 	bl	8002798 <SS1_ENABLE>
    	SPI1_TX_Byte(0x0A); // Select Intensity register
 800287e:	200a      	movs	r0, #10
 8002880:	f7ff ff76 	bl	8002770 <SPI1_TX_Byte>
    	SPI1_TX_Byte(0x09);
 8002884:	2009      	movs	r0, #9
 8002886:	f7ff ff73 	bl	8002770 <SPI1_TX_Byte>
    	SS1_DISABLE(i);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff9b 	bl	80027c8 <SS1_DISABLE>

    	// Set Display Refresh
    	SS1_ENABLE(i);
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff7f 	bl	8002798 <SS1_ENABLE>
    	SPI1_TX_Byte(0x0B); // Select Scan-Limit register
 800289a:	200b      	movs	r0, #11
 800289c:	f7ff ff68 	bl	8002770 <SPI1_TX_Byte>
    	SPI1_TX_Byte(0x07); // 1-7
 80028a0:	2007      	movs	r0, #7
 80028a2:	f7ff ff65 	bl	8002770 <SPI1_TX_Byte>
    	SS1_DISABLE(i);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff8d 	bl	80027c8 <SS1_DISABLE>

    	// Turn ON The Display
    	SS1_ENABLE(i);
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff71 	bl	8002798 <SS1_ENABLE>
    	SPI1_TX_Byte(0x0C);
 80028b6:	200c      	movs	r0, #12
 80028b8:	f7ff ff5a 	bl	8002770 <SPI1_TX_Byte>
    	SPI1_TX_Byte(0x01);
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff ff57 	bl	8002770 <SPI1_TX_Byte>
    	SS1_DISABLE(i);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff7f 	bl	80027c8 <SS1_DISABLE>

    	// Disable Display Test
    	SS1_ENABLE(i);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff63 	bl	8002798 <SS1_ENABLE>
    	SPI1_TX_Byte(0x0F);
 80028d2:	200f      	movs	r0, #15
 80028d4:	f7ff ff4c 	bl	8002770 <SPI1_TX_Byte>
    	SPI1_TX_Byte(0x00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff ff49 	bl	8002770 <SPI1_TX_Byte>
    	SS1_DISABLE(i);
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff71 	bl	80027c8 <SS1_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info1[i].Ticks = 0;
 80028e6:	79fa      	ldrb	r2, [r7, #7]
 80028e8:	4934      	ldr	r1, [pc, #208]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info1[i].BufferInit = 0;
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	4930      	ldr	r1, [pc, #192]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	330b      	adds	r3, #11
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info1[i].Arr_Index = 0;
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	492b      	ldr	r1, [pc, #172]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3308      	adds	r3, #8
 800291c:	2200      	movs	r2, #0
 800291e:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info1[i].Col_Index = 0;
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	4926      	ldr	r1, [pc, #152]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	330a      	adds	r3, #10
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info1[i].Max_Ticks = DOT_MATRIX_CfgParam1[i].SCROLL_SPEED;
 8002934:	79fa      	ldrb	r2, [r7, #7]
 8002936:	4922      	ldr	r1, [pc, #136]	; (80029c0 <DOT_MATRIX1_Init+0x194>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3306      	adds	r3, #6
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	79fa      	ldrb	r2, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	491c      	ldr	r1, [pc, #112]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3304      	adds	r3, #4
 8002958:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam1[i].CASCADED_DEVICES*8; j++)
 800295a:	2300      	movs	r3, #0
 800295c:	71bb      	strb	r3, [r7, #6]
 800295e:	e00e      	b.n	800297e <DOT_MATRIX1_Init+0x152>
        {
        	gs_MATRIX_info1[i].Buffer[j] = 0x00;
 8002960:	79fa      	ldrb	r2, [r7, #7]
 8002962:	79b9      	ldrb	r1, [r7, #6]
 8002964:	4815      	ldr	r0, [pc, #84]	; (80029bc <DOT_MATRIX1_Init+0x190>)
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4403      	add	r3, r0
 8002970:	440b      	add	r3, r1
 8002972:	330c      	adds	r3, #12
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam1[i].CASCADED_DEVICES*8; j++)
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	3301      	adds	r3, #1
 800297c:	71bb      	strb	r3, [r7, #6]
 800297e:	79b9      	ldrb	r1, [r7, #6]
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	480f      	ldr	r0, [pc, #60]	; (80029c0 <DOT_MATRIX1_Init+0x194>)
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4403      	add	r3, r0
 800298e:	3308      	adds	r3, #8
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4299      	cmp	r1, r3
 8002996:	dbe3      	blt.n	8002960 <DOT_MATRIX1_Init+0x134>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	3301      	adds	r3, #1
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f43f af5a 	beq.w	800285a <DOT_MATRIX1_Init+0x2e>
        }
    }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029b2:	b004      	add	sp, #16
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20002d28 	.word	0x20002d28
 80029bc:	20002d0c 	.word	0x20002d0c
 80029c0:	0800ced0 	.word	0x0800ced0

080029c4 <MATRIX1_CLEAR>:

void MATRIX1_CLEAR(uint8_t au8_MATRIX_Instance)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0, col = 1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	2301      	movs	r3, #1
 80029d4:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i<DOT_MATRIX_CfgParam1[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e014      	b.n	8002a06 <MATRIX1_CLEAR+0x42>
	{
		for(col = 1; col < 9; col++)
 80029dc:	2301      	movs	r3, #1
 80029de:	73bb      	strb	r3, [r7, #14]
 80029e0:	e00b      	b.n	80029fa <MATRIX1_CLEAR+0x36>
		{
			TxByte1(au8_MATRIX_Instance, col, 0x00);
 80029e2:	7bb9      	ldrb	r1, [r7, #14]
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2200      	movs	r2, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff01 	bl	80027f0 <TxByte1>
			DWT_Delay_us(30);
 80029ee:	201e      	movs	r0, #30
 80029f0:	f000 fa0e 	bl	8002e10 <DWT_Delay_us>
		for(col = 1; col < 9; col++)
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	3301      	adds	r3, #1
 80029f8:	73bb      	strb	r3, [r7, #14]
 80029fa:	7bbb      	ldrb	r3, [r7, #14]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d9f0      	bls.n	80029e2 <MATRIX1_CLEAR+0x1e>
	for(i = 0; i<DOT_MATRIX_CfgParam1[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	3301      	adds	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	79fa      	ldrb	r2, [r7, #7]
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <MATRIX1_CLEAR+0x64>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3308      	adds	r3, #8
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d3de      	bcc.n	80029dc <MATRIX1_CLEAR+0x18>
		}
	}
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	0800ced0 	.word	0x0800ced0

08002a2c <MATRIX1_Write_Char>:

void MATRIX1_Write_Char(uint8_t au8_MATRIX_Instance, uint8_t pos)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	460a      	mov	r2, r1
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71bb      	strb	r3, [r7, #6]
    uint8_t Column = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
    uint8_t FONT_W = 8;
 8002a40:	2308      	movs	r3, #8
 8002a42:	73bb      	strb	r3, [r7, #14]

    TxByte1(au8_MATRIX_Instance, Column, 0x00);DWT_Delay_us(30);
 8002a44:	7bf9      	ldrb	r1, [r7, #15]
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fed0 	bl	80027f0 <TxByte1>
 8002a50:	201e      	movs	r0, #30
 8002a52:	f000 f9dd 	bl	8002e10 <DWT_Delay_us>
    for(Column=1; Column<=FONT_W; Column++)
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e012      	b.n	8002a82 <MATRIX1_Write_Char+0x56>
    {
    	TxByte1(au8_MATRIX_Instance, Column, IMAGES1[pos][Column-1]);
 8002a5c:	79ba      	ldrb	r2, [r7, #6]
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	490f      	ldr	r1, [pc, #60]	; (8002aa0 <MATRIX1_Write_Char+0x74>)
 8002a64:	00d2      	lsls	r2, r2, #3
 8002a66:	440a      	add	r2, r1
 8002a68:	4413      	add	r3, r2
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	7bf9      	ldrb	r1, [r7, #15]
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff febd 	bl	80027f0 <TxByte1>
    	DWT_Delay_us(30);
 8002a76:	201e      	movs	r0, #30
 8002a78:	f000 f9ca 	bl	8002e10 <DWT_Delay_us>
    for(Column=1; Column<=FONT_W; Column++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d9e8      	bls.n	8002a5c <MATRIX1_Write_Char+0x30>
    }
    TxByte1(au8_MATRIX_Instance, Column, 0x00);
 8002a8a:	7bf9      	ldrb	r1, [r7, #15]
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fead 	bl	80027f0 <TxByte1>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <SPI2_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI2_TX_Byte(uint8_t au8_DATA)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi_dot2, &au8_DATA, 1, 10);
 8002aae:	1df9      	adds	r1, r7, #7
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <SPI2_TX_Byte+0x24>)
 8002ab6:	f003 fe78 	bl	80067aa <HAL_SPI_Transmit>
	DWT_Delay_us(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 f9a8 	bl	8002e10 <DWT_Delay_us>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20002d9c 	.word	0x20002d9c

08002acc <SS2_ENABLE>:

static void SS2_ENABLE(uint8_t au8_MATRIX_Instance)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);//ss1_disable
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	4807      	ldr	r0, [pc, #28]	; (8002af8 <SS2_ENABLE+0x2c>)
 8002adc:	f003 f8f8 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <SS2_ENABLE+0x2c>)
 8002ae6:	f003 f8f3 	bl	8005cd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f000 f990 	bl	8002e10 <DWT_Delay_us>

}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40020000 	.word	0x40020000

08002afc <SS2_DISABLE>:

static void SS2_DISABLE(uint8_t au8_MATRIX_Instance)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2110      	movs	r1, #16
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <SS2_DISABLE+0x24>)
 8002b0c:	f003 f8e0 	bl	8005cd0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f000 f97d 	bl	8002e10 <DWT_Delay_us>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40020000 	.word	0x40020000

08002b24 <TxByte2>:

static void TxByte2(uint8_t au8_MATRIX_Instance, uint8_t au8_Col, uint8_t au8_Val)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	71bb      	strb	r3, [r7, #6]
 8002b32:	4613      	mov	r3, r2
 8002b34:	717b      	strb	r3, [r7, #5]
	SS2_ENABLE(au8_MATRIX_Instance);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ffc7 	bl	8002acc <SS2_ENABLE>
	SPI2_TX_Byte(au8_Col);
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ffaf 	bl	8002aa4 <SPI2_TX_Byte>
	SPI2_TX_Byte(au8_Val);
 8002b46:	797b      	ldrb	r3, [r7, #5]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ffab 	bl	8002aa4 <SPI2_TX_Byte>
	SS2_DISABLE(au8_MATRIX_Instance);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ffd3 	bl	8002afc <SS2_DISABLE>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <DOT_MATRIX2_Init>:
//----------------------------[ Library Functions' Definitions ]---------------------------

// Functions To Be Used By The User Who Include The Library (Driver)

void DOT_MATRIX2_Init(SPI_HandleTypeDef _hspi)
{
 8002b60:	b084      	sub	sp, #16
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f107 0c10 	add.w	ip, r7, #16
 8002b6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t i = 0, j = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	2300      	movs	r3, #0
 8002b76:	71bb      	strb	r3, [r7, #6]
    hspi_dot2 = _hspi;
 8002b78:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <DOT_MATRIX2_Init+0x18c>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2258      	movs	r2, #88	; 0x58
 8002b82:	4619      	mov	r1, r3
 8002b84:	f009 f889 	bl	800bc9a <memcpy>
    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	71fb      	strb	r3, [r7, #7]
 8002b8c:	e0a1      	b.n	8002cd2 <DOT_MATRIX2_Init+0x172>
    {
    	// Set BCD Decode Mode
    	SS2_ENABLE(i);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff9b 	bl	8002acc <SS2_ENABLE>
    	SPI2_TX_Byte(0x09);
 8002b96:	2009      	movs	r0, #9
 8002b98:	f7ff ff84 	bl	8002aa4 <SPI2_TX_Byte>
    	SPI2_TX_Byte(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff ff81 	bl	8002aa4 <SPI2_TX_Byte>
    	SS2_DISABLE(i);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ffa9 	bl	8002afc <SS2_DISABLE>
    	// Set Dot Matrix Unit Brightness
    	SS2_ENABLE(i);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff8d 	bl	8002acc <SS2_ENABLE>
    	SPI2_TX_Byte(0x0A); // Select Intensity register
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f7ff ff76 	bl	8002aa4 <SPI2_TX_Byte>
    	SPI2_TX_Byte(0x09);
 8002bb8:	2009      	movs	r0, #9
 8002bba:	f7ff ff73 	bl	8002aa4 <SPI2_TX_Byte>
    	SS2_DISABLE(i);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff9b 	bl	8002afc <SS2_DISABLE>
    	// Set Display Refresh
    	SS2_ENABLE(i);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff7f 	bl	8002acc <SS2_ENABLE>
    	SPI2_TX_Byte(0x0B); // Select Scan-Limit register
 8002bce:	200b      	movs	r0, #11
 8002bd0:	f7ff ff68 	bl	8002aa4 <SPI2_TX_Byte>
    	SPI2_TX_Byte(0x07); // 1-7
 8002bd4:	2007      	movs	r0, #7
 8002bd6:	f7ff ff65 	bl	8002aa4 <SPI2_TX_Byte>
    	SS2_DISABLE(i);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff8d 	bl	8002afc <SS2_DISABLE>
    	// Turn ON The Display
    	SS2_ENABLE(i);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff71 	bl	8002acc <SS2_ENABLE>
    	SPI2_TX_Byte(0x0C);
 8002bea:	200c      	movs	r0, #12
 8002bec:	f7ff ff5a 	bl	8002aa4 <SPI2_TX_Byte>
    	SPI2_TX_Byte(0x01);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7ff ff57 	bl	8002aa4 <SPI2_TX_Byte>
    	SS2_DISABLE(i);
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff7f 	bl	8002afc <SS2_DISABLE>
    	// Disable Display Test
    	SS2_ENABLE(i);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff63 	bl	8002acc <SS2_ENABLE>
    	SPI2_TX_Byte(0x0F);
 8002c06:	200f      	movs	r0, #15
 8002c08:	f7ff ff4c 	bl	8002aa4 <SPI2_TX_Byte>
    	SPI2_TX_Byte(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff ff49 	bl	8002aa4 <SPI2_TX_Byte>
    	SS2_DISABLE(i);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff71 	bl	8002afc <SS2_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info2[i].Ticks = 0;
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info2[i].BufferInit = 0;
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	4930      	ldr	r1, [pc, #192]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	330b      	adds	r3, #11
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info2[i].Arr_Index = 0;
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	492b      	ldr	r1, [pc, #172]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3308      	adds	r3, #8
 8002c50:	2200      	movs	r2, #0
 8002c52:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info2[i].Col_Index = 0;
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	4926      	ldr	r1, [pc, #152]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	330a      	adds	r3, #10
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info2[i].Max_Ticks = DOT_MATRIX_CfgParam2[i].SCROLL_SPEED;
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <DOT_MATRIX2_Init+0x194>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3306      	adds	r3, #6
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	491c      	ldr	r1, [pc, #112]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam2[i].CASCADED_DEVICES*8; j++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	71bb      	strb	r3, [r7, #6]
 8002c92:	e00e      	b.n	8002cb2 <DOT_MATRIX2_Init+0x152>
        {
        	gs_MATRIX_info2[i].Buffer[j] = 0x00;
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	79b9      	ldrb	r1, [r7, #6]
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <DOT_MATRIX2_Init+0x190>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	440b      	add	r3, r1
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam2[i].CASCADED_DEVICES*8; j++)
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	71bb      	strb	r3, [r7, #6]
 8002cb2:	79b9      	ldrb	r1, [r7, #6]
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <DOT_MATRIX2_Init+0x194>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4403      	add	r3, r0
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	dbe3      	blt.n	8002c94 <DOT_MATRIX2_Init+0x134>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	71fb      	strb	r3, [r7, #7]
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f43f af5a 	beq.w	8002b8e <DOT_MATRIX2_Init+0x2e>
        }
    }
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ce6:	b004      	add	sp, #16
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20002d9c 	.word	0x20002d9c
 8002cf0:	20002d80 	.word	0x20002d80
 8002cf4:	0800cedc 	.word	0x0800cedc

08002cf8 <MATRIX2_CLEAR>:

void MATRIX2_CLEAR(uint8_t au8_MATRIX_Instance)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0, col = 1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	2301      	movs	r3, #1
 8002d08:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i<DOT_MATRIX_CfgParam2[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e014      	b.n	8002d3a <MATRIX2_CLEAR+0x42>
	{
		for(col = 1; col < 9; col++)
 8002d10:	2301      	movs	r3, #1
 8002d12:	73bb      	strb	r3, [r7, #14]
 8002d14:	e00b      	b.n	8002d2e <MATRIX2_CLEAR+0x36>
		{
			TxByte2(au8_MATRIX_Instance, col, 0x00);
 8002d16:	7bb9      	ldrb	r1, [r7, #14]
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff01 	bl	8002b24 <TxByte2>
			DWT_Delay_us(30);
 8002d22:	201e      	movs	r0, #30
 8002d24:	f000 f874 	bl	8002e10 <DWT_Delay_us>
		for(col = 1; col < 9; col++)
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73bb      	strb	r3, [r7, #14]
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d9f0      	bls.n	8002d16 <MATRIX2_CLEAR+0x1e>
	for(i = 0; i<DOT_MATRIX_CfgParam2[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	3301      	adds	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	79fa      	ldrb	r2, [r7, #7]
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <MATRIX2_CLEAR+0x64>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3308      	adds	r3, #8
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3de      	bcc.n	8002d10 <MATRIX2_CLEAR+0x18>
		}
	}
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	0800cedc 	.word	0x0800cedc

08002d60 <MATRIX2_Write_Char>:

void MATRIX2_Write_Char(uint8_t au8_MATRIX_Instance, uint8_t pos)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	460a      	mov	r2, r1
 8002d6a:	71fb      	strb	r3, [r7, #7]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71bb      	strb	r3, [r7, #6]
    uint8_t Column = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
    uint8_t FONT_W = 8;
 8002d74:	2308      	movs	r3, #8
 8002d76:	73bb      	strb	r3, [r7, #14]

    TxByte2(au8_MATRIX_Instance, Column, 0x00);DWT_Delay_us(30);
 8002d78:	7bf9      	ldrb	r1, [r7, #15]
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fed0 	bl	8002b24 <TxByte2>
 8002d84:	201e      	movs	r0, #30
 8002d86:	f000 f843 	bl	8002e10 <DWT_Delay_us>
    for(Column=1; Column<=FONT_W; Column++)
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e012      	b.n	8002db6 <MATRIX2_Write_Char+0x56>
    {
    	TxByte2(au8_MATRIX_Instance, Column, IMAGES2[pos][Column-1]);
 8002d90:	79ba      	ldrb	r2, [r7, #6]
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	490f      	ldr	r1, [pc, #60]	; (8002dd4 <MATRIX2_Write_Char+0x74>)
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	440a      	add	r2, r1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	7bf9      	ldrb	r1, [r7, #15]
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff febd 	bl	8002b24 <TxByte2>
    	DWT_Delay_us(30);
 8002daa:	201e      	movs	r0, #30
 8002dac:	f000 f830 	bl	8002e10 <DWT_Delay_us>
    for(Column=1; Column<=FONT_W; Column++)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	3301      	adds	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d9e8      	bls.n	8002d90 <MATRIX2_Write_Char+0x30>
    }
    TxByte2(au8_MATRIX_Instance, Column, 0x00);
 8002dbe:	7bf9      	ldrb	r1, [r7, #15]
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fead 	bl	8002b24 <TxByte2>
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000b8 	.word	0x200000b8

08002dd8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4807      	ldr	r0, [pc, #28]	; (8002e0c <_write+0x34>)
 8002df0:	f005 fa37 	bl	8008262 <HAL_UART_Transmit>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK ? len : 0);
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <_write+0x2a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	e000      	b.n	8002e04 <_write+0x2c>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20003110 	.word	0x20003110

08002e10 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	microseconds *= (SystemCoreClock / 7000000);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <DWT_Delay_us+0x38>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <DWT_Delay_us+0x3c>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0a9b      	lsrs	r3, r3, #10
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	607b      	str	r3, [r7, #4]
	while (microseconds--);
 8002e2e:	bf00      	nop
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1fa      	bne.n	8002e30 <DWT_Delay_us+0x20>
//  uint32_t au32_initial_ticks = DWT->CYCCNT;
//  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
//  au32_microseconds *= au32_ticks;
//  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	20000158 	.word	0x20000158
 8002e4c:	02659117 	.word	0x02659117

08002e50 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10a      	bne.n	8002e78 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7f1b      	ldrb	r3, [r3, #28]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002e6e:	f004 fab3 	bl	80073d8 <HAL_TIM_PWM_Stop_DMA>
		gv.beltdatasentflag=1;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	731a      	strb	r2, [r3, #12]
	}
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10a      	bne.n	8002e98 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7f1b      	ldrb	r3, [r3, #28]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002e8e:	f004 faa3 	bl	80073d8 <HAL_TIM_PWM_Stop_DMA>
		gv.ring1datasentflag=1;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	735a      	strb	r2, [r3, #13]
	}
	if (htim->Instance==TIM1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7f1b      	ldrb	r3, [r3, #28]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8002eae:	f004 fa93 	bl	80073d8 <HAL_TIM_PWM_Stop_DMA>
		gv.ring2datasentflag=1;
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	739a      	strb	r2, [r3, #14]
	}

}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	20002e4c 	.word	0x20002e4c
 8002ec8:	200001f0 	.word	0x200001f0

08002ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ed0:	f002 f888 	bl	8004fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ed4:	f000 f8ac 	bl	8003030 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init(); // must init here
 8002ed8:	f000 fb0a 	bl	80034f0 <MX_DMA_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002edc:	f000 fb38 	bl	8003550 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ee0:	f000 f910 	bl	8003104 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002ee4:	f000 f944 	bl	8003170 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002ee8:	f000 f9dc 	bl	80032a4 <MX_TIM4_Init>
  MX_UART4_Init();
 8002eec:	f000 fa58 	bl	80033a0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8002ef0:	f000 fa80 	bl	80033f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002ef4:	f000 faa8 	bl	8003448 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8002ef8:	f000 fafa 	bl	80034f0 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002efc:	f000 face 	bl	800349c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002f00:	f000 fa2a 	bl	8003358 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n\r\n\r\n\r\n\r\n");
 8002f04:	482d      	ldr	r0, [pc, #180]	; (8002fbc <main+0xf0>)
 8002f06:	f009 f845 	bl	800bf94 <puts>
  printf("****************************************\r\n");
 8002f0a:	482d      	ldr	r0, [pc, #180]	; (8002fc0 <main+0xf4>)
 8002f0c:	f009 f842 	bl	800bf94 <puts>
  printf("*  NEUBILITY 1.5  %s / %s *\r\n", FW_VERSION,FW_DATE);
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <main+0xf8>)
 8002f12:	492d      	ldr	r1, [pc, #180]	; (8002fc8 <main+0xfc>)
 8002f14:	482d      	ldr	r0, [pc, #180]	; (8002fcc <main+0x100>)
 8002f16:	f008 ffb7 	bl	800be88 <iprintf>
  printf("****************************************\r\n\r\n");
 8002f1a:	482d      	ldr	r0, [pc, #180]	; (8002fd0 <main+0x104>)
 8002f1c:	f009 f83a 	bl	800bf94 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f20:	f005 fd58 	bl	80089d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_ultrasonic1 */
  queue_ultrasonic1Handle = osMessageQueueNew (128, sizeof(uint16_t), &queue_ultrasonic1_attributes);
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <main+0x108>)
 8002f26:	2102      	movs	r1, #2
 8002f28:	2080      	movs	r0, #128	; 0x80
 8002f2a:	f005 fe6b 	bl	8008c04 <osMessageQueueNew>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <main+0x10c>)
 8002f32:	6013      	str	r3, [r2, #0]

  /* creation of queue_ultrasonic2 */
  queue_ultrasonic2Handle = osMessageQueueNew (128, sizeof(uint16_t), &queue_ultrasonic2_attributes);
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <main+0x110>)
 8002f36:	2102      	movs	r1, #2
 8002f38:	2080      	movs	r0, #128	; 0x80
 8002f3a:	f005 fe63 	bl	8008c04 <osMessageQueueNew>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <main+0x114>)
 8002f42:	6013      	str	r3, [r2, #0]

  /* creation of queue_interfaceBD */
  queue_interfaceBDHandle = osMessageQueueNew (1024, sizeof(uint16_t), &queue_interfaceBD_attributes);
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <main+0x118>)
 8002f46:	2102      	movs	r1, #2
 8002f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f4c:	f005 fe5a 	bl	8008c04 <osMessageQueueNew>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <main+0x11c>)
 8002f54:	6013      	str	r3, [r2, #0]

  /* creation of queue_debug_test */
  queue_debug_testHandle = osMessageQueueNew (128, sizeof(uint16_t), &queue_debug_test_attributes);
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <main+0x120>)
 8002f58:	2102      	movs	r1, #2
 8002f5a:	2080      	movs	r0, #128	; 0x80
 8002f5c:	f005 fe52 	bl	8008c04 <osMessageQueueNew>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <main+0x124>)
 8002f64:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of apps_process */
  apps_processHandle = osThreadNew(apps_process_task, NULL, &apps_process_attributes);
 8002f66:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <main+0x128>)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4823      	ldr	r0, [pc, #140]	; (8002ff8 <main+0x12c>)
 8002f6c:	f005 fd7c 	bl	8008a68 <osThreadNew>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <main+0x130>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* creation of apps_timer */
  apps_timerHandle = osThreadNew(apps_timer_task, NULL, &apps_timer_attributes);
 8002f76:	4a22      	ldr	r2, [pc, #136]	; (8003000 <main+0x134>)
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4822      	ldr	r0, [pc, #136]	; (8003004 <main+0x138>)
 8002f7c:	f005 fd74 	bl	8008a68 <osThreadNew>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a21      	ldr	r2, [pc, #132]	; (8003008 <main+0x13c>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* creation of p_ultrasonic */
  p_ultrasonicHandle = osThreadNew(p_ultrasonic_task, NULL, &p_ultrasonic_attributes);
 8002f86:	4a21      	ldr	r2, [pc, #132]	; (800300c <main+0x140>)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4821      	ldr	r0, [pc, #132]	; (8003010 <main+0x144>)
 8002f8c:	f005 fd6c 	bl	8008a68 <osThreadNew>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <main+0x148>)
 8002f94:	6013      	str	r3, [r2, #0]

  /* creation of p_interfaceBD */
  p_interfaceBDHandle = osThreadNew(p_interfaceBD_task, NULL, &p_interfaceBD_attributes);
 8002f96:	4a20      	ldr	r2, [pc, #128]	; (8003018 <main+0x14c>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4820      	ldr	r0, [pc, #128]	; (800301c <main+0x150>)
 8002f9c:	f005 fd64 	bl	8008a68 <osThreadNew>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <main+0x154>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* creation of p_uart_test */
  p_uart_testHandle = osThreadNew(p_uart_test_task, NULL, &p_uart_test_attributes);
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <main+0x158>)
 8002fa8:	2100      	movs	r1, #0
 8002faa:	481f      	ldr	r0, [pc, #124]	; (8003028 <main+0x15c>)
 8002fac:	f005 fd5c 	bl	8008a68 <osThreadNew>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <main+0x160>)
 8002fb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002fb6:	f005 fd31 	bl	8008a1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <main+0xee>
 8002fbc:	0800cdb8 	.word	0x0800cdb8
 8002fc0:	0800cdc4 	.word	0x0800cdc4
 8002fc4:	0800cdf0 	.word	0x0800cdf0
 8002fc8:	0800cdfc 	.word	0x0800cdfc
 8002fcc:	0800ce04 	.word	0x0800ce04
 8002fd0:	0800ce24 	.word	0x0800ce24
 8002fd4:	0800cf9c 	.word	0x0800cf9c
 8002fd8:	20003168 	.word	0x20003168
 8002fdc:	0800cfb4 	.word	0x0800cfb4
 8002fe0:	2000316c 	.word	0x2000316c
 8002fe4:	0800cfcc 	.word	0x0800cfcc
 8002fe8:	20003170 	.word	0x20003170
 8002fec:	0800cfe4 	.word	0x0800cfe4
 8002ff0:	20003174 	.word	0x20003174
 8002ff4:	0800cee8 	.word	0x0800cee8
 8002ff8:	0800237d 	.word	0x0800237d
 8002ffc:	20003154 	.word	0x20003154
 8003000:	0800cf0c 	.word	0x0800cf0c
 8003004:	08004e25 	.word	0x08004e25
 8003008:	20003158 	.word	0x20003158
 800300c:	0800cf30 	.word	0x0800cf30
 8003010:	08004829 	.word	0x08004829
 8003014:	2000315c 	.word	0x2000315c
 8003018:	0800cf54 	.word	0x0800cf54
 800301c:	08004319 	.word	0x08004319
 8003020:	20003160 	.word	0x20003160
 8003024:	0800cf78 	.word	0x0800cf78
 8003028:	080045a5 	.word	0x080045a5
 800302c:	20003164 	.word	0x20003164

08003030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b094      	sub	sp, #80	; 0x50
 8003034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003036:	f107 0320 	add.w	r3, r7, #32
 800303a:	2230      	movs	r2, #48	; 0x30
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f008 fe39 	bl	800bcb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <SystemClock_Config+0xcc>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a27      	ldr	r2, [pc, #156]	; (80030fc <SystemClock_Config+0xcc>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <SystemClock_Config+0xcc>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003070:	2300      	movs	r3, #0
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <SystemClock_Config+0xd0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <SystemClock_Config+0xd0>)
 800307a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <SystemClock_Config+0xd0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800308c:	2301      	movs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003096:	2302      	movs	r3, #2
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800309a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030a0:	2308      	movs	r3, #8
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80030a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030ae:	2304      	movs	r3, #4
 80030b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b2:	f107 0320 	add.w	r3, r7, #32
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fe24 	bl	8005d04 <HAL_RCC_OscConfig>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80030c2:	f000 fb01 	bl	80036c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c6:	230f      	movs	r3, #15
 80030c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ca:	2302      	movs	r3, #2
 80030cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2105      	movs	r1, #5
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 f885 	bl	80061f4 <HAL_RCC_ClockConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80030f0:	f000 faea 	bl	80036c8 <Error_Handler>
  }
}
 80030f4:	bf00      	nop
 80030f6:	3750      	adds	r7, #80	; 0x50
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000

08003104 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <MX_SPI1_Init+0x64>)
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <MX_SPI1_Init+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <MX_SPI1_Init+0x64>)
 8003110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_SPI1_Init+0x64>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <MX_SPI1_Init+0x64>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_SPI1_Init+0x64>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_SPI1_Init+0x64>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_SPI1_Init+0x64>)
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_SPI1_Init+0x64>)
 8003138:	2238      	movs	r2, #56	; 0x38
 800313a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MX_SPI1_Init+0x64>)
 800313e:	2200      	movs	r2, #0
 8003140:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_SPI1_Init+0x64>)
 8003144:	2200      	movs	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_SPI1_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_SPI1_Init+0x64>)
 8003150:	220a      	movs	r2, #10
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <MX_SPI1_Init+0x64>)
 8003156:	f003 fa9f 	bl	8006698 <HAL_SPI_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003160:	f000 fab2 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20002df4 	.word	0x20002df4
 800316c:	40013000 	.word	0x40013000

08003170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b092      	sub	sp, #72	; 0x48
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	615a      	str	r2, [r3, #20]
 8003192:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2220      	movs	r2, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f008 fd8b 	bl	800bcb6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <MX_TIM1_Init+0x12c>)
 80031a2:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <MX_TIM1_Init+0x130>)
 80031a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <MX_TIM1_Init+0x12c>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <MX_TIM1_Init+0x12c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80031b2:	4b3a      	ldr	r3, [pc, #232]	; (800329c <MX_TIM1_Init+0x12c>)
 80031b4:	2268      	movs	r2, #104	; 0x68
 80031b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <MX_TIM1_Init+0x12c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <MX_TIM1_Init+0x12c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <MX_TIM1_Init+0x12c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031ca:	4834      	ldr	r0, [pc, #208]	; (800329c <MX_TIM1_Init+0x12c>)
 80031cc:	f003 fdb4 	bl	8006d38 <HAL_TIM_PWM_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80031d6:	f000 fa77 	bl	80036c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031e6:	4619      	mov	r1, r3
 80031e8:	482c      	ldr	r0, [pc, #176]	; (800329c <MX_TIM1_Init+0x12c>)
 80031ea:	f004 ff0b 	bl	8008004 <HAL_TIMEx_MasterConfigSynchronization>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80031f4:	f000 fa68 	bl	80036c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031f8:	2360      	movs	r3, #96	; 0x60
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003204:	2300      	movs	r3, #0
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003218:	2200      	movs	r2, #0
 800321a:	4619      	mov	r1, r3
 800321c:	481f      	ldr	r0, [pc, #124]	; (800329c <MX_TIM1_Init+0x12c>)
 800321e:	f004 fab5 	bl	800778c <HAL_TIM_PWM_ConfigChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003228:	f000 fa4e 	bl	80036c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	2204      	movs	r2, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4819      	ldr	r0, [pc, #100]	; (800329c <MX_TIM1_Init+0x12c>)
 8003236:	f004 faa9 	bl	800778c <HAL_TIM_PWM_ConfigChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003240:	f000 fa42 	bl	80036c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003248:	2208      	movs	r2, #8
 800324a:	4619      	mov	r1, r3
 800324c:	4813      	ldr	r0, [pc, #76]	; (800329c <MX_TIM1_Init+0x12c>)
 800324e:	f004 fa9d 	bl	800778c <HAL_TIM_PWM_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8003258:	f000 fa36 	bl	80036c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003274:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4807      	ldr	r0, [pc, #28]	; (800329c <MX_TIM1_Init+0x12c>)
 8003280:	f004 ff3c 	bl	80080fc <HAL_TIMEx_ConfigBreakDeadTime>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800328a:	f000 fa1d 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800328e:	4803      	ldr	r0, [pc, #12]	; (800329c <MX_TIM1_Init+0x12c>)
 8003290:	f000 fb8e 	bl	80039b0 <HAL_TIM_MspPostInit>

}
 8003294:	bf00      	nop
 8003296:	3748      	adds	r7, #72	; 0x48
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20002e4c 	.word	0x20002e4c
 80032a0:	40010000 	.word	0x40010000

080032a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032aa:	f107 0320 	add.w	r3, r7, #32
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	611a      	str	r2, [r3, #16]
 80032c2:	615a      	str	r2, [r3, #20]
 80032c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <MX_TIM4_Init+0xac>)
 80032c8:	4a22      	ldr	r2, [pc, #136]	; (8003354 <MX_TIM4_Init+0xb0>)
 80032ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 327;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <MX_TIM4_Init+0xac>)
 80032ce:	f240 1247 	movw	r2, #327	; 0x147
 80032d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <MX_TIM4_Init+0xac>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <MX_TIM4_Init+0xac>)
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <MX_TIM4_Init+0xac>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <MX_TIM4_Init+0xac>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80032ec:	4818      	ldr	r0, [pc, #96]	; (8003350 <MX_TIM4_Init+0xac>)
 80032ee:	f003 fd23 	bl	8006d38 <HAL_TIM_PWM_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80032f8:	f000 f9e6 	bl	80036c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003304:	f107 0320 	add.w	r3, r7, #32
 8003308:	4619      	mov	r1, r3
 800330a:	4811      	ldr	r0, [pc, #68]	; (8003350 <MX_TIM4_Init+0xac>)
 800330c:	f004 fe7a 	bl	8008004 <HAL_TIMEx_MasterConfigSynchronization>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003316:	f000 f9d7 	bl	80036c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331a:	2360      	movs	r3, #96	; 0x60
 800331c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800331e:	23fa      	movs	r3, #250	; 0xfa
 8003320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2200      	movs	r2, #0
 800332e:	4619      	mov	r1, r3
 8003330:	4807      	ldr	r0, [pc, #28]	; (8003350 <MX_TIM4_Init+0xac>)
 8003332:	f004 fa2b 	bl	800778c <HAL_TIM_PWM_ConfigChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800333c:	f000 f9c4 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003340:	4803      	ldr	r0, [pc, #12]	; (8003350 <MX_TIM4_Init+0xac>)
 8003342:	f000 fb35 	bl	80039b0 <HAL_TIM_MspPostInit>

}
 8003346:	bf00      	nop
 8003348:	3728      	adds	r7, #40	; 0x28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20002e94 	.word	0x20002e94
 8003354:	40000800 	.word	0x40000800

08003358 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <MX_TIM13_Init+0x40>)
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <MX_TIM13_Init+0x44>)
 8003360:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <MX_TIM13_Init+0x40>)
 8003364:	2253      	movs	r2, #83	; 0x53
 8003366:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <MX_TIM13_Init+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <MX_TIM13_Init+0x40>)
 8003370:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003374:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <MX_TIM13_Init+0x40>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <MX_TIM13_Init+0x40>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_TIM13_Init+0x40>)
 8003384:	f003 fc18 	bl	8006bb8 <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800338e:	f000 f99b 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20002edc 	.word	0x20002edc
 800339c:	40001c00 	.word	0x40001c00

080033a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_UART4_Init+0x4c>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <MX_UART4_Init+0x50>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_UART4_Init+0x4c>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_UART4_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <MX_UART4_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_UART4_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_UART4_Init+0x4c>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_UART4_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_UART4_Init+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <MX_UART4_Init+0x4c>)
 80033d8:	f004 fef6 	bl	80081c8 <HAL_UART_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80033e2:	f000 f971 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20003044 	.word	0x20003044
 80033f0:	40004c00 	.word	0x40004c00

080033f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <MX_USART2_UART_Init+0x50>)
 80033fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003400:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800341a:	220c      	movs	r2, #12
 800341c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003420:	2200      	movs	r2, #0
 8003422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800342a:	4805      	ldr	r0, [pc, #20]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800342c:	f004 fecc 	bl	80081c8 <HAL_UART_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003436:	f000 f947 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20003088 	.word	0x20003088
 8003444:	40004400 	.word	0x40004400

08003448 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <MX_USART3_UART_Init+0x50>)
 8003450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 8003454:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 800346e:	220c      	movs	r2, #12
 8003470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_USART3_UART_Init+0x4c>)
 8003480:	f004 fea2 	bl	80081c8 <HAL_UART_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800348a:	f000 f91d 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200030cc 	.word	0x200030cc
 8003498:	40004800 	.word	0x40004800

0800349c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <MX_USART6_UART_Init+0x50>)
 80034a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034d2:	4805      	ldr	r0, [pc, #20]	; (80034e8 <MX_USART6_UART_Init+0x4c>)
 80034d4:	f004 fe78 	bl	80081c8 <HAL_UART_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034de:	f000 f8f3 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20003110 	.word	0x20003110
 80034ec:	40011400 	.word	0x40011400

080034f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <MX_DMA_Init+0x5c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <MX_DMA_Init+0x5c>)
 8003500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <MX_DMA_Init+0x5c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2105      	movs	r1, #5
 8003516:	203a      	movs	r0, #58	; 0x3a
 8003518:	f001 fe82 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800351c:	203a      	movs	r0, #58	; 0x3a
 800351e:	f001 fe9b 	bl	8005258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2105      	movs	r1, #5
 8003526:	203b      	movs	r0, #59	; 0x3b
 8003528:	f001 fe7a 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800352c:	203b      	movs	r0, #59	; 0x3b
 800352e:	f001 fe93 	bl	8005258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2105      	movs	r1, #5
 8003536:	2045      	movs	r0, #69	; 0x45
 8003538:	f001 fe72 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800353c:	2045      	movs	r0, #69	; 0x45
 800353e:	f001 fe8b 	bl	8005258 <HAL_NVIC_EnableIRQ>

}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	4b45      	ldr	r3, [pc, #276]	; (8003680 <MX_GPIO_Init+0x130>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a44      	ldr	r2, [pc, #272]	; (8003680 <MX_GPIO_Init+0x130>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <MX_GPIO_Init+0x130>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <MX_GPIO_Init+0x130>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a3d      	ldr	r2, [pc, #244]	; (8003680 <MX_GPIO_Init+0x130>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <MX_GPIO_Init+0x130>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <MX_GPIO_Init+0x130>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a36      	ldr	r2, [pc, #216]	; (8003680 <MX_GPIO_Init+0x130>)
 80035a8:	f043 0310 	orr.w	r3, r3, #16
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <MX_GPIO_Init+0x130>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <MX_GPIO_Init+0x130>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <MX_GPIO_Init+0x130>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <MX_GPIO_Init+0x130>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <MX_GPIO_Init+0x130>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a28      	ldr	r2, [pc, #160]	; (8003680 <MX_GPIO_Init+0x130>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <MX_GPIO_Init+0x130>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <MX_GPIO_Init+0x130>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a21      	ldr	r2, [pc, #132]	; (8003680 <MX_GPIO_Init+0x130>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <MX_GPIO_Init+0x130>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_SPISEL1_Pin|GPIO_SPISELw_Pin, GPIO_PIN_RESET);
 800360e:	2200      	movs	r2, #0
 8003610:	2150      	movs	r1, #80	; 0x50
 8003612:	481c      	ldr	r0, [pc, #112]	; (8003684 <MX_GPIO_Init+0x134>)
 8003614:	f002 fb5c 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_EYE1_EN_Pin|GPIO_EYE2_EN_Pin|GPIO_BACKLIGHT1_Pin|GPIO_BACKLIGHT2_Pin, GPIO_PIN_RESET);
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 800361e:	481a      	ldr	r0, [pc, #104]	; (8003688 <MX_GPIO_Init+0x138>)
 8003620:	f002 fb56 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_SPISEL1_Pin GPIO_SPISELw_Pin */
  GPIO_InitStruct.Pin = GPIO_SPISEL1_Pin|GPIO_SPISELw_Pin;
 8003624:	2350      	movs	r3, #80	; 0x50
 8003626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003628:	2301      	movs	r3, #1
 800362a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	4619      	mov	r1, r3
 800363a:	4812      	ldr	r0, [pc, #72]	; (8003684 <MX_GPIO_Init+0x134>)
 800363c:	f002 f9ac 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EYE1_EN_Pin GPIO_EYE2_EN_Pin GPIO_BACKLIGHT1_Pin GPIO_BACKLIGHT2_Pin */
  GPIO_InitStruct.Pin = GPIO_EYE1_EN_Pin|GPIO_EYE2_EN_Pin|GPIO_BACKLIGHT1_Pin|GPIO_BACKLIGHT2_Pin;
 8003640:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8003644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4619      	mov	r1, r3
 8003658:	480b      	ldr	r0, [pc, #44]	; (8003688 <MX_GPIO_Init+0x138>)
 800365a:	f002 f99d 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_HWrev_0_Pin GPIO_HWrev_1_Pin GPIO_HWrev_2_Pin GPIO_HWrev_3_Pin */
  GPIO_InitStruct.Pin = GPIO_HWrev_0_Pin|GPIO_HWrev_1_Pin|GPIO_HWrev_2_Pin|GPIO_HWrev_3_Pin;
 800365e:	2378      	movs	r3, #120	; 0x78
 8003660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_GPIO_Init+0x138>)
 8003672:	f002 f991 	bl	8005998 <HAL_GPIO_Init>

}
 8003676:	bf00      	nop
 8003678:	3730      	adds	r7, #48	; 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020c00 	.word	0x40020c00

0800368c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM13)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d104      	bne.n	80036a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timers_process_tick_interrupt_timer(0);
 800369e:	2000      	movs	r0, #0
 80036a0:	f001 fc10 	bl	8004ec4 <timers_process_tick_interrupt_timer>
		timers_tick_timer();
 80036a4:	f001 fb8a 	bl	8004dbc <timers_tick_timer>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80036b2:	f001 fcb9 	bl	8005028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40001400 	.word	0x40001400

080036c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036cc:	b672      	cpsid	i
}
 80036ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <Error_Handler+0x8>
	...

080036d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_MspInit+0x54>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_MspInit+0x54>)
 80036e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_MspInit+0x54>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_MspInit+0x54>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_MspInit+0x54>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_MspInit+0x54>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	210f      	movs	r1, #15
 8003716:	f06f 0001 	mvn.w	r0, #1
 800371a:	f001 fd81 	bl	8005220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800

0800372c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_SPI_MspInit+0x84>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d12b      	bne.n	80037a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 8003758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_SPI_MspInit+0x88>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003786:	23a0      	movs	r3, #160	; 0xa0
 8003788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003796:	2305      	movs	r3, #5
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <HAL_SPI_MspInit+0x8c>)
 80037a2:	f002 f8f9 	bl	8005998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037a6:	bf00      	nop
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40013000 	.word	0x40013000
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020000 	.word	0x40020000

080037bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5c      	ldr	r2, [pc, #368]	; (800393c <HAL_TIM_PWM_MspInit+0x180>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	f040 809f 	bne.w	800390e <HAL_TIM_PWM_MspInit+0x152>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4b5a      	ldr	r3, [pc, #360]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	4a59      	ldr	r2, [pc, #356]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6453      	str	r3, [r2, #68]	; 0x44
 80037e0:	4b57      	ldr	r3, [pc, #348]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80037ec:	4b55      	ldr	r3, [pc, #340]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_TIM_PWM_MspInit+0x18c>)
 80037f0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80037f2:	4b54      	ldr	r3, [pc, #336]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 80037f4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80037f8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037fa:	4b52      	ldr	r3, [pc, #328]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003800:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003806:	4b4f      	ldr	r3, [pc, #316]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800380e:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003814:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003816:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800381c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800381e:	4b49      	ldr	r3, [pc, #292]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003820:	2200      	movs	r2, #0
 8003822:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003824:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382a:	4b46      	ldr	r3, [pc, #280]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 800382c:	2200      	movs	r2, #0
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003830:	4844      	ldr	r0, [pc, #272]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003832:	f001 fd1f 	bl	8005274 <HAL_DMA_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 800383c:	f7ff ff44 	bl	80036c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003844:	625a      	str	r2, [r3, #36]	; 0x24
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_TIM_PWM_MspInit+0x188>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 800384c:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 800384e:	4a40      	ldr	r2, [pc, #256]	; (8003950 <HAL_TIM_PWM_MspInit+0x194>)
 8003850:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003854:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003858:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 800385c:	2240      	movs	r2, #64	; 0x40
 800385e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003874:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003876:	4b35      	ldr	r3, [pc, #212]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800387c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003880:	2200      	movs	r2, #0
 8003882:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003886:	2200      	movs	r2, #0
 8003888:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 800388c:	2200      	movs	r2, #0
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8003890:	482e      	ldr	r0, [pc, #184]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 8003892:	f001 fcef 	bl	8005274 <HAL_DMA_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 800389c:	f7ff ff14 	bl	80036c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_TIM_PWM_MspInit+0x190>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038ae:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <HAL_TIM_PWM_MspInit+0x19c>)
 80038b0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038b4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80038b8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038cc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038dc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80038f0:	4818      	ldr	r0, [pc, #96]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 80038f2:	f001 fcbf 	bl	8005274 <HAL_DMA_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_PWM_MspInit+0x144>
    {
      Error_Handler();
 80038fc:	f7ff fee4 	bl	80036c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_TIM_PWM_MspInit+0x198>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800390c:	e012      	b.n	8003934 <HAL_TIM_PWM_MspInit+0x178>
  else if(htim_pwm->Instance==TIM4)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_TIM_PWM_MspInit+0x1a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10d      	bne.n	8003934 <HAL_TIM_PWM_MspInit+0x178>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	6413      	str	r3, [r2, #64]	; 0x40
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_TIM_PWM_MspInit+0x184>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40010000 	.word	0x40010000
 8003940:	40023800 	.word	0x40023800
 8003944:	20002f24 	.word	0x20002f24
 8003948:	40026458 	.word	0x40026458
 800394c:	20002f84 	.word	0x20002f84
 8003950:	40026440 	.word	0x40026440
 8003954:	20002fe4 	.word	0x20002fe4
 8003958:	400264a0 	.word	0x400264a0
 800395c:	40000800 	.word	0x40000800

08003960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_TIM_Base_MspInit+0x48>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d115      	bne.n	800399e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_TIM_Base_MspInit+0x4c>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <HAL_TIM_Base_MspInit+0x4c>)
 800397c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_TIM_Base_MspInit+0x4c>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2105      	movs	r1, #5
 8003992:	202c      	movs	r0, #44	; 0x2c
 8003994:	f001 fc44 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003998:	202c      	movs	r0, #44	; 0x2c
 800399a:	f001 fc5d 	bl	8005258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40001c00 	.word	0x40001c00
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HAL_TIM_MspPostInit+0xb4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d11f      	bne.n	8003a12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 80039dc:	f043 0310 	orr.w	r3, r3, #16
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80039ee:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80039f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4818      	ldr	r0, [pc, #96]	; (8003a6c <HAL_TIM_MspPostInit+0xbc>)
 8003a0c:	f001 ffc4 	bl	8005998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003a10:	e023      	b.n	8003a5a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_TIM_MspPostInit+0xc0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d11e      	bne.n	8003a5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 8003a26:	f043 0308 	orr.w	r3, r3, #8
 8003a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_TIM_MspPostInit+0xb8>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	4807      	ldr	r0, [pc, #28]	; (8003a74 <HAL_TIM_MspPostInit+0xc4>)
 8003a56:	f001 ff9f 	bl	8005998 <HAL_GPIO_Init>
}
 8003a5a:	bf00      	nop
 8003a5c:	3728      	adds	r7, #40	; 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40020c00 	.word	0x40020c00

08003a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a84      	ldr	r2, [pc, #528]	; (8003ca8 <HAL_UART_MspInit+0x230>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d153      	bne.n	8003b42 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	4b83      	ldr	r3, [pc, #524]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a82      	ldr	r2, [pc, #520]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b80      	ldr	r3, [pc, #512]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	4b7c      	ldr	r3, [pc, #496]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a7b      	ldr	r2, [pc, #492]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b79      	ldr	r3, [pc, #484]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a74      	ldr	r2, [pc, #464]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b72      	ldr	r3, [pc, #456]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aee:	2302      	movs	r3, #2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afa:	2303      	movs	r3, #3
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003afe:	2308      	movs	r3, #8
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4869      	ldr	r0, [pc, #420]	; (8003cb0 <HAL_UART_MspInit+0x238>)
 8003b0a:	f001 ff45 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b20:	2308      	movs	r3, #8
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4862      	ldr	r0, [pc, #392]	; (8003cb4 <HAL_UART_MspInit+0x23c>)
 8003b2c:	f001 ff34 	bl	8005998 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2105      	movs	r1, #5
 8003b34:	2034      	movs	r0, #52	; 0x34
 8003b36:	f001 fb73 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003b3a:	2034      	movs	r0, #52	; 0x34
 8003b3c:	f001 fb8c 	bl	8005258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b40:	e0ad      	b.n	8003c9e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5c      	ldr	r2, [pc, #368]	; (8003cb8 <HAL_UART_MspInit+0x240>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d134      	bne.n	8003bb6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	4b56      	ldr	r3, [pc, #344]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a55      	ldr	r2, [pc, #340]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6313      	str	r3, [r2, #48]	; 0x30
 8003b78:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b84:	230c      	movs	r3, #12
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b94:	2307      	movs	r3, #7
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4844      	ldr	r0, [pc, #272]	; (8003cb0 <HAL_UART_MspInit+0x238>)
 8003ba0:	f001 fefa 	bl	8005998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2105      	movs	r1, #5
 8003ba8:	2026      	movs	r0, #38	; 0x26
 8003baa:	f001 fb39 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bae:	2026      	movs	r0, #38	; 0x26
 8003bb0:	f001 fb52 	bl	8005258 <HAL_NVIC_EnableIRQ>
}
 8003bb4:	e073      	b.n	8003c9e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a40      	ldr	r2, [pc, #256]	; (8003cbc <HAL_UART_MspInit+0x244>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d135      	bne.n	8003c2c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	4b39      	ldr	r3, [pc, #228]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bce:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	4a31      	ldr	r2, [pc, #196]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	6313      	str	r3, [r2, #48]	; 0x30
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c06:	2303      	movs	r3, #3
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c12:	4619      	mov	r1, r3
 8003c14:	482a      	ldr	r0, [pc, #168]	; (8003cc0 <HAL_UART_MspInit+0x248>)
 8003c16:	f001 febf 	bl	8005998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2105      	movs	r1, #5
 8003c1e:	2027      	movs	r0, #39	; 0x27
 8003c20:	f001 fafe 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c24:	2027      	movs	r0, #39	; 0x27
 8003c26:	f001 fb17 	bl	8005258 <HAL_NVIC_EnableIRQ>
}
 8003c2a:	e038      	b.n	8003c9e <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART6)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_UART_MspInit+0x24c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d133      	bne.n	8003c9e <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c40:	f043 0320 	orr.w	r3, r3, #32
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_UART_MspInit+0x234>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c6e:	23c0      	movs	r3, #192	; 0xc0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c7e:	2308      	movs	r3, #8
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c86:	4619      	mov	r1, r3
 8003c88:	480a      	ldr	r0, [pc, #40]	; (8003cb4 <HAL_UART_MspInit+0x23c>)
 8003c8a:	f001 fe85 	bl	8005998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2105      	movs	r1, #5
 8003c92:	2047      	movs	r0, #71	; 0x47
 8003c94:	f001 fac4 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003c98:	2047      	movs	r0, #71	; 0x47
 8003c9a:	f001 fadd 	bl	8005258 <HAL_NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3740      	adds	r7, #64	; 0x40
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40004c00 	.word	0x40004c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	40020c00 	.word	0x40020c00
 8003cc4:	40011400 	.word	0x40011400

08003cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	2037      	movs	r0, #55	; 0x37
 8003cde:	f001 fa9f 	bl	8005220 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ce2:	2037      	movs	r0, #55	; 0x37
 8003ce4:	f001 fab8 	bl	8005258 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_InitTick+0xa4>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_InitTick+0xa4>)
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_InitTick+0xa4>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d04:	f107 0210 	add.w	r2, r7, #16
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f002 fc90 	bl	8006634 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d14:	f002 fc66 	bl	80065e4 <HAL_RCC_GetPCLK1Freq>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_InitTick+0xa8>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0c9b      	lsrs	r3, r3, #18
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_InitTick+0xac>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_InitTick+0xb0>)
 8003d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_InitTick+0xac>)
 8003d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d38:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <HAL_InitTick+0xac>)
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_InitTick+0xac>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_InitTick+0xac>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003d4c:	4809      	ldr	r0, [pc, #36]	; (8003d74 <HAL_InitTick+0xac>)
 8003d4e:	f002 ff33 	bl	8006bb8 <HAL_TIM_Base_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003d58:	4806      	ldr	r0, [pc, #24]	; (8003d74 <HAL_InitTick+0xac>)
 8003d5a:	f002 ff7d 	bl	8006c58 <HAL_TIM_Base_Start_IT>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	e000      	b.n	8003d64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	431bde83 	.word	0x431bde83
 8003d74:	20003178 	.word	0x20003178
 8003d78:	40001400 	.word	0x40001400

08003d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d80:	e7fe      	b.n	8003d80 <NMI_Handler+0x4>

08003d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d82:	b480      	push	{r7}
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d86:	e7fe      	b.n	8003d86 <HardFault_Handler+0x4>

08003d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d8c:	e7fe      	b.n	8003d8c <MemManage_Handler+0x4>

08003d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d92:	e7fe      	b.n	8003d92 <BusFault_Handler+0x4>

08003d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <UsageFault_Handler+0x4>

08003d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
	#else
    if((huart2.Instance->SR & UART_FLAG_RXNE) != RESET)
 8003dae:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <USART2_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart2.Instance->DR);
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <USART2_IRQHandler+0xac>)
 8003dc6:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_ultrasonic1Handle, (uint8_t *)&data, 0, 0);
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <USART2_IRQHandler+0xb0>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4920      	ldr	r1, [pc, #128]	; (8003e54 <USART2_IRQHandler+0xac>)
 8003dd2:	f004 ff8b 	bl	8008cec <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart2);
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
    }
	#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8003dd6:	e036      	b.n	8003e46 <USART2_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart2);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart2);
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart2);
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003e30:	2300      	movs	r3, #0
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <USART2_IRQHandler+0xa8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20003088 	.word	0x20003088
 8003e54:	200031c0 	.word	0x200031c0
 8003e58:	20003168 	.word	0x20003168

08003e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	#else
    if((huart3.Instance->SR & UART_FLAG_RXNE) != RESET)
 8003e62:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <USART3_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart3.Instance->DR);
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <USART3_IRQHandler+0xac>)
 8003e7a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_ultrasonic2Handle, (uint8_t *)&data, 0, 0);
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <USART3_IRQHandler+0xb0>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2200      	movs	r2, #0
 8003e84:	4920      	ldr	r1, [pc, #128]	; (8003f08 <USART3_IRQHandler+0xac>)
 8003e86:	f004 ff31 	bl	8008cec <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart3);
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
	}
	#endif
  /* USER CODE END USART3_IRQn 1 */
}
 8003e8a:	e036      	b.n	8003efa <USART3_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart3);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart3);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart3);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart3);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <USART3_IRQHandler+0xa8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200030cc 	.word	0x200030cc
 8003f08:	200031c1 	.word	0x200031c1
 8003f0c:	2000316c 	.word	0x2000316c

08003f10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003f16:	f003 fb31 	bl	800757c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20002edc 	.word	0x20002edc

08003f24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */
	#else
    if((huart4.Instance->SR & UART_FLAG_RXNE) != RESET)
 8003f2a:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <UART4_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart4.Instance->DR);
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <UART4_IRQHandler+0xac>)
 8003f42:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_interfaceBDHandle, (uint8_t *)&data, 0, 0);
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <UART4_IRQHandler+0xb0>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4920      	ldr	r1, [pc, #128]	; (8003fd0 <UART4_IRQHandler+0xac>)
 8003f4e:	f004 fecd 	bl	8008cec <osMessageQueuePut>
		__HAL_UART_CLEAR_OREFLAG(&huart4);
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
	}
	#endif
  /* USER CODE END UART4_IRQn 1 */
}
 8003f52:	e036      	b.n	8003fc2 <UART4_IRQHandler+0x9e>
		__HAL_UART_CLEAR_PEFLAG(&huart4);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart4);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart4);
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart4);
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003fac:	2300      	movs	r3, #0
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <UART4_IRQHandler+0xa8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
}
 8003fc2:	bf00      	nop
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20003044 	.word	0x20003044
 8003fd0:	200031c2 	.word	0x200031c2
 8003fd4:	20003170 	.word	0x20003170

08003fd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003fdc:	4802      	ldr	r0, [pc, #8]	; (8003fe8 <TIM7_IRQHandler+0x10>)
 8003fde:	f003 facd 	bl	800757c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20003178 	.word	0x20003178

08003fec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003ff0:	4802      	ldr	r0, [pc, #8]	; (8003ffc <DMA2_Stream2_IRQHandler+0x10>)
 8003ff2:	f001 fa67 	bl	80054c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20002f84 	.word	0x20002f84

08004000 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004004:	4802      	ldr	r0, [pc, #8]	; (8004010 <DMA2_Stream3_IRQHandler+0x10>)
 8004006:	f001 fa5d 	bl	80054c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20002f24 	.word	0x20002f24

08004014 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8004018:	4802      	ldr	r0, [pc, #8]	; (8004024 <DMA2_Stream6_IRQHandler+0x10>)
 800401a:	f001 fa53 	bl	80054c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20002fe4 	.word	0x20002fe4

08004028 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
	#if 0
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */
	#else
	if((huart6.Instance->SR & UART_FLAG_RXNE) != RESET)
 800402e:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <USART6_IRQHandler+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <USART6_IRQHandler+0x30>
	{
		data = (uint8_t) READ_REG(huart6.Instance->DR);
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <USART6_IRQHandler+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <USART6_IRQHandler+0xc0>)
 8004046:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(queue_debug_testHandle, (uint8_t *)&data, 0, 0);
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <USART6_IRQHandler+0xc4>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	2200      	movs	r2, #0
 8004050:	4925      	ldr	r1, [pc, #148]	; (80040e8 <USART6_IRQHandler+0xc0>)
 8004052:	f004 fe4b 	bl	8008cec <osMessageQueuePut>
 8004056:	e036      	b.n	80040c6 <USART6_IRQHandler+0x9e>
	}
	else
	{
		__HAL_UART_CLEAR_PEFLAG(&huart6);
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <USART6_IRQHandler+0xbc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <USART6_IRQHandler+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697b      	ldr	r3, [r7, #20]
		__HAL_UART_CLEAR_FEFLAG(&huart6);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <USART6_IRQHandler+0xbc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <USART6_IRQHandler+0xbc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]
		__HAL_UART_CLEAR_NEFLAG(&huart6);
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <USART6_IRQHandler+0xbc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <USART6_IRQHandler+0xbc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_CLEAR_OREFLAG(&huart6);
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
		__HAL_UART_CLEAR_IDLEFLAG(&huart6);
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
	}
	__HAL_UART_CLEAR_PEFLAG(&huart6);
 80040c6:	2300      	movs	r3, #0
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <USART6_IRQHandler+0xbc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
	#endif
  /* USER CODE END USART6_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20003110 	.word	0x20003110
 80040e8:	200031c3 	.word	0x200031c3
 80040ec:	20003174 	.word	0x20003174

080040f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e00a      	b.n	8004118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004102:	f3af 8000 	nop.w
 8004106:	4601      	mov	r1, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	b2ca      	uxtb	r2, r1
 8004110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf0      	blt.n	8004102 <_read+0x12>
	}

return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_close>:
	}
	return len;
}

int _close(int file)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
	return -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004152:	605a      	str	r2, [r3, #4]
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_isatty>:

int _isatty(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
	return 1;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <_sbrk+0x5c>)
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <_sbrk+0x60>)
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <_sbrk+0x64>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <_sbrk+0x64>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <_sbrk+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d207      	bcs.n	80041d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c4:	f007 fc46 	bl	800ba54 <__errno>
 80041c8:	4603      	mov	r3, r0
 80041ca:	220c      	movs	r2, #12
 80041cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e009      	b.n	80041e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <_sbrk+0x64>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <_sbrk+0x64>)
 80041e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20020000 	.word	0x20020000
 80041f4:	00000400 	.word	0x00000400
 80041f8:	200031c4 	.word	0x200031c4
 80041fc:	2000c068 	.word	0x2000c068

08004200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <SystemInit+0x20>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <SystemInit+0x20>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <init_p_interfaceboard>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_p_interfaceboard(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	Uart_Init_Custom(&huart4);
 8004228:	480a      	ldr	r0, [pc, #40]	; (8004254 <init_p_interfaceboard+0x30>)
 800422a:	f000 fcef 	bl	8004c0c <Uart_Init_Custom>
	osThreadResume (p_interfaceBDHandle);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <init_p_interfaceboard+0x34>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f004 fcaa 	bl	8008b8c <osThreadResume>

	TX_PACKET_B2B[0] = 0xFF;
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <init_p_interfaceboard+0x38>)
 800423a:	22ff      	movs	r2, #255	; 0xff
 800423c:	701a      	strb	r2, [r3, #0]
	TX_PACKET_B2B[1] = 0xFF;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <init_p_interfaceboard+0x38>)
 8004240:	22ff      	movs	r2, #255	; 0xff
 8004242:	705a      	strb	r2, [r3, #1]
	TX_PACKET_B2B[2] = 0x0A;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <init_p_interfaceboard+0x38>)
 8004246:	220a      	movs	r2, #10
 8004248:	709a      	strb	r2, [r3, #2]
	TX_PACKET_B2B[3] = PID_E2S_SENSOR_DATA;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <init_p_interfaceboard+0x38>)
 800424c:	220c      	movs	r2, #12
 800424e:	70da      	strb	r2, [r3, #3]
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20003044 	.word	0x20003044
 8004258:	20003160 	.word	0x20003160
 800425c:	200031c8 	.word	0x200031c8

08004260 <B2BChksumMake>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
uint8_t B2BChksumMake(uint8_t* _data, uint8_t _len)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]

	for(int i = 0 ; i < _len ; i++)
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	e009      	b.n	800428a <B2BChksumMake+0x2a>
	{
		chksum += _data[i];
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	4413      	add	r3, r2
 8004282:	73fb      	strb	r3, [r7, #15]
	for(int i = 0 ; i < _len ; i++)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	dbf1      	blt.n	8004276 <B2BChksumMake+0x16>
	}
	chksum ^= 0xFF;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	43db      	mvns	r3, r3
 8004296:	73fb      	strb	r3, [r7, #15]
	chksum += 1;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	3301      	adds	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]

	return chksum;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <RosChksumChk>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
bool RosChksumChk(uint8_t* Data)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	uint8_t sum = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]
	uint8_t len = Data[4] + 5 - 1; // len + 5 - 1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	73fb      	strb	r3, [r7, #15]

	if(Data[4] == 0) return false;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <RosChksumChk+0x24>
 80042cc:	2300      	movs	r3, #0
 80042ce:	e01c      	b.n	800430a <RosChksumChk+0x5e>


	for	(int i=0 ;i < len; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e009      	b.n	80042ea <RosChksumChk+0x3e>
		sum += Data[i];
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	4413      	add	r3, r2
 80042e2:	75fb      	strb	r3, [r7, #23]
	for	(int i=0 ;i < len; i++)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3301      	adds	r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbf1      	blt.n	80042d6 <RosChksumChk+0x2a>
	if( ((sum + Data[len]) & 0x00FF) == 0)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	4413      	add	r3, r2
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <RosChksumChk+0x5c>
		return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <RosChksumChk+0x5e>
	else
		return false;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <p_interfaceBD_task>:
static uint32_t execute_idx = 0;
static uint8_t buf[MAX_PACKET_LENGTH];
static uint8_t buffer_len = 0;
static uint8_t data_seq = 0;
void p_interfaceBD_task(void *argument)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	//uint8_t data_seq = 0;
	u8 data;
	osMessageQueueReset(queue_interfaceBDHandle);
 8004320:	4b8e      	ldr	r3, [pc, #568]	; (800455c <p_interfaceBD_task+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fd9f 	bl	8008e68 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_interfaceBDHandle, &data, NULL, 10) == osOK)
 800432a:	4b8c      	ldr	r3, [pc, #560]	; (800455c <p_interfaceBD_task+0x244>)
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f107 010f 	add.w	r1, r7, #15
 8004332:	230a      	movs	r3, #10
 8004334:	2200      	movs	r2, #0
 8004336:	f004 fd39 	bl	8008dac <osMessageQueueGet>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 809b 	bne.w	8004478 <p_interfaceBD_task+0x160>
		{
			if(start_parsing == true)
 8004342:	4b87      	ldr	r3, [pc, #540]	; (8004560 <p_interfaceBD_task+0x248>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d147      	bne.n	80043da <p_interfaceBD_task+0xc2>
			{
				if((data_seq == 0) && data == INTERFACE_HEADER_1) data_seq = 1; // HEADER1
 800434a:	4b86      	ldr	r3, [pc, #536]	; (8004564 <p_interfaceBD_task+0x24c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <p_interfaceBD_task+0x46>
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2bff      	cmp	r3, #255	; 0xff
 8004356:	d102      	bne.n	800435e <p_interfaceBD_task+0x46>
 8004358:	4b82      	ldr	r3, [pc, #520]	; (8004564 <p_interfaceBD_task+0x24c>)
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
				if((data_seq == 1) && (data == INTERFACE_HEADER_2)) data_seq = 2; // HEADER2
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <p_interfaceBD_task+0x24c>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <p_interfaceBD_task+0x5a>
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2bff      	cmp	r3, #255	; 0xff
 800436a:	d102      	bne.n	8004372 <p_interfaceBD_task+0x5a>
 800436c:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <p_interfaceBD_task+0x24c>)
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]
				if((data_seq == 2) && (data == INTERFACE_MID)) // MID
 8004372:	4b7c      	ldr	r3, [pc, #496]	; (8004564 <p_interfaceBD_task+0x24c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d139      	bne.n	80043ee <p_interfaceBD_task+0xd6>
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b0b      	cmp	r3, #11
 800437e:	d136      	bne.n	80043ee <p_interfaceBD_task+0xd6>
				{
					// Start
					data_seq = 0;
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <p_interfaceBD_task+0x24c>)
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
					buffer_len = 0;
 8004386:	4b78      	ldr	r3, [pc, #480]	; (8004568 <p_interfaceBD_task+0x250>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
					start_parsing = false;
 800438c:	4b74      	ldr	r3, [pc, #464]	; (8004560 <p_interfaceBD_task+0x248>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
					memset(buf,0x00,MAX_PACKET_LENGTH);
 8004392:	2216      	movs	r2, #22
 8004394:	2100      	movs	r1, #0
 8004396:	4875      	ldr	r0, [pc, #468]	; (800456c <p_interfaceBD_task+0x254>)
 8004398:	f007 fc8d 	bl	800bcb6 <memset>
					buf[buffer_len++] = INTERFACE_HEADER_1;
 800439c:	4b72      	ldr	r3, [pc, #456]	; (8004568 <p_interfaceBD_task+0x250>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	b2d1      	uxtb	r1, r2
 80043a4:	4a70      	ldr	r2, [pc, #448]	; (8004568 <p_interfaceBD_task+0x250>)
 80043a6:	7011      	strb	r1, [r2, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b70      	ldr	r3, [pc, #448]	; (800456c <p_interfaceBD_task+0x254>)
 80043ac:	21ff      	movs	r1, #255	; 0xff
 80043ae:	5499      	strb	r1, [r3, r2]
					buf[buffer_len++] = INTERFACE_HEADER_2;
 80043b0:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <p_interfaceBD_task+0x250>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	b2d1      	uxtb	r1, r2
 80043b8:	4a6b      	ldr	r2, [pc, #428]	; (8004568 <p_interfaceBD_task+0x250>)
 80043ba:	7011      	strb	r1, [r2, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	4b6b      	ldr	r3, [pc, #428]	; (800456c <p_interfaceBD_task+0x254>)
 80043c0:	21ff      	movs	r1, #255	; 0xff
 80043c2:	5499      	strb	r1, [r3, r2]
					buf[buffer_len++] = INTERFACE_MID;
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <p_interfaceBD_task+0x250>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	b2d1      	uxtb	r1, r2
 80043cc:	4a66      	ldr	r2, [pc, #408]	; (8004568 <p_interfaceBD_task+0x250>)
 80043ce:	7011      	strb	r1, [r2, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b66      	ldr	r3, [pc, #408]	; (800456c <p_interfaceBD_task+0x254>)
 80043d4:	210b      	movs	r1, #11
 80043d6:	5499      	strb	r1, [r3, r2]
 80043d8:	e009      	b.n	80043ee <p_interfaceBD_task+0xd6>
				}
			}
			else buf[buffer_len++] = data;
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <p_interfaceBD_task+0x250>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	b2d1      	uxtb	r1, r2
 80043e2:	4a61      	ldr	r2, [pc, #388]	; (8004568 <p_interfaceBD_task+0x250>)
 80043e4:	7011      	strb	r1, [r2, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	7bf9      	ldrb	r1, [r7, #15]
 80043ea:	4b60      	ldr	r3, [pc, #384]	; (800456c <p_interfaceBD_task+0x254>)
 80043ec:	5499      	strb	r1, [r3, r2]

			if((buffer_len >= (buf[4]+5)) && (buf[4] > 2) && (start_parsing == false))
 80043ee:	4b5f      	ldr	r3, [pc, #380]	; (800456c <p_interfaceBD_task+0x254>)
 80043f0:	791b      	ldrb	r3, [r3, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4a5c      	ldr	r2, [pc, #368]	; (8004568 <p_interfaceBD_task+0x250>)
 80043f6:	7812      	ldrb	r2, [r2, #0]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	da2c      	bge.n	8004456 <p_interfaceBD_task+0x13e>
 80043fc:	4b5b      	ldr	r3, [pc, #364]	; (800456c <p_interfaceBD_task+0x254>)
 80043fe:	791b      	ldrb	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d928      	bls.n	8004456 <p_interfaceBD_task+0x13e>
 8004404:	4b56      	ldr	r3, [pc, #344]	; (8004560 <p_interfaceBD_task+0x248>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d124      	bne.n	8004456 <p_interfaceBD_task+0x13e>
			{
				if(RosChksumChk(buf))
 800440c:	4857      	ldr	r0, [pc, #348]	; (800456c <p_interfaceBD_task+0x254>)
 800440e:	f7ff ff4d 	bl	80042ac <RosChksumChk>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <p_interfaceBD_task+0x126>
				{
					switch(buf[3]) // pid
 8004418:	4b54      	ldr	r3, [pc, #336]	; (800456c <p_interfaceBD_task+0x254>)
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	2b0b      	cmp	r3, #11
 800441e:	d109      	bne.n	8004434 <p_interfaceBD_task+0x11c>
					{
						case PID_S2L_CONTROL : LED_Control_Set(buf[5],buf[6], buf[7]); break;
 8004420:	4b52      	ldr	r3, [pc, #328]	; (800456c <p_interfaceBD_task+0x254>)
 8004422:	795b      	ldrb	r3, [r3, #5]
 8004424:	4a51      	ldr	r2, [pc, #324]	; (800456c <p_interfaceBD_task+0x254>)
 8004426:	7991      	ldrb	r1, [r2, #6]
 8004428:	4a50      	ldr	r2, [pc, #320]	; (800456c <p_interfaceBD_task+0x254>)
 800442a:	79d2      	ldrb	r2, [r2, #7]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fd fec1 	bl	80021b4 <LED_Control_Set>
 8004432:	e005      	b.n	8004440 <p_interfaceBD_task+0x128>
						default : printf("%s\r\n",buf); break;
 8004434:	494d      	ldr	r1, [pc, #308]	; (800456c <p_interfaceBD_task+0x254>)
 8004436:	484e      	ldr	r0, [pc, #312]	; (8004570 <p_interfaceBD_task+0x258>)
 8004438:	f007 fd26 	bl	800be88 <iprintf>
 800443c:	e000      	b.n	8004440 <p_interfaceBD_task+0x128>
					}
				}
 800443e:	bf00      	nop
				buffer_len = 0;
 8004440:	4b49      	ldr	r3, [pc, #292]	; (8004568 <p_interfaceBD_task+0x250>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
				start_parsing = true;
 8004446:	4b46      	ldr	r3, [pc, #280]	; (8004560 <p_interfaceBD_task+0x248>)
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
				memset(buf,0x00,MAX_PACKET_LENGTH);
 800444c:	2216      	movs	r2, #22
 800444e:	2100      	movs	r1, #0
 8004450:	4846      	ldr	r0, [pc, #280]	; (800456c <p_interfaceBD_task+0x254>)
 8004452:	f007 fc30 	bl	800bcb6 <memset>
			}

			if(buffer_len > MAX_PACKET_LENGTH)
 8004456:	4b44      	ldr	r3, [pc, #272]	; (8004568 <p_interfaceBD_task+0x250>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b16      	cmp	r3, #22
 800445c:	f67f af65 	bls.w	800432a <p_interfaceBD_task+0x12>
			{
				buffer_len = 0;
 8004460:	4b41      	ldr	r3, [pc, #260]	; (8004568 <p_interfaceBD_task+0x250>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
				start_parsing = true;
 8004466:	4b3e      	ldr	r3, [pc, #248]	; (8004560 <p_interfaceBD_task+0x248>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
				memset(buf,0x00,MAX_PACKET_LENGTH);
 800446c:	2216      	movs	r2, #22
 800446e:	2100      	movs	r1, #0
 8004470:	483e      	ldr	r0, [pc, #248]	; (800456c <p_interfaceBD_task+0x254>)
 8004472:	f007 fc20 	bl	800bcb6 <memset>
 8004476:	e758      	b.n	800432a <p_interfaceBD_task+0x12>
		}
		else
		{
			// SEND

			TX_PACKET_B2B[0] = 0xFF;
 8004478:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <p_interfaceBD_task+0x25c>)
 800447a:	22ff      	movs	r2, #255	; 0xff
 800447c:	701a      	strb	r2, [r3, #0]
			TX_PACKET_B2B[1] = 0xFF;
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004480:	22ff      	movs	r2, #255	; 0xff
 8004482:	705a      	strb	r2, [r3, #1]
			TX_PACKET_B2B[2] = 0x0A;
 8004484:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004486:	220a      	movs	r2, #10
 8004488:	709a      	strb	r2, [r3, #2]
			TX_PACKET_B2B[3] = 0x0C; // protocol defined
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <p_interfaceBD_task+0x25c>)
 800448c:	220c      	movs	r2, #12
 800448e:	70da      	strb	r2, [r3, #3]

			TX_PACKET_B2B[4] = 8 + 1;// data + chksum
 8004490:	4b38      	ldr	r3, [pc, #224]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004492:	2209      	movs	r2, #9
 8004494:	711a      	strb	r2, [r3, #4]
			// TOF 1
			TX_PACKET_B2B[5] = 0x00;
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004498:	2200      	movs	r2, #0
 800449a:	715a      	strb	r2, [r3, #5]
			TX_PACKET_B2B[6] = 0x00;
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <p_interfaceBD_task+0x25c>)
 800449e:	2200      	movs	r2, #0
 80044a0:	719a      	strb	r2, [r3, #6]
			// TOF 2
			TX_PACKET_B2B[7] = 0x00;
 80044a2:	4b34      	ldr	r3, [pc, #208]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	71da      	strb	r2, [r3, #7]
			TX_PACKET_B2B[8] = 0x00;
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	721a      	strb	r2, [r3, #8]

			TX_PACKET_B2B[9] = 0xDE;
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044b0:	22de      	movs	r2, #222	; 0xde
 80044b2:	725a      	strb	r2, [r3, #9]
			TX_PACKET_B2B[10] = 0xDE;
 80044b4:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044b6:	22de      	movs	r2, #222	; 0xde
 80044b8:	729a      	strb	r2, [r3, #10]
			TX_PACKET_B2B[11] = 0xDE;
 80044ba:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044bc:	22de      	movs	r2, #222	; 0xde
 80044be:	72da      	strb	r2, [r3, #11]
			TX_PACKET_B2B[12] = 0xDE;
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044c2:	22de      	movs	r2, #222	; 0xde
 80044c4:	731a      	strb	r2, [r3, #12]
			if(gv.ultrasonic_1 != 9999)
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <p_interfaceBD_task+0x260>)
 80044c8:	885b      	ldrh	r3, [r3, #2]
 80044ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d015      	beq.n	80044fe <p_interfaceBD_task+0x1e6>
			{
				TX_PACKET_B2B[9] = (uint8_t)((gv.ultrasonic_1 / 10 ) & 0x00FF);
 80044d2:	4b29      	ldr	r3, [pc, #164]	; (8004578 <p_interfaceBD_task+0x260>)
 80044d4:	885b      	ldrh	r3, [r3, #2]
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <p_interfaceBD_task+0x264>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044e4:	725a      	strb	r2, [r3, #9]
				TX_PACKET_B2B[10] = (uint8_t)(((gv.ultrasonic_1 / 10 ) & 0xFF00) >> 8);
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <p_interfaceBD_task+0x260>)
 80044e8:	885b      	ldrh	r3, [r3, #2]
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <p_interfaceBD_task+0x264>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <p_interfaceBD_task+0x25c>)
 80044fc:	729a      	strb	r2, [r3, #10]

			}
			if(gv.ultrasonic_2 != 9999)
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <p_interfaceBD_task+0x260>)
 8004500:	889b      	ldrh	r3, [r3, #4]
 8004502:	f242 720f 	movw	r2, #9999	; 0x270f
 8004506:	4293      	cmp	r3, r2
 8004508:	d015      	beq.n	8004536 <p_interfaceBD_task+0x21e>
			{
				TX_PACKET_B2B[11] = (uint8_t)((gv.ultrasonic_2 / 10 ) & 0x00FF);
 800450a:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <p_interfaceBD_task+0x260>)
 800450c:	889b      	ldrh	r3, [r3, #4]
 800450e:	4a1b      	ldr	r2, [pc, #108]	; (800457c <p_interfaceBD_task+0x264>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	b29b      	uxth	r3, r3
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <p_interfaceBD_task+0x25c>)
 800451c:	72da      	strb	r2, [r3, #11]
				TX_PACKET_B2B[12] = (uint8_t)(((gv.ultrasonic_2 / 10 ) & 0xFF00) >> 8);
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <p_interfaceBD_task+0x260>)
 8004520:	889b      	ldrh	r3, [r3, #4]
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <p_interfaceBD_task+0x264>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	08db      	lsrs	r3, r3, #3
 800452a:	b29b      	uxth	r3, r3
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	b29b      	uxth	r3, r3
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004534:	731a      	strb	r2, [r3, #12]
			}
			TX_PACKET_B2B[13] = B2BChksumMake(TX_PACKET_B2B, 13);
 8004536:	210d      	movs	r1, #13
 8004538:	480e      	ldr	r0, [pc, #56]	; (8004574 <p_interfaceBD_task+0x25c>)
 800453a:	f7ff fe91 	bl	8004260 <B2BChksumMake>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <p_interfaceBD_task+0x25c>)
 8004544:	735a      	strb	r2, [r3, #13]
			HAL_UART_Transmit(&huart3, TX_PACKET_B2B, 14, 100);
 8004546:	2364      	movs	r3, #100	; 0x64
 8004548:	220e      	movs	r2, #14
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <p_interfaceBD_task+0x25c>)
 800454c:	480c      	ldr	r0, [pc, #48]	; (8004580 <p_interfaceBD_task+0x268>)
 800454e:	f003 fe88 	bl	8008262 <HAL_UART_Transmit>
			osDelay(100);
 8004552:	2064      	movs	r0, #100	; 0x64
 8004554:	f004 fb3b 	bl	8008bce <osDelay>
		if(osMessageQueueGet(queue_interfaceBDHandle, &data, NULL, 10) == osOK)
 8004558:	e6e7      	b.n	800432a <p_interfaceBD_task+0x12>
 800455a:	bf00      	nop
 800455c:	20003170 	.word	0x20003170
 8004560:	2000015c 	.word	0x2000015c
 8004564:	200031ff 	.word	0x200031ff
 8004568:	200031fe 	.word	0x200031fe
 800456c:	200031e8 	.word	0x200031e8
 8004570:	0800ce50 	.word	0x0800ce50
 8004574:	200031c8 	.word	0x200031c8
 8004578:	200001f0 	.word	0x200001f0
 800457c:	cccccccd 	.word	0xcccccccd
 8004580:	200030cc 	.word	0x200030cc

08004584 <init_p_uart_test>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_p_uart_test(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	Uart_Init_Custom(&huart6); // DBG TEST
 8004588:	4804      	ldr	r0, [pc, #16]	; (800459c <init_p_uart_test+0x18>)
 800458a:	f000 fb3f 	bl	8004c0c <Uart_Init_Custom>
	osThreadResume (p_uart_testHandle);
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <init_p_uart_test+0x1c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f004 fafa 	bl	8008b8c <osThreadResume>
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20003110 	.word	0x20003110
 80045a0:	20003164 	.word	0x20003164

080045a4 <p_uart_test_task>:



void p_uart_test_task(void *argument)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	bool is_arrival_packet = false;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
	u8 data;
	memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 80045b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b4:	2100      	movs	r1, #0
 80045b6:	4838      	ldr	r0, [pc, #224]	; (8004698 <p_uart_test_task+0xf4>)
 80045b8:	f007 fb7d 	bl	800bcb6 <memset>

	osMessageQueueReset(queue_debug_testHandle);
 80045bc:	4b37      	ldr	r3, [pc, #220]	; (800469c <p_uart_test_task+0xf8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f004 fc51 	bl	8008e68 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_debug_testHandle, &data, NULL, 100) == osOK)
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <p_uart_test_task+0xf8>)
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	f107 010e 	add.w	r1, r7, #14
 80045ce:	2364      	movs	r3, #100	; 0x64
 80045d0:	2200      	movs	r2, #0
 80045d2:	f004 fbeb 	bl	8008dac <osMessageQueueGet>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d159      	bne.n	8004690 <p_uart_test_task+0xec>
		{
			if(data == '[')
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	2b5b      	cmp	r3, #91	; 0x5b
 80045e0:	d10b      	bne.n	80045fa <p_uart_test_task+0x56>
			{
				buffer_len = 0;
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <p_uart_test_task+0xfc>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
				is_arrival_packet = false;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
				memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 80045ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f0:	2100      	movs	r1, #0
 80045f2:	4829      	ldr	r0, [pc, #164]	; (8004698 <p_uart_test_task+0xf4>)
 80045f4:	f007 fb5f 	bl	800bcb6 <memset>
 80045f8:	e00f      	b.n	800461a <p_uart_test_task+0x76>
			}
			else if(data == ']') is_arrival_packet = true;
 80045fa:	7bbb      	ldrb	r3, [r7, #14]
 80045fc:	2b5d      	cmp	r3, #93	; 0x5d
 80045fe:	d102      	bne.n	8004606 <p_uart_test_task+0x62>
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e009      	b.n	800461a <p_uart_test_task+0x76>
			else buffer[buffer_len++] = data;
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <p_uart_test_task+0xfc>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	b2d1      	uxtb	r1, r2
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <p_uart_test_task+0xfc>)
 8004610:	7011      	strb	r1, [r2, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	7bb9      	ldrb	r1, [r7, #14]
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <p_uart_test_task+0xf4>)
 8004618:	5499      	strb	r1, [r3, r2]

		    if((is_arrival_packet == true) && (buffer_len > 4))
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d1d2      	bne.n	80045c6 <p_uart_test_task+0x22>
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <p_uart_test_task+0xfc>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d9ce      	bls.n	80045c6 <p_uart_test_task+0x22>
			{
				if (strncmp((char *)buffer, STR_DEBUG_MODE_ON, strlen(STR_DEBUG_MODE_ON)) == 0) gv.debug_mode = true;
 8004628:	2207      	movs	r2, #7
 800462a:	491e      	ldr	r1, [pc, #120]	; (80046a4 <p_uart_test_task+0x100>)
 800462c:	481a      	ldr	r0, [pc, #104]	; (8004698 <p_uart_test_task+0xf4>)
 800462e:	f007 fd76 	bl	800c11e <strncmp>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <p_uart_test_task+0x9c>
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <p_uart_test_task+0x104>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e01b      	b.n	8004678 <p_uart_test_task+0xd4>
				else if (strncmp((char *)buffer, STR_DEBUG_MODE_OFF, strlen(STR_DEBUG_MODE_OFF)) == 0) gv.debug_mode = false;
 8004640:	2208      	movs	r2, #8
 8004642:	491a      	ldr	r1, [pc, #104]	; (80046ac <p_uart_test_task+0x108>)
 8004644:	4814      	ldr	r0, [pc, #80]	; (8004698 <p_uart_test_task+0xf4>)
 8004646:	f007 fd6a 	bl	800c11e <strncmp>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <p_uart_test_task+0xb4>
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <p_uart_test_task+0x104>)
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e00f      	b.n	8004678 <p_uart_test_task+0xd4>
		        else if (strncmp((char *)buffer, CMD_SET_LED, strlen(CMD_SET_LED)) == 0) SET_LED(buffer);
 8004658:	2207      	movs	r2, #7
 800465a:	4915      	ldr	r1, [pc, #84]	; (80046b0 <p_uart_test_task+0x10c>)
 800465c:	480e      	ldr	r0, [pc, #56]	; (8004698 <p_uart_test_task+0xf4>)
 800465e:	f007 fd5e 	bl	800c11e <strncmp>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <p_uart_test_task+0xcc>
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <p_uart_test_task+0xf4>)
 800466a:	f000 f825 	bl	80046b8 <SET_LED>
 800466e:	e003      	b.n	8004678 <p_uart_test_task+0xd4>
				else printf("%s command not found\r\n",buffer);
 8004670:	4909      	ldr	r1, [pc, #36]	; (8004698 <p_uart_test_task+0xf4>)
 8004672:	4810      	ldr	r0, [pc, #64]	; (80046b4 <p_uart_test_task+0x110>)
 8004674:	f007 fc08 	bl	800be88 <iprintf>
				buffer_len = 0;
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <p_uart_test_task+0xfc>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
				memset(buffer, 0x00, MAX_CONFIG_LENGTH);
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	2100      	movs	r1, #0
 8004684:	4804      	ldr	r0, [pc, #16]	; (8004698 <p_uart_test_task+0xf4>)
 8004686:	f007 fb16 	bl	800bcb6 <memset>
				is_arrival_packet = false;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e79a      	b.n	80045c6 <p_uart_test_task+0x22>
			}
			if(buffer_len > MAX_CONFIG_LENGTH) buffer_len = 0;
		}
		else osDelay(100);
 8004690:	2064      	movs	r0, #100	; 0x64
 8004692:	f004 fa9c 	bl	8008bce <osDelay>
		if(osMessageQueueGet(queue_debug_testHandle, &data, NULL, 100) == osOK)
 8004696:	e796      	b.n	80045c6 <p_uart_test_task+0x22>
 8004698:	20003200 	.word	0x20003200
 800469c:	20003174 	.word	0x20003174
 80046a0:	20003400 	.word	0x20003400
 80046a4:	0800ce58 	.word	0x0800ce58
 80046a8:	200001f0 	.word	0x200001f0
 80046ac:	0800ce60 	.word	0x0800ce60
 80046b0:	0800ce6c 	.word	0x0800ce6c
 80046b4:	0800ce74 	.word	0x0800ce74

080046b8 <SET_LED>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
static void SET_LED(u8 *data)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	u8 index = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	75fb      	strb	r3, [r7, #23]
	u8 category,mode,action = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	753b      	strb	r3, [r7, #20]
	char *str;
	char *buf = (char *)data + strlen(CMD_SET_LED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3307      	adds	r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]

	str = string_strtok(buf, ",");
 80046ce:	491d      	ldr	r1, [pc, #116]	; (8004744 <SET_LED+0x8c>)
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 faad 	bl	8004c30 <string_strtok>
 80046d6:	6138      	str	r0, [r7, #16]
	while(str != NULL)
 80046d8:	e021      	b.n	800471e <SET_LED+0x66>
	{
		if (index == 0)     category = atoi(str);
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <SET_LED+0x34>
 80046e0:	6938      	ldr	r0, [r7, #16]
 80046e2:	f007 f9b3 	bl	800ba4c <atoi>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75bb      	strb	r3, [r7, #22]
 80046ea:	e010      	b.n	800470e <SET_LED+0x56>
		else if (index == 1) mode = atoi(str);
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <SET_LED+0x46>
 80046f2:	6938      	ldr	r0, [r7, #16]
 80046f4:	f007 f9aa 	bl	800ba4c <atoi>
 80046f8:	4603      	mov	r3, r0
 80046fa:	757b      	strb	r3, [r7, #21]
 80046fc:	e007      	b.n	800470e <SET_LED+0x56>
		else if (index == 2) action = atoi(str);
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d104      	bne.n	800470e <SET_LED+0x56>
 8004704:	6938      	ldr	r0, [r7, #16]
 8004706:	f007 f9a1 	bl	800ba4c <atoi>
 800470a:	4603      	mov	r3, r0
 800470c:	753b      	strb	r3, [r7, #20]

		str = string_strtok(NULL, ",");
 800470e:	490d      	ldr	r1, [pc, #52]	; (8004744 <SET_LED+0x8c>)
 8004710:	2000      	movs	r0, #0
 8004712:	f000 fa8d 	bl	8004c30 <string_strtok>
 8004716:	6138      	str	r0, [r7, #16]
		index++;
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	3301      	adds	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
	while(str != NULL)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1da      	bne.n	80046da <SET_LED+0x22>
	}

	printf("SET LED [%d][%d][%d]\r\n",category,mode,action);
 8004724:	7db9      	ldrb	r1, [r7, #22]
 8004726:	7d7a      	ldrb	r2, [r7, #21]
 8004728:	7d3b      	ldrb	r3, [r7, #20]
 800472a:	4807      	ldr	r0, [pc, #28]	; (8004748 <SET_LED+0x90>)
 800472c:	f007 fbac 	bl	800be88 <iprintf>
	LED_Control_Set(category,mode,action);
 8004730:	7d3a      	ldrb	r2, [r7, #20]
 8004732:	7d79      	ldrb	r1, [r7, #21]
 8004734:	7dbb      	ldrb	r3, [r7, #22]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fd fd3c 	bl	80021b4 <LED_Control_Set>
}
 800473c:	bf00      	nop
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0800ce8c 	.word	0x0800ce8c
 8004748:	0800ce90 	.word	0x0800ce90

0800474c <init_ultrasonic_hg_c40u>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void init_ultrasonic_hg_c40u(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0

	TX_PACKET_HGC40U_Trigger[0] = 0x02;
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004752:	2202      	movs	r2, #2
 8004754:	701a      	strb	r2, [r3, #0]
	TX_PACKET_HGC40U_Trigger[1] = '#';
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004758:	2223      	movs	r2, #35	; 0x23
 800475a:	705a      	strb	r2, [r3, #1]
	TX_PACKET_HGC40U_Trigger[2] = 'T';
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 800475e:	2254      	movs	r2, #84	; 0x54
 8004760:	709a      	strb	r2, [r3, #2]
	TX_PACKET_HGC40U_Trigger[3] = 'r';
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004764:	2272      	movs	r2, #114	; 0x72
 8004766:	70da      	strb	r2, [r3, #3]
	TX_PACKET_HGC40U_Trigger[4] = 'i';
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 800476a:	2269      	movs	r2, #105	; 0x69
 800476c:	711a      	strb	r2, [r3, #4]
	TX_PACKET_HGC40U_Trigger[5] = 'g';
 800476e:	4b29      	ldr	r3, [pc, #164]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004770:	2267      	movs	r2, #103	; 0x67
 8004772:	715a      	strb	r2, [r3, #5]
	TX_PACKET_HGC40U_Trigger[6] = 'g';
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004776:	2267      	movs	r2, #103	; 0x67
 8004778:	719a      	strb	r2, [r3, #6]
	TX_PACKET_HGC40U_Trigger[7] = 'e';
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 800477c:	2265      	movs	r2, #101	; 0x65
 800477e:	71da      	strb	r2, [r3, #7]
	TX_PACKET_HGC40U_Trigger[8] = 'r';
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004782:	2272      	movs	r2, #114	; 0x72
 8004784:	721a      	strb	r2, [r3, #8]
	TX_PACKET_HGC40U_Trigger[9] = 0x03;
 8004786:	4b23      	ldr	r3, [pc, #140]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004788:	2203      	movs	r2, #3
 800478a:	725a      	strb	r2, [r3, #9]

	TX_PACKET_HGC40U_SET_UART_Trigger[0] = 0x02;
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
	TX_PACKET_HGC40U_SET_UART_Trigger[1] = '#';
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 8004794:	2223      	movs	r2, #35	; 0x23
 8004796:	705a      	strb	r2, [r3, #1]
	TX_PACKET_HGC40U_SET_UART_Trigger[2] = 'M';
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 800479a:	224d      	movs	r2, #77	; 0x4d
 800479c:	709a      	strb	r2, [r3, #2]
	TX_PACKET_HGC40U_SET_UART_Trigger[3] = 'o';
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047a0:	226f      	movs	r2, #111	; 0x6f
 80047a2:	70da      	strb	r2, [r3, #3]
	TX_PACKET_HGC40U_SET_UART_Trigger[4] = 'd';
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047a6:	2264      	movs	r2, #100	; 0x64
 80047a8:	711a      	strb	r2, [r3, #4]
	TX_PACKET_HGC40U_SET_UART_Trigger[5] = 'e';
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047ac:	2265      	movs	r2, #101	; 0x65
 80047ae:	715a      	strb	r2, [r3, #5]
	TX_PACKET_HGC40U_SET_UART_Trigger[6] = '|';
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047b2:	227c      	movs	r2, #124	; 0x7c
 80047b4:	719a      	strb	r2, [r3, #6]
	TX_PACKET_HGC40U_SET_UART_Trigger[7] = '1';
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047b8:	2231      	movs	r2, #49	; 0x31
 80047ba:	71da      	strb	r2, [r3, #7]
	TX_PACKET_HGC40U_SET_UART_Trigger[8] = 0x03;
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <init_ultrasonic_hg_c40u+0xcc>)
 80047be:	2203      	movs	r2, #3
 80047c0:	721a      	strb	r2, [r3, #8]


	Uart_Init_Custom(&huart2);
 80047c2:	4816      	ldr	r0, [pc, #88]	; (800481c <init_ultrasonic_hg_c40u+0xd0>)
 80047c4:	f000 fa22 	bl	8004c0c <Uart_Init_Custom>
	Uart_Init_Custom(&huart3);
 80047c8:	4815      	ldr	r0, [pc, #84]	; (8004820 <init_ultrasonic_hg_c40u+0xd4>)
 80047ca:	f000 fa1f 	bl	8004c0c <Uart_Init_Custom>

	HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 9, 100);
 80047ce:	2364      	movs	r3, #100	; 0x64
 80047d0:	2209      	movs	r2, #9
 80047d2:	4910      	ldr	r1, [pc, #64]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 80047d4:	4811      	ldr	r0, [pc, #68]	; (800481c <init_ultrasonic_hg_c40u+0xd0>)
 80047d6:	f003 fd44 	bl	8008262 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 9, 100);
 80047da:	2364      	movs	r3, #100	; 0x64
 80047dc:	2209      	movs	r2, #9
 80047de:	490d      	ldr	r1, [pc, #52]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 80047e0:	480f      	ldr	r0, [pc, #60]	; (8004820 <init_ultrasonic_hg_c40u+0xd4>)
 80047e2:	f003 fd3e 	bl	8008262 <HAL_UART_Transmit>

	osDelay(1000);
 80047e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ea:	f004 f9f0 	bl	8008bce <osDelay>

	HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 9, 100);
 80047ee:	2364      	movs	r3, #100	; 0x64
 80047f0:	2209      	movs	r2, #9
 80047f2:	4908      	ldr	r1, [pc, #32]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <init_ultrasonic_hg_c40u+0xd0>)
 80047f6:	f003 fd34 	bl	8008262 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 9, 100);
 80047fa:	2364      	movs	r3, #100	; 0x64
 80047fc:	2209      	movs	r2, #9
 80047fe:	4905      	ldr	r1, [pc, #20]	; (8004814 <init_ultrasonic_hg_c40u+0xc8>)
 8004800:	4807      	ldr	r0, [pc, #28]	; (8004820 <init_ultrasonic_hg_c40u+0xd4>)
 8004802:	f003 fd2e 	bl	8008262 <HAL_UART_Transmit>
	osThreadResume (p_ultrasonicHandle);
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <init_ultrasonic_hg_c40u+0xd8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f004 f9be 	bl	8008b8c <osThreadResume>


}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20003404 	.word	0x20003404
 8004818:	20003418 	.word	0x20003418
 800481c:	20003088 	.word	0x20003088
 8004820:	200030cc 	.word	0x200030cc
 8004824:	2000315c 	.word	0x2000315c

08004828 <p_ultrasonic_task>:
uint8_t rx_buf1[10];
uint8_t rx_buf2[10];
uint8_t rx_buf1_len;
uint8_t rx_buf2_len;
void p_ultrasonic_task(void *argument)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	uint8_t data_seq1 = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
	uint8_t data_seq2 = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	73bb      	strb	r3, [r7, #14]

	uint8_t sensor_idx = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	737b      	strb	r3, [r7, #13]
	u8 data;
	osMessageQueueReset(queue_ultrasonic1Handle);
 800483c:	4b97      	ldr	r3, [pc, #604]	; (8004a9c <p_ultrasonic_task+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f004 fb11 	bl	8008e68 <osMessageQueueReset>
	osMessageQueueReset(queue_ultrasonic2Handle);
 8004846:	4b96      	ldr	r3, [pc, #600]	; (8004aa0 <p_ultrasonic_task+0x278>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f004 fb0c 	bl	8008e68 <osMessageQueueReset>

	while(1)
	{
		if(osMessageQueueGet(queue_ultrasonic1Handle, &data, NULL, 10) == osOK)
 8004850:	4b92      	ldr	r3, [pc, #584]	; (8004a9c <p_ultrasonic_task+0x274>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	f107 010c 	add.w	r1, r7, #12
 8004858:	230a      	movs	r3, #10
 800485a:	2200      	movs	r2, #0
 800485c:	f004 faa6 	bl	8008dac <osMessageQueueGet>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80b3 	bne.w	80049ce <p_ultrasonic_task+0x1a6>
		{
			if(data == HGC40_HEADER_1) data_seq1 = 1; // HEADER1
 8004868:	7b3b      	ldrb	r3, [r7, #12]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d102      	bne.n	8004874 <p_ultrasonic_task+0x4c>
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e7ed      	b.n	8004850 <p_ultrasonic_task+0x28>
			else if((data_seq1 == 1) && (data == HGC40_HEADER_2))
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10d      	bne.n	8004896 <p_ultrasonic_task+0x6e>
 800487a:	7b3b      	ldrb	r3, [r7, #12]
 800487c:	2b5e      	cmp	r3, #94	; 0x5e
 800487e:	d10a      	bne.n	8004896 <p_ultrasonic_task+0x6e>
			{
				data_seq1 = 2; // HEADER2
 8004880:	2302      	movs	r3, #2
 8004882:	73fb      	strb	r3, [r7, #15]
				rx_buf1_len = 0;
 8004884:	4b87      	ldr	r3, [pc, #540]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
				memset(rx_buf1, 0x00, 10);
 800488a:	220a      	movs	r2, #10
 800488c:	2100      	movs	r1, #0
 800488e:	4886      	ldr	r0, [pc, #536]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004890:	f007 fa11 	bl	800bcb6 <memset>
 8004894:	e1a8      	b.n	8004be8 <p_ultrasonic_task+0x3c0>
			}
			else if(data_seq1 == 2)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d1d9      	bne.n	8004850 <p_ultrasonic_task+0x28>
			{
				if(data == HGC40_TAIL)
 800489c:	7b3b      	ldrb	r3, [r7, #12]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	f040 808a 	bne.w	80049b8 <p_ultrasonic_task+0x190>
				{
					if(rx_buf1_len < 6) sensor1.m_fail_cnt = 0;
 80048a4:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d802      	bhi.n	80048b2 <p_ultrasonic_task+0x8a>
 80048ac:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <p_ultrasonic_task+0x284>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	70da      	strb	r2, [r3, #3]
					if(rx_buf1_len == 4)
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d12f      	bne.n	800491a <p_ultrasonic_task+0xf2>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 1000
 80048ba:	4b7b      	ldr	r3, [pc, #492]	; (8004aa8 <p_ultrasonic_task+0x280>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0') * 100
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	0152      	lsls	r2, r2, #5
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	0092      	lsls	r2, r2, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <p_ultrasonic_task+0x280>)
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	3b30      	subs	r3, #48	; 0x30
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4619      	mov	r1, r3
 80048da:	0089      	lsls	r1, r1, #2
 80048dc:	440b      	add	r3, r1
 80048de:	4619      	mov	r1, r3
 80048e0:	0088      	lsls	r0, r1, #2
 80048e2:	4619      	mov	r1, r3
 80048e4:	4603      	mov	r3, r0
 80048e6:	440b      	add	r3, r1
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	b29a      	uxth	r2, r3
									+ (rx_buf1[2] - '0') * 10
 80048f0:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <p_ultrasonic_task+0x280>)
 80048f2:	789b      	ldrb	r3, [r3, #2]
 80048f4:	3b30      	subs	r3, #48	; 0x30
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	0089      	lsls	r1, r1, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	b29b      	uxth	r3, r3
 8004902:	4413      	add	r3, r2
 8004904:	b29a      	uxth	r2, r3
									+ (rx_buf1[3] - '0');
 8004906:	4b68      	ldr	r3, [pc, #416]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004908:	78db      	ldrb	r3, [r3, #3]
 800490a:	b29b      	uxth	r3, r3
 800490c:	4413      	add	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b30      	subs	r3, #48	; 0x30
 8004912:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 1000
 8004914:	4b66      	ldr	r3, [pc, #408]	; (8004ab0 <p_ultrasonic_task+0x288>)
 8004916:	805a      	strh	r2, [r3, #2]
 8004918:	e79a      	b.n	8004850 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 3)
 800491a:	4b62      	ldr	r3, [pc, #392]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d122      	bne.n	8004968 <p_ultrasonic_task+0x140>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 100
 8004922:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0') * 10
 8004928:	b29b      	uxth	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	0092      	lsls	r2, r2, #2
 800492e:	4413      	add	r3, r2
 8004930:	461a      	mov	r2, r3
 8004932:	0091      	lsls	r1, r2, #2
 8004934:	461a      	mov	r2, r3
 8004936:	460b      	mov	r3, r1
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	b29a      	uxth	r2, r3
 800493e:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	3b30      	subs	r3, #48	; 0x30
 8004944:	b29b      	uxth	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	0089      	lsls	r1, r1, #2
 800494a:	440b      	add	r3, r1
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b29a      	uxth	r2, r3
									+ (rx_buf1[2] - '0');
 8004954:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004956:	789b      	ldrb	r3, [r3, #2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	4413      	add	r3, r2
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b30      	subs	r3, #48	; 0x30
 8004960:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 100
 8004962:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <p_ultrasonic_task+0x288>)
 8004964:	805a      	strh	r2, [r3, #2]
 8004966:	e773      	b.n	8004850 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 2)
 8004968:	4b4e      	ldr	r3, [pc, #312]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d112      	bne.n	8004996 <p_ultrasonic_task+0x16e>
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 10
 8004970:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf1[1] - '0');
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	0092      	lsls	r2, r2, #2
 800497c:	4413      	add	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	4b49      	ldr	r3, [pc, #292]	; (8004aa8 <p_ultrasonic_task+0x280>)
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4413      	add	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b30      	subs	r3, #48	; 0x30
 800498e:	b29a      	uxth	r2, r3
						gv.ultrasonic_1 = (rx_buf1[0] - '0') * 10
 8004990:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <p_ultrasonic_task+0x288>)
 8004992:	805a      	strh	r2, [r3, #2]
 8004994:	e75c      	b.n	8004850 <p_ultrasonic_task+0x28>
					else if(rx_buf1_len == 1)
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <p_ultrasonic_task+0x186>
						gv.ultrasonic_1 = (rx_buf1[0] - '0');
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <p_ultrasonic_task+0x280>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b30      	subs	r3, #48	; 0x30
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <p_ultrasonic_task+0x288>)
 80049aa:	805a      	strh	r2, [r3, #2]
 80049ac:	e750      	b.n	8004850 <p_ultrasonic_task+0x28>
					else gv.ultrasonic_1 = 9999;
 80049ae:	4b40      	ldr	r3, [pc, #256]	; (8004ab0 <p_ultrasonic_task+0x288>)
 80049b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80049b4:	805a      	strh	r2, [r3, #2]
 80049b6:	e74b      	b.n	8004850 <p_ultrasonic_task+0x28>
				}
				else rx_buf1[rx_buf1_len++] = data;
 80049b8:	4b3a      	ldr	r3, [pc, #232]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	b2d1      	uxtb	r1, r2
 80049c0:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <p_ultrasonic_task+0x27c>)
 80049c2:	7011      	strb	r1, [r2, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	7b39      	ldrb	r1, [r7, #12]
 80049c8:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <p_ultrasonic_task+0x280>)
 80049ca:	5499      	strb	r1, [r3, r2]
 80049cc:	e740      	b.n	8004850 <p_ultrasonic_task+0x28>
			}
		}
		else if(osMessageQueueGet(queue_ultrasonic2Handle, &data, NULL, 10) == osOK)
 80049ce:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <p_ultrasonic_task+0x278>)
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f107 010c 	add.w	r1, r7, #12
 80049d6:	230a      	movs	r3, #10
 80049d8:	2200      	movs	r2, #0
 80049da:	f004 f9e7 	bl	8008dac <osMessageQueueGet>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 80c7 	bne.w	8004b74 <p_ultrasonic_task+0x34c>
		{
			if(data == HGC40_HEADER_1) data_seq2 = 1; // HEADER1
 80049e6:	7b3b      	ldrb	r3, [r7, #12]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d102      	bne.n	80049f2 <p_ultrasonic_task+0x1ca>
 80049ec:	2301      	movs	r3, #1
 80049ee:	73bb      	strb	r3, [r7, #14]
 80049f0:	e72e      	b.n	8004850 <p_ultrasonic_task+0x28>
			else if((data_seq2 == 1) && (data == HGC40_HEADER_2))
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10d      	bne.n	8004a14 <p_ultrasonic_task+0x1ec>
 80049f8:	7b3b      	ldrb	r3, [r7, #12]
 80049fa:	2b5e      	cmp	r3, #94	; 0x5e
 80049fc:	d10a      	bne.n	8004a14 <p_ultrasonic_task+0x1ec>
			{
				data_seq2 = 2; // HEADER2
 80049fe:	2302      	movs	r3, #2
 8004a00:	73bb      	strb	r3, [r7, #14]
				rx_buf2_len = 0;
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <p_ultrasonic_task+0x28c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
				memset(rx_buf2, 0x00, 10);
 8004a08:	220a      	movs	r2, #10
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	482a      	ldr	r0, [pc, #168]	; (8004ab8 <p_ultrasonic_task+0x290>)
 8004a0e:	f007 f952 	bl	800bcb6 <memset>
 8004a12:	e0e9      	b.n	8004be8 <p_ultrasonic_task+0x3c0>
			}
			else if(data_seq2 == 2)
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	f47f af1a 	bne.w	8004850 <p_ultrasonic_task+0x28>
			{
				if(data == HGC40_TAIL)
 8004a1c:	7b3b      	ldrb	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	f040 809d 	bne.w	8004b5e <p_ultrasonic_task+0x336>
				{
					if(rx_buf2_len < 6) sensor2.m_fail_cnt = 0;
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <p_ultrasonic_task+0x28c>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d802      	bhi.n	8004a32 <p_ultrasonic_task+0x20a>
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <p_ultrasonic_task+0x294>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	70da      	strb	r2, [r3, #3]
					if(rx_buf2_len == 4)
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <p_ultrasonic_task+0x28c>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d142      	bne.n	8004ac0 <p_ultrasonic_task+0x298>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 1000
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <p_ultrasonic_task+0x290>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0') * 100
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	0152      	lsls	r2, r2, #5
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	0092      	lsls	r2, r2, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <p_ultrasonic_task+0x290>)
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	3b30      	subs	r3, #48	; 0x30
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	0089      	lsls	r1, r1, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	0088      	lsls	r0, r1, #2
 8004a62:	4619      	mov	r1, r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	440b      	add	r3, r1
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b29a      	uxth	r2, r3
									+ (rx_buf2[2] - '0') * 10
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <p_ultrasonic_task+0x290>)
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	3b30      	subs	r3, #48	; 0x30
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4619      	mov	r1, r3
 8004a7a:	0089      	lsls	r1, r1, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	b29a      	uxth	r2, r3
									+ (rx_buf2[3] - '0');
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <p_ultrasonic_task+0x290>)
 8004a88:	78db      	ldrb	r3, [r3, #3]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b30      	subs	r3, #48	; 0x30
 8004a92:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 1000
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <p_ultrasonic_task+0x288>)
 8004a96:	809a      	strh	r2, [r3, #4]
 8004a98:	e6da      	b.n	8004850 <p_ultrasonic_task+0x28>
 8004a9a:	bf00      	nop
 8004a9c:	20003168 	.word	0x20003168
 8004aa0:	2000316c 	.word	0x2000316c
 8004aa4:	2000344a 	.word	0x2000344a
 8004aa8:	20003434 	.word	0x20003434
 8004aac:	2000342c 	.word	0x2000342c
 8004ab0:	200001f0 	.word	0x200001f0
 8004ab4:	2000344b 	.word	0x2000344b
 8004ab8:	20003440 	.word	0x20003440
 8004abc:	20003430 	.word	0x20003430
					else if(rx_buf2_len == 3)
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <p_ultrasonic_task+0x3c4>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d122      	bne.n	8004b0e <p_ultrasonic_task+0x2e6>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 100
 8004ac8:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0') * 10
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	0092      	lsls	r2, r2, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	0091      	lsls	r1, r2, #2
 8004ada:	461a      	mov	r2, r3
 8004adc:	460b      	mov	r3, r1
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	3b30      	subs	r3, #48	; 0x30
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	0089      	lsls	r1, r1, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	b29a      	uxth	r2, r3
									+ (rx_buf2[2] - '0');
 8004afa:	4b3d      	ldr	r3, [pc, #244]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004afc:	789b      	ldrb	r3, [r3, #2]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b30      	subs	r3, #48	; 0x30
 8004b06:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 100
 8004b08:	4b3a      	ldr	r3, [pc, #232]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004b0a:	809a      	strh	r2, [r3, #4]
 8004b0c:	e6a0      	b.n	8004850 <p_ultrasonic_task+0x28>
					else if(rx_buf2_len == 2)
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <p_ultrasonic_task+0x3c4>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d112      	bne.n	8004b3c <p_ultrasonic_task+0x314>
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 10
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	3b30      	subs	r3, #48	; 0x30
									+ (rx_buf2[1] - '0');
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	0092      	lsls	r2, r2, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b30      	subs	r3, #48	; 0x30
 8004b34:	b29a      	uxth	r2, r3
						gv.ultrasonic_2 = (rx_buf2[0] - '0') * 10
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004b38:	809a      	strh	r2, [r3, #4]
 8004b3a:	e689      	b.n	8004850 <p_ultrasonic_task+0x28>
					else if(rx_buf2_len == 1)
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <p_ultrasonic_task+0x3c4>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <p_ultrasonic_task+0x32c>
						gv.ultrasonic_2 = (rx_buf2[0] - '0');
 8004b44:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b30      	subs	r3, #48	; 0x30
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004b50:	809a      	strh	r2, [r3, #4]
 8004b52:	e67d      	b.n	8004850 <p_ultrasonic_task+0x28>
					else gv.ultrasonic_2 = 9999;
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004b56:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b5a:	809a      	strh	r2, [r3, #4]
 8004b5c:	e678      	b.n	8004850 <p_ultrasonic_task+0x28>
				}
				else rx_buf2[rx_buf2_len++] = data;
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <p_ultrasonic_task+0x3c4>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	b2d1      	uxtb	r1, r2
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <p_ultrasonic_task+0x3c4>)
 8004b68:	7011      	strb	r1, [r2, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	7b39      	ldrb	r1, [r7, #12]
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <p_ultrasonic_task+0x3c8>)
 8004b70:	5499      	strb	r1, [r3, r2]
 8004b72:	e66d      	b.n	8004850 <p_ultrasonic_task+0x28>
			}
		}
		else
		{
			if(sensor_idx % 2 == 0)
 8004b74:	7b7b      	ldrb	r3, [r7, #13]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d114      	bne.n	8004baa <p_ultrasonic_task+0x382>
			{
				HAL_UART_Transmit(&huart2, TX_PACKET_HGC40U_Trigger, 10, 10);
 8004b80:	230a      	movs	r3, #10
 8004b82:	220a      	movs	r2, #10
 8004b84:	491c      	ldr	r1, [pc, #112]	; (8004bf8 <p_ultrasonic_task+0x3d0>)
 8004b86:	481d      	ldr	r0, [pc, #116]	; (8004bfc <p_ultrasonic_task+0x3d4>)
 8004b88:	f003 fb6b 	bl	8008262 <HAL_UART_Transmit>
				sensor1.m_fail_cnt++;
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <p_ultrasonic_task+0x3d8>)
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <p_ultrasonic_task+0x3d8>)
 8004b96:	70da      	strb	r2, [r3, #3]
				if(sensor1.m_fail_cnt > 5 ) gv.ultrasonic_1 = 9999;
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <p_ultrasonic_task+0x3d8>)
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d918      	bls.n	8004bd2 <p_ultrasonic_task+0x3aa>
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004ba2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ba6:	805a      	strh	r2, [r3, #2]
 8004ba8:	e013      	b.n	8004bd2 <p_ultrasonic_task+0x3aa>
			}
			else
			{
				HAL_UART_Transmit(&huart3, TX_PACKET_HGC40U_Trigger, 10, 10);
 8004baa:	230a      	movs	r3, #10
 8004bac:	220a      	movs	r2, #10
 8004bae:	4912      	ldr	r1, [pc, #72]	; (8004bf8 <p_ultrasonic_task+0x3d0>)
 8004bb0:	4814      	ldr	r0, [pc, #80]	; (8004c04 <p_ultrasonic_task+0x3dc>)
 8004bb2:	f003 fb56 	bl	8008262 <HAL_UART_Transmit>
				sensor2.m_fail_cnt++;
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <p_ultrasonic_task+0x3e0>)
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <p_ultrasonic_task+0x3e0>)
 8004bc0:	70da      	strb	r2, [r3, #3]
				if(sensor2.m_fail_cnt > 5 ) gv.ultrasonic_2 = 9999;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <p_ultrasonic_task+0x3e0>)
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d903      	bls.n	8004bd2 <p_ultrasonic_task+0x3aa>
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <p_ultrasonic_task+0x3cc>)
 8004bcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8004bd0:	809a      	strh	r2, [r3, #4]
			}
			sensor_idx++;
 8004bd2:	7b7b      	ldrb	r3, [r7, #13]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	737b      	strb	r3, [r7, #13]
			if(sensor_idx > 1) sensor_idx = 0;
 8004bd8:	7b7b      	ldrb	r3, [r7, #13]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d901      	bls.n	8004be2 <p_ultrasonic_task+0x3ba>
 8004bde:	2300      	movs	r3, #0
 8004be0:	737b      	strb	r3, [r7, #13]
			osDelay(10);
 8004be2:	200a      	movs	r0, #10
 8004be4:	f003 fff3 	bl	8008bce <osDelay>
		if(osMessageQueueGet(queue_ultrasonic1Handle, &data, NULL, 10) == osOK)
 8004be8:	e632      	b.n	8004850 <p_ultrasonic_task+0x28>
 8004bea:	bf00      	nop
 8004bec:	2000344b 	.word	0x2000344b
 8004bf0:	20003440 	.word	0x20003440
 8004bf4:	200001f0 	.word	0x200001f0
 8004bf8:	20003404 	.word	0x20003404
 8004bfc:	20003088 	.word	0x20003088
 8004c00:	2000342c 	.word	0x2000342c
 8004c04:	200030cc 	.word	0x200030cc
 8004c08:	20003430 	.word	0x20003430

08004c0c <Uart_Init_Custom>:

#include "app_sensorboard.h"
#include "u_bsp_driver.h"

void Uart_Init_Custom(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0220 	orr.w	r2, r2, #32
 8004c22:	60da      	str	r2, [r3, #12]
//	__HAL_UART_CLEAR_PEFLAG(huart);
//	__HAL_UART_CLEAR_FEFLAG(huart);
//	__HAL_UART_CLEAR_NEFLAG(huart);
//	__HAL_UART_CLEAR_OREFLAG(huart);
//	__HAL_UART_CLEAR_IDLEFLAG(huart);
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <string_strtok>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
char *string_strtok(char *str, const char *delim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  static char *org = NULL;
  static char *tracer = NULL;
  const char *pdelim;

  if (str != NULL) tracer = str;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <string_strtok+0x16>
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <string_strtok+0xf0>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
  if (delim == NULL || *delim == '\0'/*NULL*/) return NULL;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <string_strtok+0x24>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <string_strtok+0x28>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e05d      	b.n	8004d14 <string_strtok+0xe4>
  if (tracer == NULL || *tracer == '\0') return NULL;
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <string_strtok+0xf0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <string_strtok+0x3a>
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <string_strtok+0xf0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11d      	bne.n	8004ca6 <string_strtok+0x76>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e052      	b.n	8004d14 <string_strtok+0xe4>

  while (*tracer)
  {
    for (pdelim = delim; *pdelim; pdelim++)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e009      	b.n	8004c88 <string_strtok+0x58>
      if (*tracer == *pdelim) break;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <string_strtok+0xf0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d007      	beq.n	8004c92 <string_strtok+0x62>
    for (pdelim = delim; *pdelim; pdelim++)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f1      	bne.n	8004c74 <string_strtok+0x44>
 8004c90:	e000      	b.n	8004c94 <string_strtok+0x64>
      if (*tracer == *pdelim) break;
 8004c92:	bf00      	nop

    if (*pdelim == '\0') break;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <string_strtok+0x82>
    tracer++;
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <string_strtok+0xf0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <string_strtok+0xf0>)
 8004ca4:	6013      	str	r3, [r2, #0]
  while (*tracer)
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <string_strtok+0xf0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1de      	bne.n	8004c6e <string_strtok+0x3e>
 8004cb0:	e000      	b.n	8004cb4 <string_strtok+0x84>
    if (*pdelim == '\0') break;
 8004cb2:	bf00      	nop
  }

  for (org = tracer; *tracer; tracer++)
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <string_strtok+0xf0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <string_strtok+0xf4>)
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e023      	b.n	8004d06 <string_strtok+0xd6>
  {
    for (pdelim = delim; *pdelim; pdelim++)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e009      	b.n	8004cd8 <string_strtok+0xa8>
      if (*tracer == *pdelim) break;
 8004cc4:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <string_strtok+0xf0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d007      	beq.n	8004ce2 <string_strtok+0xb2>
    for (pdelim = delim; *pdelim; pdelim++)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f1      	bne.n	8004cc4 <string_strtok+0x94>
 8004ce0:	e000      	b.n	8004ce4 <string_strtok+0xb4>
      if (*tracer == *pdelim) break;
 8004ce2:	bf00      	nop

    if (*pdelim)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <string_strtok+0xcc>
    {
      *tracer++ = '\0';
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <string_strtok+0xf0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	490b      	ldr	r1, [pc, #44]	; (8004d20 <string_strtok+0xf0>)
 8004cf4:	600a      	str	r2, [r1, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e009      	b.n	8004d10 <string_strtok+0xe0>
  for (org = tracer; *tracer; tracer++)
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <string_strtok+0xf0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <string_strtok+0xf0>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <string_strtok+0xf0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1d6      	bne.n	8004cbe <string_strtok+0x8e>
    }
  }
  return org;
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <string_strtok+0xf4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	2000344c 	.word	0x2000344c
 8004d24:	20003450 	.word	0x20003450

08004d28 <timers_init>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void timers_init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim13);
 8004d2c:	4802      	ldr	r0, [pc, #8]	; (8004d38 <timers_init+0x10>)
 8004d2e:	f001 ff93 	bl	8006c58 <HAL_TIM_Base_Start_IT>
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20002edc 	.word	0x20002edc

08004d3c <timers_register_timer>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
s8 timers_register_timer(u32 period, timer_handler handler)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  u8 i;

  for(i=0; i<MAX_TIMER; i++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e02a      	b.n	8004da2 <timers_register_timer+0x66>
  {
    if(timers[i].handler == null)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <timers_register_timer+0x7c>)
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	4413      	add	r3, r2
 8004d54:	330c      	adds	r3, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d11f      	bne.n	8004d9c <timers_register_timer+0x60>
    {
      timers[i].tick = 0;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <timers_register_timer+0x7c>)
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4413      	add	r3, r2
 8004d64:	3304      	adds	r3, #4
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
      timers[i].id = i;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <timers_register_timer+0x7c>)
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	4413      	add	r3, r2
 8004d76:	460a      	mov	r2, r1
 8004d78:	701a      	strb	r2, [r3, #0]
      timers[i].period = period;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <timers_register_timer+0x7c>)
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	3308      	adds	r3, #8
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
      timers[i].handler = handler;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <timers_register_timer+0x7c>)
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	330c      	adds	r3, #12
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	601a      	str	r2, [r3, #0]
      return i;
 8004d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9a:	e007      	b.n	8004dac <timers_register_timer+0x70>
  for(i=0; i<MAX_TIMER; i++)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b0b      	cmp	r3, #11
 8004da6:	d9d1      	bls.n	8004d4c <timers_register_timer+0x10>
    }
  }
  return -1;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20003454 	.word	0x20003454

08004dbc <timers_tick_timer>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void timers_tick_timer(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
  u8 i;

  for(i=0; i<MAX_TIMER; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	71fb      	strb	r3, [r7, #7]
 8004dc6:	e020      	b.n	8004e0a <timers_tick_timer+0x4e>
  {
    if(timers[i].handler == null)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <timers_tick_timer+0x64>)
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	4413      	add	r3, r2
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <timers_tick_timer+0x46>
      continue;

    if(timers[i].busy == false)
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <timers_tick_timer+0x64>)
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	4413      	add	r3, r2
 8004de0:	3301      	adds	r3, #1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <timers_tick_timer+0x48>
      timers[i].tick++;
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	490d      	ldr	r1, [pc, #52]	; (8004e20 <timers_tick_timer+0x64>)
 8004dec:	011a      	lsls	r2, r3, #4
 8004dee:	440a      	add	r2, r1
 8004df0:	3204      	adds	r2, #4
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	3201      	adds	r2, #1
 8004df6:	490a      	ldr	r1, [pc, #40]	; (8004e20 <timers_tick_timer+0x64>)
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e000      	b.n	8004e04 <timers_tick_timer+0x48>
      continue;
 8004e02:	bf00      	nop
  for(i=0; i<MAX_TIMER; i++)
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	3301      	adds	r3, #1
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b0b      	cmp	r3, #11
 8004e0e:	d9db      	bls.n	8004dc8 <timers_tick_timer+0xc>
  }
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20003454 	.word	0x20003454

08004e24 <apps_timer_task>:
/**
********************************************************************************************************************************
********************************************************************************************************************************
*/
void apps_timer_task(void *argument)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  u8 i;

  while(1)
  {
    for(i=0; i<MAX_TIMER; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]
 8004e30:	e03f      	b.n	8004eb2 <apps_timer_task+0x8e>
    {
      if(timers[i].handler == null)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	4413      	add	r3, r2
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d033      	beq.n	8004eaa <apps_timer_task+0x86>
        continue;

      if(timers[i].tick >= timers[i].period)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	4413      	add	r3, r2
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	491b      	ldr	r1, [pc, #108]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	440b      	add	r3, r1
 8004e56:	3308      	adds	r3, #8
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d326      	bcc.n	8004eac <apps_timer_task+0x88>
      {
        timers[i].busy = true;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	4413      	add	r3, r2
 8004e66:	3301      	adds	r3, #1
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
        timers[i].tick = 0;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
        timers[i].handler(timers[i].id, *(u32 *)(argument));
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	330c      	adds	r3, #12
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	7bfa      	ldrb	r2, [r7, #15]
 8004e88:	490d      	ldr	r1, [pc, #52]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f992 0000 	ldrsb.w	r0, [r2]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	4611      	mov	r1, r2
 8004e98:	4798      	blx	r3
        timers[i].busy = false;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <apps_timer_task+0x9c>)
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e000      	b.n	8004eac <apps_timer_task+0x88>
        continue;
 8004eaa:	bf00      	nop
    for(i=0; i<MAX_TIMER; i++)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b0b      	cmp	r3, #11
 8004eb6:	d9bc      	bls.n	8004e32 <apps_timer_task+0xe>
      }
    }
    osDelay(5);
 8004eb8:	2005      	movs	r0, #5
 8004eba:	f003 fe88 	bl	8008bce <osDelay>
    for(i=0; i<MAX_TIMER; i++)
 8004ebe:	e7b5      	b.n	8004e2c <apps_timer_task+0x8>
 8004ec0:	20003454 	.word	0x20003454

08004ec4 <timers_process_tick_interrupt_timer>:
    interrupt_timers[i].handler = null;
  }
}

void timers_process_tick_interrupt_timer(u32 param1)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	u8 i;

	for(i=0; i<MAX_INTERRUP_TIMER; i++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e054      	b.n	8004f7c <timers_process_tick_interrupt_timer+0xb8>
	{
		if(interrupt_timers[i].handler == null) continue;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	4413      	add	r3, r2
 8004eda:	330c      	adds	r3, #12
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d046      	beq.n	8004f70 <timers_process_tick_interrupt_timer+0xac>
		if(interrupt_timers[i].busy == true) continue;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	4413      	add	r3, r2
 8004eea:	3301      	adds	r3, #1
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d040      	beq.n	8004f74 <timers_process_tick_interrupt_timer+0xb0>
		interrupt_timers[i].tick++;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	4925      	ldr	r1, [pc, #148]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004ef6:	011a      	lsls	r2, r3, #4
 8004ef8:	440a      	add	r2, r1
 8004efa:	3204      	adds	r2, #4
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	3201      	adds	r2, #1
 8004f00:	4922      	ldr	r1, [pc, #136]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	440b      	add	r3, r1
 8004f06:	3304      	adds	r3, #4
 8004f08:	601a      	str	r2, [r3, #0]
		if(interrupt_timers[i].tick >= interrupt_timers[i].period)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4413      	add	r3, r2
 8004f12:	3304      	adds	r3, #4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	491c      	ldr	r1, [pc, #112]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3308      	adds	r3, #8
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d327      	bcc.n	8004f76 <timers_process_tick_interrupt_timer+0xb2>
		{
			interrupt_timers[i].busy = true;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3301      	adds	r3, #1
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
			interrupt_timers[i].tick = 0;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
			interrupt_timers[i].handler(interrupt_timers[i].id, param1);
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	4413      	add	r3, r2
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	490e      	ldr	r1, [pc, #56]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	440a      	add	r2, r1
 8004f56:	f992 2000 	ldrsb.w	r2, [r2]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
			interrupt_timers[i].busy = false;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <timers_process_tick_interrupt_timer+0xc8>)
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4413      	add	r3, r2
 8004f68:	3301      	adds	r3, #1
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e002      	b.n	8004f76 <timers_process_tick_interrupt_timer+0xb2>
		if(interrupt_timers[i].handler == null) continue;
 8004f70:	bf00      	nop
 8004f72:	e000      	b.n	8004f76 <timers_process_tick_interrupt_timer+0xb2>
		if(interrupt_timers[i].busy == true) continue;
 8004f74:	bf00      	nop
	for(i=0; i<MAX_INTERRUP_TIMER; i++)
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d9a7      	bls.n	8004ed2 <timers_process_tick_interrupt_timer+0xe>
		}
	}
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20003514 	.word	0x20003514

08004f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f94:	480d      	ldr	r0, [pc, #52]	; (8004fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f96:	490e      	ldr	r1, [pc, #56]	; (8004fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f98:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f9c:	e002      	b.n	8004fa4 <LoopCopyDataInit>

08004f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fa2:	3304      	adds	r3, #4

08004fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fa8:	d3f9      	bcc.n	8004f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004faa:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fac:	4c0b      	ldr	r4, [pc, #44]	; (8004fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fb0:	e001      	b.n	8004fb6 <LoopFillZerobss>

08004fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fb4:	3204      	adds	r2, #4

08004fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fb8:	d3fb      	bcc.n	8004fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fba:	f7ff f921 	bl	8004200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fbe:	f006 fe45 	bl	800bc4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fc2:	f7fd ff83 	bl	8002ecc <main>
  bx  lr    
 8004fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fd0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8004fd4:	0800d1c4 	.word	0x0800d1c4
  ldr r2, =_sbss
 8004fd8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8004fdc:	2000c068 	.word	0x2000c068

08004fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fe0:	e7fe      	b.n	8004fe0 <ADC_IRQHandler>
	...

08004fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <HAL_Init+0x40>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <HAL_Init+0x40>)
 8004fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_Init+0x40>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <HAL_Init+0x40>)
 8004ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <HAL_Init+0x40>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a07      	ldr	r2, [pc, #28]	; (8005024 <HAL_Init+0x40>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800500c:	2003      	movs	r0, #3
 800500e:	f000 f8fc 	bl	800520a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005012:	200f      	movs	r0, #15
 8005014:	f7fe fe58 	bl	8003cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005018:	f7fe fb5c 	bl	80036d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40023c00 	.word	0x40023c00

08005028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_IncTick+0x20>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_IncTick+0x24>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4413      	add	r3, r2
 8005038:	4a04      	ldr	r2, [pc, #16]	; (800504c <HAL_IncTick+0x24>)
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000164 	.word	0x20000164
 800504c:	20003544 	.word	0x20003544

08005050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return uwTick;
 8005054:	4b03      	ldr	r3, [pc, #12]	; (8005064 <HAL_GetTick+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20003544 	.word	0x20003544

08005068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7ff ffee 	bl	8005050 <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d005      	beq.n	800508e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_Delay+0x44>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800508e:	bf00      	nop
 8005090:	f7ff ffde 	bl	8005050 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	d8f7      	bhi.n	8005090 <HAL_Delay+0x28>
  {
  }
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000164 	.word	0x20000164

080050b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c0:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e2:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	60d3      	str	r3, [r2, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__NVIC_GetPriorityGrouping+0x18>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0307 	and.w	r3, r3, #7
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db0b      	blt.n	800513e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <__NVIC_EnableIRQ+0x38>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2001      	movs	r0, #1
 8005136:	fa00 f202 	lsl.w	r2, r0, r2
 800513a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	6039      	str	r1, [r7, #0]
 800515a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db0a      	blt.n	800517a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	490c      	ldr	r1, [pc, #48]	; (800519c <__NVIC_SetPriority+0x4c>)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	440b      	add	r3, r1
 8005174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005178:	e00a      	b.n	8005190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4908      	ldr	r1, [pc, #32]	; (80051a0 <__NVIC_SetPriority+0x50>)
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3b04      	subs	r3, #4
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	440b      	add	r3, r1
 800518e:	761a      	strb	r2, [r3, #24]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000e100 	.word	0xe000e100
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	bf28      	it	cs
 80051c2:	2304      	movcs	r3, #4
 80051c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d902      	bls.n	80051d4 <NVIC_EncodePriority+0x30>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3b03      	subs	r3, #3
 80051d2:	e000      	b.n	80051d6 <NVIC_EncodePriority+0x32>
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	401a      	ands	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ec:	f04f 31ff 	mov.w	r1, #4294967295
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	43d9      	mvns	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fc:	4313      	orrs	r3, r2
         );
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3724      	adds	r7, #36	; 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff4c 	bl	80050b0 <__NVIC_SetPriorityGrouping>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005232:	f7ff ff61 	bl	80050f8 <__NVIC_GetPriorityGrouping>
 8005236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	6978      	ldr	r0, [r7, #20]
 800523e:	f7ff ffb1 	bl	80051a4 <NVIC_EncodePriority>
 8005242:	4602      	mov	r2, r0
 8005244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff ff80 	bl	8005150 <__NVIC_SetPriority>
}
 8005250:	bf00      	nop
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff54 	bl	8005114 <__NVIC_EnableIRQ>
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005280:	f7ff fee6 	bl	8005050 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e099      	b.n	80053c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b0:	e00f      	b.n	80052d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052b2:	f7ff fecd 	bl	8005050 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b05      	cmp	r3, #5
 80052be:	d908      	bls.n	80052d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2203      	movs	r2, #3
 80052ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e078      	b.n	80053c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e8      	bne.n	80052b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4b38      	ldr	r3, [pc, #224]	; (80053cc <HAL_DMA_Init+0x158>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b04      	cmp	r3, #4
 800532a:	d107      	bne.n	800533c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	4313      	orrs	r3, r2
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b04      	cmp	r3, #4
 8005364:	d117      	bne.n	8005396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa91 	bl	80058a0 <DMA_CheckFifoParam>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005392:	2301      	movs	r3, #1
 8005394:	e016      	b.n	80053c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa48 	bl	8005834 <DMA_CalcBaseAndBitshift>
 80053a4:	4603      	mov	r3, r0
 80053a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	223f      	movs	r2, #63	; 0x3f
 80053ae:	409a      	lsls	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	f010803f 	.word	0xf010803f

080053d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_DMA_Start_IT+0x26>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e040      	b.n	8005478 <HAL_DMA_Start_IT+0xa8>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d12f      	bne.n	800546a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f9da 	bl	80057d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0216 	orr.w	r2, r2, #22
 800543e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e005      	b.n	8005476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d004      	beq.n	800549e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e00c      	b.n	80054b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2205      	movs	r2, #5
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054d0:	4b8e      	ldr	r3, [pc, #568]	; (800570c <HAL_DMA_IRQHandler+0x248>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a8e      	ldr	r2, [pc, #568]	; (8005710 <HAL_DMA_IRQHandler+0x24c>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2208      	movs	r2, #8
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	2208      	movs	r2, #8
 800551e:	409a      	lsls	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	2201      	movs	r2, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	2201      	movs	r2, #1
 8005554:	409a      	lsls	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	2204      	movs	r2, #4
 800556c:	409a      	lsls	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d012      	beq.n	800559c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	2204      	movs	r2, #4
 800558a:	409a      	lsls	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	2210      	movs	r2, #16
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d043      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03c      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	2210      	movs	r2, #16
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d108      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d024      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
 80055f2:	e01f      	b.n	8005634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	e016      	b.n	8005634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0208 	bic.w	r2, r2, #8
 8005622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	2220      	movs	r2, #32
 800563a:	409a      	lsls	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808f 	beq.w	8005764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8087 	beq.w	8005764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	2220      	movs	r2, #32
 800565c:	409a      	lsls	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b05      	cmp	r3, #5
 800566c:	d136      	bne.n	80056dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0216 	bic.w	r2, r2, #22
 800567c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800568c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <HAL_DMA_IRQHandler+0x1da>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0208 	bic.w	r2, r2, #8
 80056ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	223f      	movs	r2, #63	; 0x3f
 80056b4:	409a      	lsls	r2, r3
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d07e      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
        }
        return;
 80056da:	e079      	b.n	80057d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01d      	beq.n	8005726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10d      	bne.n	8005714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d031      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
 8005708:	e02c      	b.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
 800570a:	bf00      	nop
 800570c:	20000158 	.word	0x20000158
 8005710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d023      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
 8005724:	e01e      	b.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0210 	bic.w	r2, r2, #16
 8005742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	2b00      	cmp	r3, #0
 800576a:	d032      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d022      	beq.n	80057be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2205      	movs	r2, #5
 800577c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	3301      	adds	r3, #1
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d307      	bcc.n	80057ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f2      	bne.n	8005790 <HAL_DMA_IRQHandler+0x2cc>
 80057aa:	e000      	b.n	80057ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e000      	b.n	80057d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057d0:	bf00      	nop
    }
  }
}
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d108      	bne.n	8005818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005816:	e007      	b.n	8005828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	3b10      	subs	r3, #16
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <DMA_CalcBaseAndBitshift+0x64>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <DMA_CalcBaseAndBitshift+0x68>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d909      	bls.n	8005876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	659a      	str	r2, [r3, #88]	; 0x58
 8005874:	e007      	b.n	8005886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	aaaaaaab 	.word	0xaaaaaaab
 800589c:	0800d014 	.word	0x0800d014

080058a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d11f      	bne.n	80058fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d856      	bhi.n	800596e <DMA_CheckFifoParam+0xce>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <DMA_CheckFifoParam+0x28>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058eb 	.word	0x080058eb
 80058d0:	080058d9 	.word	0x080058d9
 80058d4:	0800596f 	.word	0x0800596f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d046      	beq.n	8005972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e8:	e043      	b.n	8005972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058f2:	d140      	bne.n	8005976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f8:	e03d      	b.n	8005976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005902:	d121      	bne.n	8005948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d837      	bhi.n	800597a <DMA_CheckFifoParam+0xda>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <DMA_CheckFifoParam+0x70>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	08005927 	.word	0x08005927
 8005918:	08005921 	.word	0x08005921
 800591c:	08005939 	.word	0x08005939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
      break;
 8005924:	e030      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d025      	beq.n	800597e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005936:	e022      	b.n	800597e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005940:	d11f      	bne.n	8005982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005946:	e01c      	b.n	8005982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d903      	bls.n	8005956 <DMA_CheckFifoParam+0xb6>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d003      	beq.n	800595c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005954:	e018      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      break;
 800595a:	e015      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      break;
 800596c:	e00b      	b.n	8005986 <DMA_CheckFifoParam+0xe6>
      break;
 800596e:	bf00      	nop
 8005970:	e00a      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;
 8005972:	bf00      	nop
 8005974:	e008      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e006      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e004      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;   
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <DMA_CheckFifoParam+0xe8>
      break;
 8005986:	bf00      	nop
    }
  } 
  
  return status; 
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop

08005998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e16b      	b.n	8005c8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b4:	2201      	movs	r2, #1
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4013      	ands	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	f040 815a 	bne.w	8005c86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d005      	beq.n	80059ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d130      	bne.n	8005a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a20:	2201      	movs	r2, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 0201 	and.w	r2, r3, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d017      	beq.n	8005a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	2203      	movs	r2, #3
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d123      	bne.n	8005adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	08da      	lsrs	r2, r3, #3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3208      	adds	r2, #8
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	220f      	movs	r2, #15
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	08da      	lsrs	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3208      	adds	r2, #8
 8005ad6:	69b9      	ldr	r1, [r7, #24]
 8005ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0203 	and.w	r2, r3, #3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80b4 	beq.w	8005c86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <HAL_GPIO_Init+0x30c>)
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	4a5f      	ldr	r2, [pc, #380]	; (8005ca4 <HAL_GPIO_Init+0x30c>)
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <HAL_GPIO_Init+0x30c>)
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ca8 <HAL_GPIO_Init+0x310>)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3302      	adds	r3, #2
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	220f      	movs	r2, #15
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a52      	ldr	r2, [pc, #328]	; (8005cac <HAL_GPIO_Init+0x314>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d02b      	beq.n	8005bbe <HAL_GPIO_Init+0x226>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a51      	ldr	r2, [pc, #324]	; (8005cb0 <HAL_GPIO_Init+0x318>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d025      	beq.n	8005bba <HAL_GPIO_Init+0x222>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a50      	ldr	r2, [pc, #320]	; (8005cb4 <HAL_GPIO_Init+0x31c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01f      	beq.n	8005bb6 <HAL_GPIO_Init+0x21e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4f      	ldr	r2, [pc, #316]	; (8005cb8 <HAL_GPIO_Init+0x320>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d019      	beq.n	8005bb2 <HAL_GPIO_Init+0x21a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4e      	ldr	r2, [pc, #312]	; (8005cbc <HAL_GPIO_Init+0x324>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_GPIO_Init+0x216>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4d      	ldr	r2, [pc, #308]	; (8005cc0 <HAL_GPIO_Init+0x328>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00d      	beq.n	8005baa <HAL_GPIO_Init+0x212>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4c      	ldr	r2, [pc, #304]	; (8005cc4 <HAL_GPIO_Init+0x32c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <HAL_GPIO_Init+0x20e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4b      	ldr	r2, [pc, #300]	; (8005cc8 <HAL_GPIO_Init+0x330>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_GPIO_Init+0x20a>
 8005b9e:	2307      	movs	r3, #7
 8005ba0:	e00e      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	e00c      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005ba6:	2306      	movs	r3, #6
 8005ba8:	e00a      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005baa:	2305      	movs	r3, #5
 8005bac:	e008      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005bae:	2304      	movs	r3, #4
 8005bb0:	e006      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e004      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e002      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_GPIO_Init+0x228>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f002 0203 	and.w	r2, r2, #3
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	4093      	lsls	r3, r2
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd0:	4935      	ldr	r1, [pc, #212]	; (8005ca8 <HAL_GPIO_Init+0x310>)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	089b      	lsrs	r3, r3, #2
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bde:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c02:	4a32      	ldr	r2, [pc, #200]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c08:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c32:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c56:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c80:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <HAL_GPIO_Init+0x334>)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	f67f ae90 	bls.w	80059b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	40020400 	.word	0x40020400
 8005cb4:	40020800 	.word	0x40020800
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40021400 	.word	0x40021400
 8005cc4:	40021800 	.word	0x40021800
 8005cc8:	40021c00 	.word	0x40021c00
 8005ccc:	40013c00 	.word	0x40013c00

08005cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ce0:	787b      	ldrb	r3, [r7, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cec:	e003      	b.n	8005cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	041a      	lsls	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e267      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d075      	beq.n	8005e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d22:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d00c      	beq.n	8005d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2e:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d112      	bne.n	8005d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3a:	4b82      	ldr	r3, [pc, #520]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d46:	d10b      	bne.n	8005d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d48:	4b7e      	ldr	r3, [pc, #504]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d05b      	beq.n	8005e0c <HAL_RCC_OscConfig+0x108>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d157      	bne.n	8005e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e242      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d68:	d106      	bne.n	8005d78 <HAL_RCC_OscConfig+0x74>
 8005d6a:	4b76      	ldr	r3, [pc, #472]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a75      	ldr	r2, [pc, #468]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e01d      	b.n	8005db4 <HAL_RCC_OscConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x98>
 8005d82:	4b70      	ldr	r3, [pc, #448]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6f      	ldr	r2, [pc, #444]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b6d      	ldr	r3, [pc, #436]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a6c      	ldr	r2, [pc, #432]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e00b      	b.n	8005db4 <HAL_RCC_OscConfig+0xb0>
 8005d9c:	4b69      	ldr	r3, [pc, #420]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a68      	ldr	r2, [pc, #416]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4b66      	ldr	r3, [pc, #408]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7ff f948 	bl	8005050 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7ff f944 	bl	8005050 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e207      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	4b5b      	ldr	r3, [pc, #364]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0xc0>
 8005de2:	e014      	b.n	8005e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7ff f934 	bl	8005050 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dec:	f7ff f930 	bl	8005050 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b64      	cmp	r3, #100	; 0x64
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e1f3      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfe:	4b51      	ldr	r3, [pc, #324]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0xe8>
 8005e0a:	e000      	b.n	8005e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d063      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1a:	4b4a      	ldr	r3, [pc, #296]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d11c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e32:	4b44      	ldr	r3, [pc, #272]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d116      	bne.n	8005e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3e:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_RCC_OscConfig+0x152>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d001      	beq.n	8005e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e1c7      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4937      	ldr	r1, [pc, #220]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6a:	e03a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d020      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e74:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_RCC_OscConfig+0x244>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7ff f8e9 	bl	8005050 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e82:	f7ff f8e5 	bl	8005050 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e1a8      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e94:	4b2b      	ldr	r3, [pc, #172]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4925      	ldr	r1, [pc, #148]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]
 8005eb4:	e015      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_OscConfig+0x244>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7ff f8c8 	bl	8005050 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec4:	f7ff f8c4 	bl	8005050 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e187      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d036      	beq.n	8005f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <HAL_RCC_OscConfig+0x248>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7ff f8a8 	bl	8005050 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f04:	f7ff f8a4 	bl	8005050 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e167      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCC_OscConfig+0x240>)
 8005f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x200>
 8005f22:	e01b      	b.n	8005f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_OscConfig+0x248>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2a:	f7ff f891 	bl	8005050 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f30:	e00e      	b.n	8005f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f32:	f7ff f88d 	bl	8005050 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d907      	bls.n	8005f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e150      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
 8005f44:	40023800 	.word	0x40023800
 8005f48:	42470000 	.word	0x42470000
 8005f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f50:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ea      	bne.n	8005f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8097 	beq.w	8006098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6e:	4b81      	ldr	r3, [pc, #516]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	4b7d      	ldr	r3, [pc, #500]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	4a7c      	ldr	r2, [pc, #496]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8a:	4b7a      	ldr	r3, [pc, #488]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f96:	2301      	movs	r3, #1
 8005f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9a:	4b77      	ldr	r3, [pc, #476]	; (8006178 <HAL_RCC_OscConfig+0x474>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d118      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa6:	4b74      	ldr	r3, [pc, #464]	; (8006178 <HAL_RCC_OscConfig+0x474>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a73      	ldr	r2, [pc, #460]	; (8006178 <HAL_RCC_OscConfig+0x474>)
 8005fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb2:	f7ff f84d 	bl	8005050 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fba:	f7ff f849 	bl	8005050 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e10c      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fcc:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <HAL_RCC_OscConfig+0x474>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f0      	beq.n	8005fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d106      	bne.n	8005fee <HAL_RCC_OscConfig+0x2ea>
 8005fe0:	4b64      	ldr	r3, [pc, #400]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	4a63      	ldr	r2, [pc, #396]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
 8005fec:	e01c      	b.n	8006028 <HAL_RCC_OscConfig+0x324>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0x30c>
 8005ff6:	4b5f      	ldr	r3, [pc, #380]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a5e      	ldr	r2, [pc, #376]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	f043 0304 	orr.w	r3, r3, #4
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
 8006002:	4b5c      	ldr	r3, [pc, #368]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	4a5b      	ldr	r2, [pc, #364]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6713      	str	r3, [r2, #112]	; 0x70
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0x324>
 8006010:	4b58      	ldr	r3, [pc, #352]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a57      	ldr	r2, [pc, #348]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
 800601c:	4b55      	ldr	r3, [pc, #340]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006020:	4a54      	ldr	r2, [pc, #336]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006022:	f023 0304 	bic.w	r3, r3, #4
 8006026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d015      	beq.n	800605c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006030:	f7ff f80e 	bl	8005050 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006036:	e00a      	b.n	800604e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006038:	f7ff f80a 	bl	8005050 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	; 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e0cb      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604e:	4b49      	ldr	r3, [pc, #292]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0ee      	beq.n	8006038 <HAL_RCC_OscConfig+0x334>
 800605a:	e014      	b.n	8006086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605c:	f7fe fff8 	bl	8005050 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006064:	f7fe fff4 	bl	8005050 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e0b5      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607a:	4b3e      	ldr	r3, [pc, #248]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1ee      	bne.n	8006064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800608c:	4b39      	ldr	r3, [pc, #228]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	4a38      	ldr	r2, [pc, #224]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80a1 	beq.w	80061e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a2:	4b34      	ldr	r3, [pc, #208]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d05c      	beq.n	8006168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d141      	bne.n	800613a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b6:	4b31      	ldr	r3, [pc, #196]	; (800617c <HAL_RCC_OscConfig+0x478>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fe ffc8 	bl	8005050 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fe ffc4 	bl	8005050 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e087      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	4b27      	ldr	r3, [pc, #156]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	3b01      	subs	r3, #1
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	491b      	ldr	r1, [pc, #108]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x478>)
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006112:	f7fe ff9d 	bl	8005050 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611a:	f7fe ff99 	bl	8005050 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e05c      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x416>
 8006138:	e054      	b.n	80061e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613a:	4b10      	ldr	r3, [pc, #64]	; (800617c <HAL_RCC_OscConfig+0x478>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006140:	f7fe ff86 	bl	8005050 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006148:	f7fe ff82 	bl	8005050 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e045      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCC_OscConfig+0x470>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x444>
 8006166:	e03d      	b.n	80061e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d107      	bne.n	8006180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e038      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
 8006174:	40023800 	.word	0x40023800
 8006178:	40007000 	.word	0x40007000
 800617c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006180:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <HAL_RCC_OscConfig+0x4ec>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d028      	beq.n	80061e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d121      	bne.n	80061e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d11a      	bne.n	80061e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d111      	bne.n	80061e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	3b01      	subs	r3, #1
 80061ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d107      	bne.n	80061e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	40023800 	.word	0x40023800

080061f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0cc      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b68      	ldr	r3, [pc, #416]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d90c      	bls.n	8006230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b65      	ldr	r3, [pc, #404]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0b8      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006260:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a52      	ldr	r2, [pc, #328]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	494d      	ldr	r1, [pc, #308]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d044      	beq.n	8006314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d119      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b2:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e06f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c2:	4b3b      	ldr	r3, [pc, #236]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e067      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d2:	4b37      	ldr	r3, [pc, #220]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f023 0203 	bic.w	r2, r3, #3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4934      	ldr	r1, [pc, #208]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e4:	f7fe feb4 	bl	8005050 <HAL_GetTick>
 80062e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ea:	e00a      	b.n	8006302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ec:	f7fe feb0 	bl	8005050 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e04f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 020c 	and.w	r2, r3, #12
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	429a      	cmp	r2, r3
 8006312:	d1eb      	bne.n	80062ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d20c      	bcs.n	800633c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800637a:	f000 f821 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800637e:	4602      	mov	r2, r0
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x1c0>)
 800638c:	5ccb      	ldrb	r3, [r1, r3]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fd fc94 	bl	8003cc8 <HAL_InitTick>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40023c00 	.word	0x40023c00
 80063b0:	40023800 	.word	0x40023800
 80063b4:	0800cffc 	.word	0x0800cffc
 80063b8:	20000158 	.word	0x20000158
 80063bc:	20000160 	.word	0x20000160

080063c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c4:	b094      	sub	sp, #80	; 0x50
 80063c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	2300      	movs	r3, #0
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	2300      	movs	r3, #0
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d8:	4b79      	ldr	r3, [pc, #484]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 030c 	and.w	r3, r3, #12
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d00d      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0x40>
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	f200 80e1 	bhi.w	80065ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x34>
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d003      	beq.n	80063fa <HAL_RCC_GetSysClockFreq+0x3a>
 80063f2:	e0db      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f4:	4b73      	ldr	r3, [pc, #460]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063f8:	e0db      	b.n	80065b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fa:	4b73      	ldr	r3, [pc, #460]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80063fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063fe:	e0d8      	b.n	80065b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006400:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006408:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640a:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d063      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006416:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	099b      	lsrs	r3, r3, #6
 800641c:	2200      	movs	r2, #0
 800641e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006428:	633b      	str	r3, [r7, #48]	; 0x30
 800642a:	2300      	movs	r3, #0
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006432:	4622      	mov	r2, r4
 8006434:	462b      	mov	r3, r5
 8006436:	f04f 0000 	mov.w	r0, #0
 800643a:	f04f 0100 	mov.w	r1, #0
 800643e:	0159      	lsls	r1, r3, #5
 8006440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006444:	0150      	lsls	r0, r2, #5
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4621      	mov	r1, r4
 800644c:	1a51      	subs	r1, r2, r1
 800644e:	6139      	str	r1, [r7, #16]
 8006450:	4629      	mov	r1, r5
 8006452:	eb63 0301 	sbc.w	r3, r3, r1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006464:	4659      	mov	r1, fp
 8006466:	018b      	lsls	r3, r1, #6
 8006468:	4651      	mov	r1, sl
 800646a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800646e:	4651      	mov	r1, sl
 8006470:	018a      	lsls	r2, r1, #6
 8006472:	4651      	mov	r1, sl
 8006474:	ebb2 0801 	subs.w	r8, r2, r1
 8006478:	4659      	mov	r1, fp
 800647a:	eb63 0901 	sbc.w	r9, r3, r1
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800648e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006492:	4690      	mov	r8, r2
 8006494:	4699      	mov	r9, r3
 8006496:	4623      	mov	r3, r4
 8006498:	eb18 0303 	adds.w	r3, r8, r3
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	462b      	mov	r3, r5
 80064a0:	eb49 0303 	adc.w	r3, r9, r3
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064b2:	4629      	mov	r1, r5
 80064b4:	024b      	lsls	r3, r1, #9
 80064b6:	4621      	mov	r1, r4
 80064b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064bc:	4621      	mov	r1, r4
 80064be:	024a      	lsls	r2, r1, #9
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c6:	2200      	movs	r2, #0
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064d0:	f7fa f9d4 	bl	800087c <__aeabi_uldivmod>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4613      	mov	r3, r2
 80064da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064dc:	e058      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	2200      	movs	r2, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	4611      	mov	r1, r2
 80064ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	2300      	movs	r3, #0
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	f04f 0000 	mov.w	r0, #0
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	0159      	lsls	r1, r3, #5
 8006506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650a:	0150      	lsls	r0, r2, #5
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4641      	mov	r1, r8
 8006512:	ebb2 0a01 	subs.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb63 0b01 	sbc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800652c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006530:	ebb2 040a 	subs.w	r4, r2, sl
 8006534:	eb63 050b 	sbc.w	r5, r3, fp
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	00eb      	lsls	r3, r5, #3
 8006542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006546:	00e2      	lsls	r2, r4, #3
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	4643      	mov	r3, r8
 800654e:	18e3      	adds	r3, r4, r3
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	464b      	mov	r3, r9
 8006554:	eb45 0303 	adc.w	r3, r5, r3
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006566:	4629      	mov	r1, r5
 8006568:	028b      	lsls	r3, r1, #10
 800656a:	4621      	mov	r1, r4
 800656c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006570:	4621      	mov	r1, r4
 8006572:	028a      	lsls	r2, r1, #10
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657a:	2200      	movs	r2, #0
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006584:	f7fa f97a 	bl	800087c <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4613      	mov	r3, r2
 800658e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	3301      	adds	r3, #1
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065aa:	e002      	b.n	80065b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3750      	adds	r7, #80	; 0x50
 80065b8:	46bd      	mov	sp, r7
 80065ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065be:	bf00      	nop
 80065c0:	40023800 	.word	0x40023800
 80065c4:	00f42400 	.word	0x00f42400
 80065c8:	007a1200 	.word	0x007a1200

080065cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d2:	681b      	ldr	r3, [r3, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000158 	.word	0x20000158

080065e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065e8:	f7ff fff0 	bl	80065cc <HAL_RCC_GetHCLKFreq>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	0a9b      	lsrs	r3, r3, #10
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	4903      	ldr	r1, [pc, #12]	; (8006608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fa:	5ccb      	ldrb	r3, [r1, r3]
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40023800 	.word	0x40023800
 8006608:	0800d00c 	.word	0x0800d00c

0800660c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006610:	f7ff ffdc 	bl	80065cc <HAL_RCC_GetHCLKFreq>
 8006614:	4602      	mov	r2, r0
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	0b5b      	lsrs	r3, r3, #13
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	4903      	ldr	r1, [pc, #12]	; (8006630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006622:	5ccb      	ldrb	r3, [r1, r3]
 8006624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006628:	4618      	mov	r0, r3
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40023800 	.word	0x40023800
 8006630:	0800d00c 	.word	0x0800d00c

08006634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	220f      	movs	r2, #15
 8006642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006644:	4b12      	ldr	r3, [pc, #72]	; (8006690 <HAL_RCC_GetClockConfig+0x5c>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0203 	and.w	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <HAL_RCC_GetClockConfig+0x5c>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <HAL_RCC_GetClockConfig+0x5c>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <HAL_RCC_GetClockConfig+0x5c>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <HAL_RCC_GetClockConfig+0x60>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0207 	and.w	r2, r3, #7
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	601a      	str	r2, [r3, #0]
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40023800 	.word	0x40023800
 8006694:	40023c00 	.word	0x40023c00

08006698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e07b      	b.n	80067a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d108      	bne.n	80066c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ba:	d009      	beq.n	80066d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	61da      	str	r2, [r3, #28]
 80066c2:	e005      	b.n	80066d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fd f81e 	bl	800372c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006754:	ea42 0103 	orr.w	r1, r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	f003 0104 	and.w	r1, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f003 0210 	and.w	r2, r3, #16
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b088      	sub	sp, #32
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_Transmit+0x22>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e126      	b.n	8006a1a <HAL_SPI_Transmit+0x270>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d4:	f7fe fc3c 	bl	8005050 <HAL_GetTick>
 80067d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
 80067ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067ee:	e10b      	b.n	8006a08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <HAL_SPI_Transmit+0x52>
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006800:	e102      	b.n	8006a08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2203      	movs	r2, #3
 8006806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006848:	d10f      	bne.n	800686a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006858:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006868:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d007      	beq.n	8006888 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006890:	d14b      	bne.n	800692a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_Transmit+0xf6>
 800689a:	8afb      	ldrh	r3, [r7, #22]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d13e      	bne.n	800691e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	881a      	ldrh	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	1c9a      	adds	r2, r3, #2
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068c4:	e02b      	b.n	800691e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d112      	bne.n	80068fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	881a      	ldrh	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068f8:	e011      	b.n	800691e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fa:	f7fe fba9 	bl	8005050 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d803      	bhi.n	8006912 <HAL_SPI_Transmit+0x168>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d102      	bne.n	8006918 <HAL_SPI_Transmit+0x16e>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800691c:	e074      	b.n	8006a08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1ce      	bne.n	80068c6 <HAL_SPI_Transmit+0x11c>
 8006928:	e04c      	b.n	80069c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_SPI_Transmit+0x18e>
 8006932:	8afb      	ldrh	r3, [r7, #22]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d140      	bne.n	80069ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800695e:	e02c      	b.n	80069ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d113      	bne.n	8006996 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	86da      	strh	r2, [r3, #54]	; 0x36
 8006994:	e011      	b.n	80069ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006996:	f7fe fb5b 	bl	8005050 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d803      	bhi.n	80069ae <HAL_SPI_Transmit+0x204>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d102      	bne.n	80069b4 <HAL_SPI_Transmit+0x20a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069b8:	e026      	b.n	8006a08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1cd      	bne.n	8006960 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f8b3 	bl	8006b34 <SPI_EndRxTxTransaction>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e000      	b.n	8006a08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a34:	f7fe fb0c 	bl	8005050 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4413      	add	r3, r2
 8006a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a44:	f7fe fb04 	bl	8005050 <HAL_GetTick>
 8006a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a4a:	4b39      	ldr	r3, [pc, #228]	; (8006b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	015b      	lsls	r3, r3, #5
 8006a50:	0d1b      	lsrs	r3, r3, #20
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5a:	e054      	b.n	8006b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d050      	beq.n	8006b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a64:	f7fe faf4 	bl	8005050 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d902      	bls.n	8006a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d13d      	bne.n	8006af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a92:	d111      	bne.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d004      	beq.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa6:	d107      	bne.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac0:	d10f      	bne.n	8006ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e017      	b.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	bf0c      	ite	eq
 8006b16:	2301      	moveq	r3, #1
 8006b18:	2300      	movne	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d19b      	bne.n	8006a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000158 	.word	0x20000158

08006b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b40:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <SPI_EndRxTxTransaction+0x7c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <SPI_EndRxTxTransaction+0x80>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	0d5b      	lsrs	r3, r3, #21
 8006b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d112      	bne.n	8006b86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	2180      	movs	r1, #128	; 0x80
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7ff ff5a 	bl	8006a24 <SPI_WaitFlagStateUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	f043 0220 	orr.w	r2, r3, #32
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00f      	b.n	8006ba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d0f2      	beq.n	8006b86 <SPI_EndRxTxTransaction+0x52>
 8006ba0:	e000      	b.n	8006ba4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ba2:	bf00      	nop
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000158 	.word	0x20000158
 8006bb4:	165e9f81 	.word	0x165e9f81

08006bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e041      	b.n	8006c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fc febe 	bl	8003960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f000 ff8e 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d001      	beq.n	8006c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e04e      	b.n	8006d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a18      	ldr	r2, [pc, #96]	; (8006d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d010      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	e007      	b.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40001800 	.word	0x40001800

08006d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e041      	b.n	8006dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fc fd2c 	bl	80037bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4619      	mov	r1, r3
 8006d76:	4610      	mov	r0, r2
 8006d78:	f000 fece 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <HAL_TIM_PWM_Start+0x24>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	bf14      	ite	ne
 8006df4:	2301      	movne	r3, #1
 8006df6:	2300      	moveq	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e022      	b.n	8006e42 <HAL_TIM_PWM_Start+0x6a>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d109      	bne.n	8006e16 <HAL_TIM_PWM_Start+0x3e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	bf14      	ite	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	2300      	moveq	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	e015      	b.n	8006e42 <HAL_TIM_PWM_Start+0x6a>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d109      	bne.n	8006e30 <HAL_TIM_PWM_Start+0x58>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	e008      	b.n	8006e42 <HAL_TIM_PWM_Start+0x6a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	bf14      	ite	ne
 8006e3c:	2301      	movne	r3, #1
 8006e3e:	2300      	moveq	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e07c      	b.n	8006f44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_PWM_Start+0x82>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e58:	e013      	b.n	8006e82 <HAL_TIM_PWM_Start+0xaa>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d104      	bne.n	8006e6a <HAL_TIM_PWM_Start+0x92>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e68:	e00b      	b.n	8006e82 <HAL_TIM_PWM_Start+0xaa>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_PWM_Start+0xa2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e78:	e003      	b.n	8006e82 <HAL_TIM_PWM_Start+0xaa>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2201      	movs	r2, #1
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 f894 	bl	8007fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <HAL_TIM_PWM_Start+0x174>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIM_PWM_Start+0xcc>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	; (8006f50 <HAL_TIM_PWM_Start+0x178>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_PWM_Start+0xd0>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <HAL_TIM_PWM_Start+0xd2>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <HAL_TIM_PWM_Start+0x174>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d022      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d01d      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <HAL_TIM_PWM_Start+0x17c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d018      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <HAL_TIM_PWM_Start+0x180>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <HAL_TIM_PWM_Start+0x184>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00e      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <HAL_TIM_PWM_Start+0x178>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d009      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_TIM_PWM_Start+0x188>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x136>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <HAL_TIM_PWM_Start+0x18c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d111      	bne.n	8006f32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b06      	cmp	r3, #6
 8006f1e:	d010      	beq.n	8006f42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f30:	e007      	b.n	8006f42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0201 	orr.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40001800 	.word	0x40001800

08006f68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f81c 	bl	8007fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2e      	ldr	r2, [pc, #184]	; (8007040 <HAL_TIM_PWM_Stop+0xd8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x2c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <HAL_TIM_PWM_Stop+0xdc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_TIM_PWM_Stop+0x30>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_TIM_PWM_Stop+0x32>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_TIM_PWM_Stop+0x66>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	f240 4344 	movw	r3, #1092	; 0x444
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_PWM_Stop+0x66>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
 8006fd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <HAL_TIM_PWM_Stop+0x96>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	f240 4344 	movw	r3, #1092	; 0x444
 8006fe8:	4013      	ands	r3, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_PWM_Stop+0x96>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <HAL_TIM_PWM_Stop+0xa6>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700c:	e013      	b.n	8007036 <HAL_TIM_PWM_Stop+0xce>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b04      	cmp	r3, #4
 8007012:	d104      	bne.n	800701e <HAL_TIM_PWM_Stop+0xb6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800701c:	e00b      	b.n	8007036 <HAL_TIM_PWM_Stop+0xce>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d104      	bne.n	800702e <HAL_TIM_PWM_Stop+0xc6>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800702c:	e003      	b.n	8007036 <HAL_TIM_PWM_Stop+0xce>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40010000 	.word	0x40010000
 8007044:	40010400 	.word	0x40010400

08007048 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	e022      	b.n	80070ba <HAL_TIM_PWM_Start_DMA+0x72>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b04      	cmp	r3, #4
 8007078:	d109      	bne.n	800708e <HAL_TIM_PWM_Start_DMA+0x46>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	bf0c      	ite	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	2300      	movne	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e015      	b.n	80070ba <HAL_TIM_PWM_Start_DMA+0x72>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d109      	bne.n	80070a8 <HAL_TIM_PWM_Start_DMA+0x60>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	e008      	b.n	80070ba <HAL_TIM_PWM_Start_DMA+0x72>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80070be:	2302      	movs	r3, #2
 80070c0:	e171      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <HAL_TIM_PWM_Start_DMA+0x94>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e022      	b.n	8007122 <HAL_TIM_PWM_Start_DMA+0xda>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d109      	bne.n	80070f6 <HAL_TIM_PWM_Start_DMA+0xae>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	e015      	b.n	8007122 <HAL_TIM_PWM_Start_DMA+0xda>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d109      	bne.n	8007110 <HAL_TIM_PWM_Start_DMA+0xc8>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	bf0c      	ite	eq
 8007108:	2301      	moveq	r3, #1
 800710a:	2300      	movne	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	e008      	b.n	8007122 <HAL_TIM_PWM_Start_DMA+0xda>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d024      	beq.n	8007170 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <HAL_TIM_PWM_Start_DMA+0xee>
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e137      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_TIM_PWM_Start_DMA+0xfe>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007144:	e016      	b.n	8007174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d104      	bne.n	8007156 <HAL_TIM_PWM_Start_DMA+0x10e>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007154:	e00e      	b.n	8007174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d104      	bne.n	8007166 <HAL_TIM_PWM_Start_DMA+0x11e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007164:	e006      	b.n	8007174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800716e:	e001      	b.n	8007174 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e118      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b0c      	cmp	r3, #12
 8007178:	f200 80ae 	bhi.w	80072d8 <HAL_TIM_PWM_Start_DMA+0x290>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080072d9 	.word	0x080072d9
 800718c:	080072d9 	.word	0x080072d9
 8007190:	080072d9 	.word	0x080072d9
 8007194:	08007201 	.word	0x08007201
 8007198:	080072d9 	.word	0x080072d9
 800719c:	080072d9 	.word	0x080072d9
 80071a0:	080072d9 	.word	0x080072d9
 80071a4:	08007249 	.word	0x08007249
 80071a8:	080072d9 	.word	0x080072d9
 80071ac:	080072d9 	.word	0x080072d9
 80071b0:	080072d9 	.word	0x080072d9
 80071b4:	08007291 	.word	0x08007291
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	4a7c      	ldr	r2, [pc, #496]	; (80073b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80071be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	4a7b      	ldr	r2, [pc, #492]	; (80073b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	4a7a      	ldr	r2, [pc, #488]	; (80073b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80071ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3334      	adds	r3, #52	; 0x34
 80071dc:	461a      	mov	r2, r3
 80071de:	887b      	ldrh	r3, [r7, #2]
 80071e0:	f7fe f8f6 	bl	80053d0 <HAL_DMA_Start_IT>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e0db      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fc:	60da      	str	r2, [r3, #12]
      break;
 80071fe:	e06e      	b.n	80072de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	4a6a      	ldr	r2, [pc, #424]	; (80073b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	4a69      	ldr	r2, [pc, #420]	; (80073b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	4a68      	ldr	r2, [pc, #416]	; (80073b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007216:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3338      	adds	r3, #56	; 0x38
 8007224:	461a      	mov	r2, r3
 8007226:	887b      	ldrh	r3, [r7, #2]
 8007228:	f7fe f8d2 	bl	80053d0 <HAL_DMA_Start_IT>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e0b7      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007244:	60da      	str	r2, [r3, #12]
      break;
 8007246:	e04a      	b.n	80072de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800724e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	4a57      	ldr	r2, [pc, #348]	; (80073b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	4a56      	ldr	r2, [pc, #344]	; (80073b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800725e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	333c      	adds	r3, #60	; 0x3c
 800726c:	461a      	mov	r2, r3
 800726e:	887b      	ldrh	r3, [r7, #2]
 8007270:	f7fe f8ae 	bl	80053d0 <HAL_DMA_Start_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e093      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728c:	60da      	str	r2, [r3, #12]
      break;
 800728e:	e026      	b.n	80072de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	4a46      	ldr	r2, [pc, #280]	; (80073b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007296:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	4a45      	ldr	r2, [pc, #276]	; (80073b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800729e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	4a44      	ldr	r2, [pc, #272]	; (80073b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80072a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3340      	adds	r3, #64	; 0x40
 80072b4:	461a      	mov	r2, r3
 80072b6:	887b      	ldrh	r3, [r7, #2]
 80072b8:	f7fe f88a 	bl	80053d0 <HAL_DMA_Start_IT>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e06f      	b.n	80073a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072d4:	60da      	str	r2, [r3, #12]
      break;
 80072d6:	e002      	b.n	80072de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d15f      	bne.n	80073a4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fe63 	bl	8007fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a31      	ldr	r2, [pc, #196]	; (80073bc <HAL_TIM_PWM_Start_DMA+0x374>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_TIM_PWM_Start_DMA+0x2be>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2f      	ldr	r2, [pc, #188]	; (80073c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800731e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a25      	ldr	r2, [pc, #148]	; (80073bc <HAL_TIM_PWM_Start_DMA+0x374>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d022      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d01d      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d018      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1f      	ldr	r2, [pc, #124]	; (80073cc <HAL_TIM_PWM_Start_DMA+0x384>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1a      	ldr	r2, [pc, #104]	; (80073c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIM_PWM_Start_DMA+0x328>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d111      	bne.n	8007394 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b06      	cmp	r3, #6
 8007380:	d010      	beq.n	80073a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0201 	orr.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	e007      	b.n	80073a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	08007a07 	.word	0x08007a07
 80073b4:	08007aaf 	.word	0x08007aaf
 80073b8:	08007975 	.word	0x08007975
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40001800 	.word	0x40001800

080073d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d855      	bhi.n	8007498 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007499 	.word	0x08007499
 80073fc:	08007499 	.word	0x08007499
 8007400:	08007499 	.word	0x08007499
 8007404:	08007445 	.word	0x08007445
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007461 	.word	0x08007461
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	0800747d 	.word	0x0800747d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007436:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe f81f 	bl	8005480 <HAL_DMA_Abort_IT>
      break;
 8007442:	e02c      	b.n	800749e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007452:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe f811 	bl	8005480 <HAL_DMA_Abort_IT>
      break;
 800745e:	e01e      	b.n	800749e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800746e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe f803 	bl	8005480 <HAL_DMA_Abort_IT>
      break;
 800747a:	e010      	b.n	800749e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800748a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fff5 	bl	8005480 <HAL_DMA_Abort_IT>
      break;
 8007496:	e002      	b.n	800749e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	bf00      	nop
  }

  if (status == HAL_OK)
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d161      	bne.n	8007568 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2200      	movs	r2, #0
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fd83 	bl	8007fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a2f      	ldr	r2, [pc, #188]	; (8007574 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d004      	beq.n	80074c6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2d      	ldr	r2, [pc, #180]	; (8007578 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d101      	bne.n	80074ca <HAL_TIM_PWM_Stop_DMA+0xf2>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10f      	bne.n	8007500 <HAL_TIM_PWM_Stop_DMA+0x128>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a1a      	ldr	r2, [r3, #32]
 80074e6:	f240 4344 	movw	r3, #1092	; 0x444
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <HAL_TIM_PWM_Stop_DMA+0x128>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a1a      	ldr	r2, [r3, #32]
 8007506:	f241 1311 	movw	r3, #4369	; 0x1111
 800750a:	4013      	ands	r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10f      	bne.n	8007530 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	f240 4344 	movw	r3, #1092	; 0x444
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d107      	bne.n	8007530 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <HAL_TIM_PWM_Stop_DMA+0x168>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800753e:	e013      	b.n	8007568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b04      	cmp	r3, #4
 8007544:	d104      	bne.n	8007550 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800754e:	e00b      	b.n	8007568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b08      	cmp	r3, #8
 8007554:	d104      	bne.n	8007560 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800755e:	e003      	b.n	8007568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000
 8007578:	40010400 	.word	0x40010400

0800757c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0202 	mvn.w	r2, #2
 80075a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9b0 	bl	8007924 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9a2 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fb fc3f 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d122      	bne.n	800762c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d11b      	bne.n	800762c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0204 	mvn.w	r2, #4
 80075fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f986 	bl	8007924 <HAL_TIM_IC_CaptureCallback>
 8007618:	e005      	b.n	8007626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f978 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fb fc15 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b08      	cmp	r3, #8
 8007638:	d122      	bne.n	8007680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b08      	cmp	r3, #8
 8007646:	d11b      	bne.n	8007680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0208 	mvn.w	r2, #8
 8007650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2204      	movs	r2, #4
 8007656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f95c 	bl	8007924 <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f94e 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fb fbeb 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b10      	cmp	r3, #16
 800768c:	d122      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b10      	cmp	r3, #16
 800769a:	d11b      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0210 	mvn.w	r2, #16
 80076a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2208      	movs	r2, #8
 80076aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f932 	bl	8007924 <HAL_TIM_IC_CaptureCallback>
 80076c0:	e005      	b.n	80076ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f924 	bl	8007910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fb fbc1 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10e      	bne.n	8007700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0201 	mvn.w	r2, #1
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fb ffc6 	bl	800368c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d10e      	bne.n	800772c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d107      	bne.n	800772c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fd44 	bl	80081b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d10e      	bne.n	8007758 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d107      	bne.n	8007758 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8fa 	bl	800794c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b20      	cmp	r3, #32
 8007764:	d10e      	bne.n	8007784 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b20      	cmp	r3, #32
 8007772:	d107      	bne.n	8007784 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f06f 0220 	mvn.w	r2, #32
 800777c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd0e 	bl	80081a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e0ae      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	f200 809f 	bhi.w	80078f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	080078f9 	.word	0x080078f9
 80077c8:	080078f9 	.word	0x080078f9
 80077cc:	080078f9 	.word	0x080078f9
 80077d0:	08007835 	.word	0x08007835
 80077d4:	080078f9 	.word	0x080078f9
 80077d8:	080078f9 	.word	0x080078f9
 80077dc:	080078f9 	.word	0x080078f9
 80077e0:	08007877 	.word	0x08007877
 80077e4:	080078f9 	.word	0x080078f9
 80077e8:	080078f9 	.word	0x080078f9
 80077ec:	080078f9 	.word	0x080078f9
 80077f0:	080078b7 	.word	0x080078b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fa2c 	bl	8007c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0208 	orr.w	r2, r2, #8
 800780e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0204 	bic.w	r2, r2, #4
 800781e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6999      	ldr	r1, [r3, #24]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	619a      	str	r2, [r3, #24]
      break;
 8007832:	e064      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fa7c 	bl	8007d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6999      	ldr	r1, [r3, #24]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	619a      	str	r2, [r3, #24]
      break;
 8007874:	e043      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fad1 	bl	8007e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0208 	orr.w	r2, r2, #8
 8007890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0204 	bic.w	r2, r2, #4
 80078a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69d9      	ldr	r1, [r3, #28]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	61da      	str	r2, [r3, #28]
      break;
 80078b4:	e023      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fb25 	bl	8007f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69d9      	ldr	r1, [r3, #28]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	021a      	lsls	r2, r3, #8
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	61da      	str	r2, [r3, #28]
      break;
 80078f6:	e002      	b.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d107      	bne.n	800799c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800799a:	e02a      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d107      	bne.n	80079b6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b4:	e01d      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d107      	bne.n	80079d0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2204      	movs	r2, #4
 80079c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079ce:	e010      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d107      	bne.n	80079ea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2208      	movs	r2, #8
 80079de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079e8:	e003      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f7ff ffb4 	bl	8007960 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	771a      	strb	r2, [r3, #28]
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d10b      	bne.n	8007a36 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d136      	bne.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a34:	e031      	b.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d10b      	bne.n	8007a58 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d125      	bne.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a56:	e020      	b.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d10b      	bne.n	8007a7a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2204      	movs	r2, #4
 8007a66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d114      	bne.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a78:	e00f      	b.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d10a      	bne.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2208      	movs	r2, #8
 8007a88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7fb f9d8 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	771a      	strb	r2, [r3, #28]
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d103      	bne.n	8007ace <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	771a      	strb	r2, [r3, #28]
 8007acc:	e019      	b.n	8007b02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d103      	bne.n	8007ae0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2202      	movs	r2, #2
 8007adc:	771a      	strb	r2, [r3, #28]
 8007ade:	e010      	b.n	8007b02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d103      	bne.n	8007af2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2204      	movs	r2, #4
 8007aee:	771a      	strb	r2, [r3, #28]
 8007af0:	e007      	b.n	8007b02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d102      	bne.n	8007b02 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2208      	movs	r2, #8
 8007b00:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ff18 	bl	8007938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	771a      	strb	r2, [r3, #28]
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a40      	ldr	r2, [pc, #256]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b36:	d00f      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a3d      	ldr	r2, [pc, #244]	; (8007c30 <TIM_Base_SetConfig+0x118>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00b      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a3c      	ldr	r2, [pc, #240]	; (8007c34 <TIM_Base_SetConfig+0x11c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3b      	ldr	r2, [pc, #236]	; (8007c38 <TIM_Base_SetConfig+0x120>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3a      	ldr	r2, [pc, #232]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d108      	bne.n	8007b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2f      	ldr	r2, [pc, #188]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b78:	d027      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <TIM_Base_SetConfig+0x118>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d023      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2b      	ldr	r2, [pc, #172]	; (8007c34 <TIM_Base_SetConfig+0x11c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01f      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2a      	ldr	r2, [pc, #168]	; (8007c38 <TIM_Base_SetConfig+0x120>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d017      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <TIM_Base_SetConfig+0x128>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <TIM_Base_SetConfig+0x12c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <TIM_Base_SetConfig+0x130>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a25      	ldr	r2, [pc, #148]	; (8007c4c <TIM_Base_SetConfig+0x134>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a24      	ldr	r2, [pc, #144]	; (8007c50 <TIM_Base_SetConfig+0x138>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a23      	ldr	r2, [pc, #140]	; (8007c54 <TIM_Base_SetConfig+0x13c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d108      	bne.n	8007bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <TIM_Base_SetConfig+0x114>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0c      	ldr	r2, [pc, #48]	; (8007c3c <TIM_Base_SetConfig+0x124>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d103      	bne.n	8007c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	615a      	str	r2, [r3, #20]
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40000c00 	.word	0x40000c00
 8007c3c:	40010400 	.word	0x40010400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	40014800 	.word	0x40014800
 8007c4c:	40001800 	.word	0x40001800
 8007c50:	40001c00 	.word	0x40001c00
 8007c54:	40002000 	.word	0x40002000

08007c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	f023 0201 	bic.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0303 	bic.w	r3, r3, #3
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f023 0302 	bic.w	r3, r3, #2
 8007ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <TIM_OC1_SetConfig+0xd8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC1_SetConfig+0x64>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <TIM_OC1_SetConfig+0xdc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0308 	bic.w	r3, r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <TIM_OC1_SetConfig+0xd8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_OC1_SetConfig+0x8e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a14      	ldr	r2, [pc, #80]	; (8007d34 <TIM_OC1_SetConfig+0xdc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d111      	bne.n	8007d0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	621a      	str	r2, [r3, #32]
}
 8007d24:	bf00      	nop
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400

08007d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0210 	bic.w	r2, r3, #16
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0320 	bic.w	r3, r3, #32
 8007d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a22      	ldr	r2, [pc, #136]	; (8007e1c <TIM_OC2_SetConfig+0xe4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC2_SetConfig+0x68>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <TIM_OC2_SetConfig+0xe8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d10d      	bne.n	8007dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <TIM_OC2_SetConfig+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_OC2_SetConfig+0x94>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <TIM_OC2_SetConfig+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d113      	bne.n	8007df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40010400 	.word	0x40010400

08007e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <TIM_OC3_SetConfig+0xe0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10d      	bne.n	8007ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a16      	ldr	r2, [pc, #88]	; (8007f04 <TIM_OC3_SetConfig+0xe0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_OC3_SetConfig+0x92>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <TIM_OC3_SetConfig+0xe4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d113      	bne.n	8007ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	621a      	str	r2, [r3, #32]
}
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400

08007f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	031b      	lsls	r3, r3, #12
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a12      	ldr	r2, [pc, #72]	; (8007fb0 <TIM_OC4_SetConfig+0xa4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_OC4_SetConfig+0x68>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a11      	ldr	r2, [pc, #68]	; (8007fb4 <TIM_OC4_SetConfig+0xa8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d109      	bne.n	8007f88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	019b      	lsls	r3, r3, #6
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	40010400 	.word	0x40010400

08007fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	2201      	movs	r2, #1
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	401a      	ands	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1a      	ldr	r2, [r3, #32]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008018:	2302      	movs	r3, #2
 800801a:	e05a      	b.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a21      	ldr	r2, [pc, #132]	; (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008068:	d01d      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d10c      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40010400 	.word	0x40010400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40001800 	.word	0x40001800

080080fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008114:	2302      	movs	r3, #2
 8008116:	e03d      	b.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e03f      	b.n	800825a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fb fc42 	bl	8003a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	; 0x24
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800820a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f929 	bl	8008464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b08a      	sub	sp, #40	; 0x28
 8008266:	af02      	add	r7, sp, #8
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b20      	cmp	r3, #32
 8008280:	d17c      	bne.n	800837c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_UART_Transmit+0x2c>
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e075      	b.n	800837e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_UART_Transmit+0x3e>
 800829c:	2302      	movs	r3, #2
 800829e:	e06e      	b.n	800837e <HAL_UART_Transmit+0x11c>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2221      	movs	r2, #33	; 0x21
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082b6:	f7fc fecb 	bl	8005050 <HAL_GetTick>
 80082ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	88fa      	ldrh	r2, [r7, #6]
 80082c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d0:	d108      	bne.n	80082e4 <HAL_UART_Transmit+0x82>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	e003      	b.n	80082ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082f4:	e02a      	b.n	800834c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f840 	bl	8008386 <UART_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e036      	b.n	800837e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	3302      	adds	r3, #2
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	e007      	b.n	800833e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1cf      	bne.n	80082f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2200      	movs	r2, #0
 800835e:	2140      	movs	r1, #64	; 0x40
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f810 	bl	8008386 <UART_WaitOnFlagUntilTimeout>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e006      	b.n	800837e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800837c:	2302      	movs	r3, #2
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b090      	sub	sp, #64	; 0x40
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	4613      	mov	r3, r2
 8008394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008396:	e050      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839e:	d04c      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80083a6:	f7fc fe53 	bl	8005050 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d241      	bcs.n	800843a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	330c      	adds	r3, #12
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083d6:	637a      	str	r2, [r7, #52]	; 0x34
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3314      	adds	r3, #20
 80083f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	613b      	str	r3, [r7, #16]
   return(result);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	63bb      	str	r3, [r7, #56]	; 0x38
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800840a:	623a      	str	r2, [r7, #32]
 800840c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	69f9      	ldr	r1, [r7, #28]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	61bb      	str	r3, [r7, #24]
   return(result);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e5      	bne.n	80083ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e00f      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	429a      	cmp	r2, r3
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	429a      	cmp	r2, r3
 8008456:	d09f      	beq.n	8008398 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3740      	adds	r7, #64	; 0x40
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008468:	b0c0      	sub	sp, #256	; 0x100
 800846a:	af00      	add	r7, sp, #0
 800846c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	68d9      	ldr	r1, [r3, #12]
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	ea40 0301 	orr.w	r3, r0, r1
 800848c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800848e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	431a      	orrs	r2, r3
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084bc:	f021 010c 	bic.w	r1, r1, #12
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084ca:	430b      	orrs	r3, r1
 80084cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084de:	6999      	ldr	r1, [r3, #24]
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	ea40 0301 	orr.w	r3, r0, r1
 80084ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b8f      	ldr	r3, [pc, #572]	; (8008730 <UART_SetConfig+0x2cc>)
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d005      	beq.n	8008504 <UART_SetConfig+0xa0>
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b8d      	ldr	r3, [pc, #564]	; (8008734 <UART_SetConfig+0x2d0>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d104      	bne.n	800850e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008504:	f7fe f882 	bl	800660c <HAL_RCC_GetPCLK2Freq>
 8008508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800850c:	e003      	b.n	8008516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fe f869 	bl	80065e4 <HAL_RCC_GetPCLK1Freq>
 8008512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008520:	f040 810c 	bne.w	800873c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800852e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008536:	4622      	mov	r2, r4
 8008538:	462b      	mov	r3, r5
 800853a:	1891      	adds	r1, r2, r2
 800853c:	65b9      	str	r1, [r7, #88]	; 0x58
 800853e:	415b      	adcs	r3, r3
 8008540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008546:	4621      	mov	r1, r4
 8008548:	eb12 0801 	adds.w	r8, r2, r1
 800854c:	4629      	mov	r1, r5
 800854e:	eb43 0901 	adc.w	r9, r3, r1
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800855e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008566:	4690      	mov	r8, r2
 8008568:	4699      	mov	r9, r3
 800856a:	4623      	mov	r3, r4
 800856c:	eb18 0303 	adds.w	r3, r8, r3
 8008570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008574:	462b      	mov	r3, r5
 8008576:	eb49 0303 	adc.w	r3, r9, r3
 800857a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800858a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800858e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008592:	460b      	mov	r3, r1
 8008594:	18db      	adds	r3, r3, r3
 8008596:	653b      	str	r3, [r7, #80]	; 0x50
 8008598:	4613      	mov	r3, r2
 800859a:	eb42 0303 	adc.w	r3, r2, r3
 800859e:	657b      	str	r3, [r7, #84]	; 0x54
 80085a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085a8:	f7f8 f968 	bl	800087c <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4b61      	ldr	r3, [pc, #388]	; (8008738 <UART_SetConfig+0x2d4>)
 80085b2:	fba3 2302 	umull	r2, r3, r3, r2
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	011c      	lsls	r4, r3, #4
 80085ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	1891      	adds	r1, r2, r2
 80085d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80085d4:	415b      	adcs	r3, r3
 80085d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085dc:	4641      	mov	r1, r8
 80085de:	eb12 0a01 	adds.w	sl, r2, r1
 80085e2:	4649      	mov	r1, r9
 80085e4:	eb43 0b01 	adc.w	fp, r3, r1
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085fc:	4692      	mov	sl, r2
 80085fe:	469b      	mov	fp, r3
 8008600:	4643      	mov	r3, r8
 8008602:	eb1a 0303 	adds.w	r3, sl, r3
 8008606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800860a:	464b      	mov	r3, r9
 800860c:	eb4b 0303 	adc.w	r3, fp, r3
 8008610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008628:	460b      	mov	r3, r1
 800862a:	18db      	adds	r3, r3, r3
 800862c:	643b      	str	r3, [r7, #64]	; 0x40
 800862e:	4613      	mov	r3, r2
 8008630:	eb42 0303 	adc.w	r3, r2, r3
 8008634:	647b      	str	r3, [r7, #68]	; 0x44
 8008636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800863a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800863e:	f7f8 f91d 	bl	800087c <__aeabi_uldivmod>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4611      	mov	r1, r2
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <UART_SetConfig+0x2d4>)
 800864a:	fba3 2301 	umull	r2, r3, r3, r1
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	2264      	movs	r2, #100	; 0x64
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	1acb      	subs	r3, r1, r3
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800865e:	4b36      	ldr	r3, [pc, #216]	; (8008738 <UART_SetConfig+0x2d4>)
 8008660:	fba3 2302 	umull	r2, r3, r3, r2
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800866c:	441c      	add	r4, r3
 800866e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008672:	2200      	movs	r2, #0
 8008674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800867c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008680:	4642      	mov	r2, r8
 8008682:	464b      	mov	r3, r9
 8008684:	1891      	adds	r1, r2, r2
 8008686:	63b9      	str	r1, [r7, #56]	; 0x38
 8008688:	415b      	adcs	r3, r3
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008690:	4641      	mov	r1, r8
 8008692:	1851      	adds	r1, r2, r1
 8008694:	6339      	str	r1, [r7, #48]	; 0x30
 8008696:	4649      	mov	r1, r9
 8008698:	414b      	adcs	r3, r1
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086a8:	4659      	mov	r1, fp
 80086aa:	00cb      	lsls	r3, r1, #3
 80086ac:	4651      	mov	r1, sl
 80086ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b2:	4651      	mov	r1, sl
 80086b4:	00ca      	lsls	r2, r1, #3
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	4642      	mov	r2, r8
 80086be:	189b      	adds	r3, r3, r2
 80086c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086c4:	464b      	mov	r3, r9
 80086c6:	460a      	mov	r2, r1
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086e4:	460b      	mov	r3, r1
 80086e6:	18db      	adds	r3, r3, r3
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ea:	4613      	mov	r3, r2
 80086ec:	eb42 0303 	adc.w	r3, r2, r3
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086fa:	f7f8 f8bf 	bl	800087c <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <UART_SetConfig+0x2d4>)
 8008704:	fba3 1302 	umull	r1, r3, r3, r2
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	2164      	movs	r1, #100	; 0x64
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	3332      	adds	r3, #50	; 0x32
 8008716:	4a08      	ldr	r2, [pc, #32]	; (8008738 <UART_SetConfig+0x2d4>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	f003 0207 	and.w	r2, r3, #7
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4422      	add	r2, r4
 800872a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800872c:	e105      	b.n	800893a <UART_SetConfig+0x4d6>
 800872e:	bf00      	nop
 8008730:	40011000 	.word	0x40011000
 8008734:	40011400 	.word	0x40011400
 8008738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800873c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008740:	2200      	movs	r2, #0
 8008742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800874a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800874e:	4642      	mov	r2, r8
 8008750:	464b      	mov	r3, r9
 8008752:	1891      	adds	r1, r2, r2
 8008754:	6239      	str	r1, [r7, #32]
 8008756:	415b      	adcs	r3, r3
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
 800875a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800875e:	4641      	mov	r1, r8
 8008760:	1854      	adds	r4, r2, r1
 8008762:	4649      	mov	r1, r9
 8008764:	eb43 0501 	adc.w	r5, r3, r1
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	00eb      	lsls	r3, r5, #3
 8008772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008776:	00e2      	lsls	r2, r4, #3
 8008778:	4614      	mov	r4, r2
 800877a:	461d      	mov	r5, r3
 800877c:	4643      	mov	r3, r8
 800877e:	18e3      	adds	r3, r4, r3
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008784:	464b      	mov	r3, r9
 8008786:	eb45 0303 	adc.w	r3, r5, r3
 800878a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800879a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087aa:	4629      	mov	r1, r5
 80087ac:	008b      	lsls	r3, r1, #2
 80087ae:	4621      	mov	r1, r4
 80087b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b4:	4621      	mov	r1, r4
 80087b6:	008a      	lsls	r2, r1, #2
 80087b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087bc:	f7f8 f85e 	bl	800087c <__aeabi_uldivmod>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4b60      	ldr	r3, [pc, #384]	; (8008948 <UART_SetConfig+0x4e4>)
 80087c6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	011c      	lsls	r4, r3, #4
 80087ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	1891      	adds	r1, r2, r2
 80087e6:	61b9      	str	r1, [r7, #24]
 80087e8:	415b      	adcs	r3, r3
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f0:	4641      	mov	r1, r8
 80087f2:	1851      	adds	r1, r2, r1
 80087f4:	6139      	str	r1, [r7, #16]
 80087f6:	4649      	mov	r1, r9
 80087f8:	414b      	adcs	r3, r1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008808:	4659      	mov	r1, fp
 800880a:	00cb      	lsls	r3, r1, #3
 800880c:	4651      	mov	r1, sl
 800880e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008812:	4651      	mov	r1, sl
 8008814:	00ca      	lsls	r2, r1, #3
 8008816:	4610      	mov	r0, r2
 8008818:	4619      	mov	r1, r3
 800881a:	4603      	mov	r3, r0
 800881c:	4642      	mov	r2, r8
 800881e:	189b      	adds	r3, r3, r2
 8008820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008824:	464b      	mov	r3, r9
 8008826:	460a      	mov	r2, r1
 8008828:	eb42 0303 	adc.w	r3, r2, r3
 800882c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	67bb      	str	r3, [r7, #120]	; 0x78
 800883a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008848:	4649      	mov	r1, r9
 800884a:	008b      	lsls	r3, r1, #2
 800884c:	4641      	mov	r1, r8
 800884e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008852:	4641      	mov	r1, r8
 8008854:	008a      	lsls	r2, r1, #2
 8008856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800885a:	f7f8 f80f 	bl	800087c <__aeabi_uldivmod>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4b39      	ldr	r3, [pc, #228]	; (8008948 <UART_SetConfig+0x4e4>)
 8008864:	fba3 1302 	umull	r1, r3, r3, r2
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	2164      	movs	r1, #100	; 0x64
 800886c:	fb01 f303 	mul.w	r3, r1, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	3332      	adds	r3, #50	; 0x32
 8008876:	4a34      	ldr	r2, [pc, #208]	; (8008948 <UART_SetConfig+0x4e4>)
 8008878:	fba2 2303 	umull	r2, r3, r2, r3
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008882:	441c      	add	r4, r3
 8008884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008888:	2200      	movs	r2, #0
 800888a:	673b      	str	r3, [r7, #112]	; 0x70
 800888c:	677a      	str	r2, [r7, #116]	; 0x74
 800888e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008892:	4642      	mov	r2, r8
 8008894:	464b      	mov	r3, r9
 8008896:	1891      	adds	r1, r2, r2
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	415b      	adcs	r3, r3
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a2:	4641      	mov	r1, r8
 80088a4:	1851      	adds	r1, r2, r1
 80088a6:	6039      	str	r1, [r7, #0]
 80088a8:	4649      	mov	r1, r9
 80088aa:	414b      	adcs	r3, r1
 80088ac:	607b      	str	r3, [r7, #4]
 80088ae:	f04f 0200 	mov.w	r2, #0
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088ba:	4659      	mov	r1, fp
 80088bc:	00cb      	lsls	r3, r1, #3
 80088be:	4651      	mov	r1, sl
 80088c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088c4:	4651      	mov	r1, sl
 80088c6:	00ca      	lsls	r2, r1, #3
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	4603      	mov	r3, r0
 80088ce:	4642      	mov	r2, r8
 80088d0:	189b      	adds	r3, r3, r2
 80088d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80088d4:	464b      	mov	r3, r9
 80088d6:	460a      	mov	r2, r1
 80088d8:	eb42 0303 	adc.w	r3, r2, r3
 80088dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	663b      	str	r3, [r7, #96]	; 0x60
 80088e8:	667a      	str	r2, [r7, #100]	; 0x64
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088f6:	4649      	mov	r1, r9
 80088f8:	008b      	lsls	r3, r1, #2
 80088fa:	4641      	mov	r1, r8
 80088fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008900:	4641      	mov	r1, r8
 8008902:	008a      	lsls	r2, r1, #2
 8008904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008908:	f7f7 ffb8 	bl	800087c <__aeabi_uldivmod>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <UART_SetConfig+0x4e4>)
 8008912:	fba3 1302 	umull	r1, r3, r3, r2
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	2164      	movs	r1, #100	; 0x64
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	3332      	adds	r3, #50	; 0x32
 8008924:	4a08      	ldr	r2, [pc, #32]	; (8008948 <UART_SetConfig+0x4e4>)
 8008926:	fba2 2303 	umull	r2, r3, r2, r3
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	f003 020f 	and.w	r2, r3, #15
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4422      	add	r2, r4
 8008938:	609a      	str	r2, [r3, #8]
}
 800893a:	bf00      	nop
 800893c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008940:	46bd      	mov	sp, r7
 8008942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008946:	bf00      	nop
 8008948:	51eb851f 	.word	0x51eb851f

0800894c <__NVIC_SetPriority>:
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895c:	2b00      	cmp	r3, #0
 800895e:	db0a      	blt.n	8008976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	b2da      	uxtb	r2, r3
 8008964:	490c      	ldr	r1, [pc, #48]	; (8008998 <__NVIC_SetPriority+0x4c>)
 8008966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896a:	0112      	lsls	r2, r2, #4
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	440b      	add	r3, r1
 8008970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008974:	e00a      	b.n	800898c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	b2da      	uxtb	r2, r3
 800897a:	4908      	ldr	r1, [pc, #32]	; (800899c <__NVIC_SetPriority+0x50>)
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	3b04      	subs	r3, #4
 8008984:	0112      	lsls	r2, r2, #4
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	440b      	add	r3, r1
 800898a:	761a      	strb	r2, [r3, #24]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	e000e100 	.word	0xe000e100
 800899c:	e000ed00 	.word	0xe000ed00

080089a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <SysTick_Handler+0x1c>)
 80089a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80089a8:	f001 ffe6 	bl	800a978 <xTaskGetSchedulerState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d001      	beq.n	80089b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089b2:	f002 fdd1 	bl	800b558 <xPortSysTickHandler>
  }
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	e000e010 	.word	0xe000e010

080089c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089c4:	2100      	movs	r1, #0
 80089c6:	f06f 0004 	mvn.w	r0, #4
 80089ca:	f7ff ffbf 	bl	800894c <__NVIC_SetPriority>
#endif
}
 80089ce:	bf00      	nop
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	603b      	str	r3, [r7, #0]
  return(result);
 80089e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089e6:	f06f 0305 	mvn.w	r3, #5
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	e00c      	b.n	8008a08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <osKernelInitialize+0x44>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089f6:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <osKernelInitialize+0x44>)
 80089f8:	2201      	movs	r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	607b      	str	r3, [r7, #4]
 8008a00:	e002      	b.n	8008a08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a08:	687b      	ldr	r3, [r7, #4]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	20003548 	.word	0x20003548

08008a1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a22:	f3ef 8305 	mrs	r3, IPSR
 8008a26:	603b      	str	r3, [r7, #0]
  return(result);
 8008a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a2e:	f06f 0305 	mvn.w	r3, #5
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e010      	b.n	8008a58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <osKernelStart+0x48>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d109      	bne.n	8008a52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a3e:	f7ff ffbf 	bl	80089c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <osKernelStart+0x48>)
 8008a44:	2202      	movs	r2, #2
 8008a46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a48:	f001 fb3a 	bl	800a0c0 <vTaskStartScheduler>
      stat = osOK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	e002      	b.n	8008a58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a58:	687b      	ldr	r3, [r7, #4]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20003548 	.word	0x20003548

08008a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a78:	f3ef 8305 	mrs	r3, IPSR
 8008a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008a7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d17e      	bne.n	8008b82 <osThreadNew+0x11a>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d07b      	beq.n	8008b82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a8e:	2318      	movs	r3, #24
 8008a90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d045      	beq.n	8008b2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <osThreadNew+0x48>
        name = attr->name;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <osThreadNew+0x6e>
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b38      	cmp	r3, #56	; 0x38
 8008ac8:	d805      	bhi.n	8008ad6 <osThreadNew+0x6e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <osThreadNew+0x72>
        return (NULL);
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e054      	b.n	8008b84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <osThreadNew+0xa8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2bbb      	cmp	r3, #187	; 0xbb
 8008af8:	d90a      	bls.n	8008b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d006      	beq.n	8008b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <osThreadNew+0xa8>
        mem = 1;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	e010      	b.n	8008b32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <osThreadNew+0xca>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <osThreadNew+0xca>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <osThreadNew+0xca>
          mem = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
 8008b2c:	e001      	b.n	8008b32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d110      	bne.n	8008b5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b40:	9202      	str	r2, [sp, #8]
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a3a      	ldr	r2, [r7, #32]
 8008b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f83a 	bl	8009bc8 <xTaskCreateStatic>
 8008b54:	4603      	mov	r3, r0
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	e013      	b.n	8008b82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d110      	bne.n	8008b82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f001 f885 	bl	8009c82 <xTaskCreate>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <osThreadNew+0x11a>
            hTask = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b82:	693b      	ldr	r3, [r7, #16]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3728      	adds	r7, #40	; 0x28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b98:	f3ef 8305 	mrs	r3, IPSR
 8008b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <osThreadResume+0x20>
    stat = osErrorISR;
 8008ba4:	f06f 0305 	mvn.w	r3, #5
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e00b      	b.n	8008bc4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d103      	bne.n	8008bba <osThreadResume+0x2e>
    stat = osErrorParameter;
 8008bb2:	f06f 0303 	mvn.w	r3, #3
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e004      	b.n	8008bc4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8008bbe:	6938      	ldr	r0, [r7, #16]
 8008bc0:	f001 fa20 	bl	800a004 <vTaskResume>
  }

  return (stat);
 8008bc4:	697b      	ldr	r3, [r7, #20]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bd6:	f3ef 8305 	mrs	r3, IPSR
 8008bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <osDelay+0x1c>
    stat = osErrorISR;
 8008be2:	f06f 0305 	mvn.w	r3, #5
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e007      	b.n	8008bfa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 f99f 	bl	8009f38 <vTaskDelay>
    }
  }

  return (stat);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c14:	f3ef 8305 	mrs	r3, IPSR
 8008c18:	613b      	str	r3, [r7, #16]
  return(result);
 8008c1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d15f      	bne.n	8008ce0 <osMessageQueueNew+0xdc>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d05c      	beq.n	8008ce0 <osMessageQueueNew+0xdc>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d059      	beq.n	8008ce0 <osMessageQueueNew+0xdc>
    mem = -1;
 8008c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d029      	beq.n	8008c8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d012      	beq.n	8008c66 <osMessageQueueNew+0x62>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	2b4f      	cmp	r3, #79	; 0x4f
 8008c46:	d90e      	bls.n	8008c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695a      	ldr	r2, [r3, #20]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	fb01 f303 	mul.w	r3, r1, r3
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d302      	bcc.n	8008c66 <osMessageQueueNew+0x62>
        mem = 1;
 8008c60:	2301      	movs	r3, #1
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	e014      	b.n	8008c90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d110      	bne.n	8008c90 <osMessageQueueNew+0x8c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10c      	bne.n	8008c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d108      	bne.n	8008c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <osMessageQueueNew+0x8c>
          mem = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	e001      	b.n	8008c90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d10b      	bne.n	8008cae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	9100      	str	r1, [sp, #0]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fa51 	bl	800914c <xQueueGenericCreateStatic>
 8008caa:	61f8      	str	r0, [r7, #28]
 8008cac:	e008      	b.n	8008cc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d105      	bne.n	8008cc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fabf 	bl	800923c <xQueueGenericCreate>
 8008cbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00c      	beq.n	8008ce0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e001      	b.n	8008cd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008cd8:	6979      	ldr	r1, [r7, #20]
 8008cda:	69f8      	ldr	r0, [r7, #28]
 8008cdc:	f000 ff16 	bl	8009b0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d04:	f3ef 8305 	mrs	r3, IPSR
 8008d08:	617b      	str	r3, [r7, #20]
  return(result);
 8008d0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d028      	beq.n	8008d62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <osMessageQueuePut+0x36>
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <osMessageQueuePut+0x36>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008d22:	f06f 0303 	mvn.w	r3, #3
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	e038      	b.n	8008d9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d2e:	f107 0210 	add.w	r2, r7, #16
 8008d32:	2300      	movs	r3, #0
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	69b8      	ldr	r0, [r7, #24]
 8008d38:	f000 fbdc 	bl	80094f4 <xQueueGenericSendFromISR>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d003      	beq.n	8008d4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008d42:	f06f 0302 	mvn.w	r3, #2
 8008d46:	61fb      	str	r3, [r7, #28]
 8008d48:	e028      	b.n	8008d9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d025      	beq.n	8008d9c <osMessageQueuePut+0xb0>
 8008d50:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <osMessageQueuePut+0xbc>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	e01c      	b.n	8008d9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <osMessageQueuePut+0x82>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008d6e:	f06f 0303 	mvn.w	r3, #3
 8008d72:	61fb      	str	r3, [r7, #28]
 8008d74:	e012      	b.n	8008d9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	69b8      	ldr	r0, [r7, #24]
 8008d7e:	f000 fabb 	bl	80092f8 <xQueueGenericSend>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d009      	beq.n	8008d9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008d8e:	f06f 0301 	mvn.w	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e002      	b.n	8008d9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008d96:	f06f 0302 	mvn.w	r3, #2
 8008d9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d9c:	69fb      	ldr	r3, [r7, #28]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3720      	adds	r7, #32
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc2:	f3ef 8305 	mrs	r3, IPSR
 8008dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8008dc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d028      	beq.n	8008e20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <osMessageQueueGet+0x34>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <osMessageQueueGet+0x34>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008de0:	f06f 0303 	mvn.w	r3, #3
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	e037      	b.n	8008e58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	461a      	mov	r2, r3
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	69b8      	ldr	r0, [r7, #24]
 8008df6:	f000 fcf9 	bl	80097ec <xQueueReceiveFromISR>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d003      	beq.n	8008e08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008e00:	f06f 0302 	mvn.w	r3, #2
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	e027      	b.n	8008e58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d024      	beq.n	8008e58 <osMessageQueueGet+0xac>
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <osMessageQueueGet+0xb8>)
 8008e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	e01b      	b.n	8008e58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <osMessageQueueGet+0x80>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008e2c:	f06f 0303 	mvn.w	r3, #3
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e011      	b.n	8008e58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	69b8      	ldr	r0, [r7, #24]
 8008e3a:	f000 fbf7 	bl	800962c <xQueueReceive>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d009      	beq.n	8008e58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008e4a:	f06f 0301 	mvn.w	r3, #1
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e002      	b.n	8008e58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008e52:	f06f 0302 	mvn.w	r3, #2
 8008e56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e58:	69fb      	ldr	r3, [r7, #28]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e74:	f3ef 8305 	mrs	r3, IPSR
 8008e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8008e80:	f06f 0305 	mvn.w	r3, #5
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e00c      	b.n	8008ea2 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8008e8e:	f06f 0303 	mvn.w	r3, #3
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e005      	b.n	8008ea2 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	6938      	ldr	r0, [r7, #16]
 8008e9e:	f000 f8ed 	bl	800907c <xQueueGenericReset>
  }

  return (stat);
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a07      	ldr	r2, [pc, #28]	; (8008ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4a06      	ldr	r2, [pc, #24]	; (8008edc <vApplicationGetIdleTaskMemory+0x30>)
 8008ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2240      	movs	r2, #64	; 0x40
 8008ec8:	601a      	str	r2, [r3, #0]
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	2000354c 	.word	0x2000354c
 8008edc:	20003608 	.word	0x20003608

08008ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4a07      	ldr	r2, [pc, #28]	; (8008f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8008ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4a06      	ldr	r2, [pc, #24]	; (8008f10 <vApplicationGetTimerTaskMemory+0x30>)
 8008ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2280      	movs	r2, #128	; 0x80
 8008efc:	601a      	str	r2, [r3, #0]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20003708 	.word	0x20003708
 8008f10:	200037c4 	.word	0x200037c4

08008f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f103 0208 	add.w	r2, r3, #8
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f103 0208 	add.w	r2, r3, #8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f103 0208 	add.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fcc:	d103      	bne.n	8008fd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e00c      	b.n	8008ff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e002      	b.n	8008fe4 <vListInsert+0x2e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d2f6      	bcs.n	8008fde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
}
 800901c:	bf00      	nop
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6892      	ldr	r2, [r2, #8]
 800903e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6852      	ldr	r2, [r2, #4]
 8009048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d103      	bne.n	800905c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	1e5a      	subs	r2, r3, #1
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090a6:	f002 f9c5 	bl	800b434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	441a      	add	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	3b01      	subs	r3, #1
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	441a      	add	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d114      	bne.n	8009126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01a      	beq.n	800913a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3310      	adds	r3, #16
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fa73 	bl	800a5f4 <xTaskRemoveFromEventList>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d012      	beq.n	800913a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <xQueueGenericReset+0xcc>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	e009      	b.n	800913a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3310      	adds	r3, #16
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fef2 	bl	8008f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3324      	adds	r3, #36	; 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff feed 	bl	8008f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800913a:	f002 f9ab 	bl	800b494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08e      	sub	sp, #56	; 0x38
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <xQueueGenericCreateStatic+0x52>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <xQueueGenericCreateStatic+0x56>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <xQueueGenericCreateStatic+0x58>
 80091a2:	2300      	movs	r3, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	623b      	str	r3, [r7, #32]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <xQueueGenericCreateStatic+0x7e>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <xQueueGenericCreateStatic+0x82>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <xQueueGenericCreateStatic+0x84>
 80091ce:	2300      	movs	r3, #0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61fb      	str	r3, [r7, #28]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091ea:	2350      	movs	r3, #80	; 0x50
 80091ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b50      	cmp	r3, #80	; 0x50
 80091f2:	d00a      	beq.n	800920a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	61bb      	str	r3, [r7, #24]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800920a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800921e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f83f 	bl	80092b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009234:	4618      	mov	r0, r3
 8009236:	3730      	adds	r7, #48	; 0x30
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af02      	add	r7, sp, #8
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3350      	adds	r3, #80	; 0x50
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f9ff 	bl	800b678 <pvPortMalloc>
 800927a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d011      	beq.n	80092a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3350      	adds	r3, #80	; 0x50
 800928a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009294:	79fa      	ldrb	r2, [r7, #7]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	4613      	mov	r3, r2
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f805 	bl	80092b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092a6:	69bb      	ldr	r3, [r7, #24]
	}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092de:	2101      	movs	r1, #1
 80092e0:	69b8      	ldr	r0, [r7, #24]
 80092e2:	f7ff fecb 	bl	800907c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	; 0x38
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009306:	2300      	movs	r3, #0
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericSend+0x32>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d103      	bne.n	8009338 <xQueueGenericSend+0x40>
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <xQueueGenericSend+0x44>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <xQueueGenericSend+0x46>
 800933c:	2300      	movs	r3, #0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <xQueueGenericSend+0x60>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d103      	bne.n	8009366 <xQueueGenericSend+0x6e>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <xQueueGenericSend+0x72>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <xQueueGenericSend+0x74>
 800936a:	2300      	movs	r3, #0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xQueueGenericSend+0x8e>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009386:	f001 faf7 	bl	800a978 <xTaskGetSchedulerState>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <xQueueGenericSend+0x9e>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <xQueueGenericSend+0xa2>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <xQueueGenericSend+0xa4>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	61fb      	str	r3, [r7, #28]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093b6:	f002 f83d 	bl	800b434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <xQueueGenericSend+0xd4>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d129      	bne.n	8009420 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d2:	f000 fa8b 	bl	80098ec <prvCopyDataToQueue>
 80093d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	3324      	adds	r3, #36	; 0x24
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f905 	bl	800a5f4 <xTaskRemoveFromEventList>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d013      	beq.n	8009418 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093f0:	4b3f      	ldr	r3, [pc, #252]	; (80094f0 <xQueueGenericSend+0x1f8>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	e00a      	b.n	8009418 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d007      	beq.n	8009418 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009408:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <xQueueGenericSend+0x1f8>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009418:	f002 f83c 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	e063      	b.n	80094e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009426:	f002 f835 	bl	800b494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800942a:	2300      	movs	r3, #0
 800942c:	e05c      	b.n	80094e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800942e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009434:	f107 0314 	add.w	r3, r7, #20
 8009438:	4618      	mov	r0, r3
 800943a:	f001 f93f 	bl	800a6bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009442:	f002 f827 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009446:	f000 feab 	bl	800a1a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800944a:	f001 fff3 	bl	800b434 <vPortEnterCritical>
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009454:	b25b      	sxtb	r3, r3
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d103      	bne.n	8009464 <xQueueGenericSend+0x16c>
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800946a:	b25b      	sxtb	r3, r3
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x182>
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800947a:	f002 f80b 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800947e:	1d3a      	adds	r2, r7, #4
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f001 f92e 	bl	800a6e8 <xTaskCheckForTimeOut>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d124      	bne.n	80094dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009494:	f000 fb22 	bl	8009adc <prvIsQueueFull>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d018      	beq.n	80094d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	3310      	adds	r3, #16
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 f854 	bl	800a554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ae:	f000 faad 	bl	8009a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094b2:	f000 fe83 	bl	800a1bc <xTaskResumeAll>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f47f af7c 	bne.w	80093b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80094be:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <xQueueGenericSend+0x1f8>)
 80094c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	e772      	b.n	80093b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094d2:	f000 fa9b 	bl	8009a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094d6:	f000 fe71 	bl	800a1bc <xTaskResumeAll>
 80094da:	e76c      	b.n	80093b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094de:	f000 fa95 	bl	8009a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094e2:	f000 fe6b 	bl	800a1bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3738      	adds	r7, #56	; 0x38
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b090      	sub	sp, #64	; 0x40
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d103      	bne.n	8009530 <xQueueGenericSendFromISR+0x3c>
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueGenericSendFromISR+0x40>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueGenericSendFromISR+0x42>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10a      	bne.n	8009550 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d103      	bne.n	800955e <xQueueGenericSendFromISR+0x6a>
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <xQueueGenericSendFromISR+0x6e>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <xQueueGenericSendFromISR+0x70>
 8009562:	2300      	movs	r3, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	623b      	str	r3, [r7, #32]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800957e:	f002 f83b 	bl	800b5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009582:	f3ef 8211 	mrs	r2, BASEPRI
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	61fa      	str	r2, [r7, #28]
 8009598:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800959a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d302      	bcc.n	80095b0 <xQueueGenericSendFromISR+0xbc>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d12f      	bne.n	8009610 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095c6:	f000 f991 	bl	80098ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d112      	bne.n	80095fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d016      	beq.n	800960a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	3324      	adds	r3, #36	; 0x24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f807 	bl	800a5f4 <xTaskRemoveFromEventList>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00e      	beq.n	800960a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	e007      	b.n	800960a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095fe:	3301      	adds	r3, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	b25a      	sxtb	r2, r3
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800960a:	2301      	movs	r3, #1
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800960e:	e001      	b.n	8009614 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009616:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800961e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009622:	4618      	mov	r0, r3
 8009624:	3740      	adds	r7, #64	; 0x40
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08c      	sub	sp, #48	; 0x30
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009638:	2300      	movs	r3, #0
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <xQueueReceive+0x30>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	623b      	str	r3, [r7, #32]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <xQueueReceive+0x3e>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <xQueueReceive+0x42>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <xQueueReceive+0x44>
 800966e:	2300      	movs	r3, #0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xQueueReceive+0x5e>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	61fb      	str	r3, [r7, #28]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800968a:	f001 f975 	bl	800a978 <xTaskGetSchedulerState>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <xQueueReceive+0x6e>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <xQueueReceive+0x72>
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <xQueueReceive+0x74>
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xQueueReceive+0x8e>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	61bb      	str	r3, [r7, #24]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ba:	f001 febb 	bl	800b434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01f      	beq.n	800970a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ce:	f000 f977 	bl	80099c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	1e5a      	subs	r2, r3, #1
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00f      	beq.n	8009702 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	3310      	adds	r3, #16
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 ff84 	bl	800a5f4 <xTaskRemoveFromEventList>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d007      	beq.n	8009702 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096f2:	4b3d      	ldr	r3, [pc, #244]	; (80097e8 <xQueueReceive+0x1bc>)
 80096f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009702:	f001 fec7 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 8009706:	2301      	movs	r3, #1
 8009708:	e069      	b.n	80097de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009710:	f001 fec0 	bl	800b494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009714:	2300      	movs	r3, #0
 8009716:	e062      	b.n	80097de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800971e:	f107 0310 	add.w	r3, r7, #16
 8009722:	4618      	mov	r0, r3
 8009724:	f000 ffca 	bl	800a6bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800972c:	f001 feb2 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009730:	f000 fd36 	bl	800a1a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009734:	f001 fe7e 	bl	800b434 <vPortEnterCritical>
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800973e:	b25b      	sxtb	r3, r3
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d103      	bne.n	800974e <xQueueReceive+0x122>
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009754:	b25b      	sxtb	r3, r3
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d103      	bne.n	8009764 <xQueueReceive+0x138>
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009764:	f001 fe96 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009768:	1d3a      	adds	r2, r7, #4
 800976a:	f107 0310 	add.w	r3, r7, #16
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f000 ffb9 	bl	800a6e8 <xTaskCheckForTimeOut>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d123      	bne.n	80097c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800977c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977e:	f000 f997 	bl	8009ab0 <prvIsQueueEmpty>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d017      	beq.n	80097b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	3324      	adds	r3, #36	; 0x24
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fedf 	bl	800a554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009798:	f000 f938 	bl	8009a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800979c:	f000 fd0e 	bl	800a1bc <xTaskResumeAll>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d189      	bne.n	80096ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <xQueueReceive+0x1bc>)
 80097a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	e780      	b.n	80096ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ba:	f000 f927 	bl	8009a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097be:	f000 fcfd 	bl	800a1bc <xTaskResumeAll>
 80097c2:	e77a      	b.n	80096ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c6:	f000 f921 	bl	8009a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097ca:	f000 fcf7 	bl	800a1bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d0:	f000 f96e 	bl	8009ab0 <prvIsQueueEmpty>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f43f af6f 	beq.w	80096ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3730      	adds	r7, #48	; 0x30
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08e      	sub	sp, #56	; 0x38
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	623b      	str	r3, [r7, #32]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <xQueueReceiveFromISR+0x3a>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueReceiveFromISR+0x3e>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueReceiveFromISR+0x40>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	61fb      	str	r3, [r7, #28]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009846:	f001 fed7 	bl	800b5f8 <vPortValidateInterruptPriority>
	__asm volatile
 800984a:	f3ef 8211 	mrs	r2, BASEPRI
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	61ba      	str	r2, [r7, #24]
 8009860:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009862:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	2b00      	cmp	r3, #0
 8009870:	d02f      	beq.n	80098d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009880:	f000 f89e 	bl	80099c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	1e5a      	subs	r2, r3, #1
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800988c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009894:	d112      	bne.n	80098bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d016      	beq.n	80098cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	3310      	adds	r3, #16
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fea6 	bl	800a5f4 <xTaskRemoveFromEventList>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e007      	b.n	80098cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80098bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c0:	3301      	adds	r3, #1
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	b25a      	sxtb	r2, r3
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80098cc:	2301      	movs	r3, #1
 80098ce:	637b      	str	r3, [r7, #52]	; 0x34
 80098d0:	e001      	b.n	80098d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
 80098d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f383 8811 	msr	BASEPRI, r3
}
 80098e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3738      	adds	r7, #56	; 0x38
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d14d      	bne.n	80099ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	4618      	mov	r0, r3
 8009918:	f001 f84c 	bl	800a9b4 <xTaskPriorityDisinherit>
 800991c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	609a      	str	r2, [r3, #8]
 8009924:	e043      	b.n	80099ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d119      	bne.n	8009960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6858      	ldr	r0, [r3, #4]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	461a      	mov	r2, r3
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	f002 f9af 	bl	800bc9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	441a      	add	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	d32b      	bcc.n	80099ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	605a      	str	r2, [r3, #4]
 800995e:	e026      	b.n	80099ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	68d8      	ldr	r0, [r3, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	461a      	mov	r2, r3
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	f002 f995 	bl	800bc9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009978:	425b      	negs	r3, r3
 800997a:	441a      	add	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d207      	bcs.n	800999c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	425b      	negs	r3, r3
 8009996:	441a      	add	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d105      	bne.n	80099ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099b6:	697b      	ldr	r3, [r7, #20]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d018      	beq.n	8009a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	441a      	add	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d303      	bcc.n	80099f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68d9      	ldr	r1, [r3, #12]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	461a      	mov	r2, r3
 80099fe:	6838      	ldr	r0, [r7, #0]
 8009a00:	f002 f94b 	bl	800bc9a <memcpy>
	}
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a14:	f001 fd0e 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a20:	e011      	b.n	8009a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d012      	beq.n	8009a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3324      	adds	r3, #36	; 0x24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 fde0 	bl	800a5f4 <xTaskRemoveFromEventList>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a3a:	f000 feb7 	bl	800a7ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dce9      	bgt.n	8009a22 <prvUnlockQueue+0x16>
 8009a4e:	e000      	b.n	8009a52 <prvUnlockQueue+0x46>
					break;
 8009a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	22ff      	movs	r2, #255	; 0xff
 8009a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a5a:	f001 fd1b 	bl	800b494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a5e:	f001 fce9 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a6a:	e011      	b.n	8009a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d012      	beq.n	8009a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3310      	adds	r3, #16
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fdbb 	bl	800a5f4 <xTaskRemoveFromEventList>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a84:	f000 fe92 	bl	800a7ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dce9      	bgt.n	8009a6c <prvUnlockQueue+0x60>
 8009a98:	e000      	b.n	8009a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	22ff      	movs	r2, #255	; 0xff
 8009aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009aa4:	f001 fcf6 	bl	800b494 <vPortExitCritical>
}
 8009aa8:	bf00      	nop
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ab8:	f001 fcbc 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	e001      	b.n	8009ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ace:	f001 fce1 	bl	800b494 <vPortExitCritical>

	return xReturn;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ae4:	f001 fca6 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d102      	bne.n	8009afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009af4:	2301      	movs	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	e001      	b.n	8009afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009afe:	f001 fcc9 	bl	800b494 <vPortExitCritical>

	return xReturn;
 8009b02:	68fb      	ldr	r3, [r7, #12]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e014      	b.n	8009b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b1c:	4a0f      	ldr	r2, [pc, #60]	; (8009b5c <vQueueAddToRegistry+0x50>)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10b      	bne.n	8009b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b28:	490c      	ldr	r1, [pc, #48]	; (8009b5c <vQueueAddToRegistry+0x50>)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b32:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <vQueueAddToRegistry+0x50>)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b3e:	e006      	b.n	8009b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	d9e7      	bls.n	8009b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	200039c4 	.word	0x200039c4

08009b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b70:	f001 fc60 	bl	800b434 <vPortEnterCritical>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b7a:	b25b      	sxtb	r3, r3
 8009b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b80:	d103      	bne.n	8009b8a <vQueueWaitForMessageRestricted+0x2a>
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b90:	b25b      	sxtb	r3, r3
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d103      	bne.n	8009ba0 <vQueueWaitForMessageRestricted+0x40>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ba0:	f001 fc78 	bl	800b494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	3324      	adds	r3, #36	; 0x24
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fcf1 	bl	800a59c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	f7ff ff26 	bl	8009a0c <prvUnlockQueue>
	}
 8009bc0:	bf00      	nop
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08e      	sub	sp, #56	; 0x38
 8009bcc:	af04      	add	r7, sp, #16
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	623b      	str	r3, [r7, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xTaskCreateStatic+0x46>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	61fb      	str	r3, [r7, #28]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c0e:	23bc      	movs	r3, #188	; 0xbc
 8009c10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2bbc      	cmp	r3, #188	; 0xbc
 8009c16:	d00a      	beq.n	8009c2e <xTaskCreateStatic+0x66>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	61bb      	str	r3, [r7, #24]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01e      	beq.n	8009c74 <xTaskCreateStatic+0xac>
 8009c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01b      	beq.n	8009c74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	9302      	str	r3, [sp, #8]
 8009c56:	f107 0314 	add.w	r3, r7, #20
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f850 	bl	8009d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c6e:	f000 f8f3 	bl	8009e58 <prvAddNewTaskToReadyList>
 8009c72:	e001      	b.n	8009c78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c78:	697b      	ldr	r3, [r7, #20]
	}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3728      	adds	r7, #40	; 0x28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b08c      	sub	sp, #48	; 0x30
 8009c86:	af04      	add	r7, sp, #16
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fcee 	bl	800b678 <pvPortMalloc>
 8009c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00e      	beq.n	8009cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ca4:	20bc      	movs	r0, #188	; 0xbc
 8009ca6:	f001 fce7 	bl	800b678 <pvPortMalloc>
 8009caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb8:	e005      	b.n	8009cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cba:	6978      	ldr	r0, [r7, #20]
 8009cbc:	f001 fda8 	bl	800b810 <vPortFree>
 8009cc0:	e001      	b.n	8009cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d017      	beq.n	8009cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cd4:	88fa      	ldrh	r2, [r7, #6]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	9302      	str	r3, [sp, #8]
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f80e 	bl	8009d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cf0:	69f8      	ldr	r0, [r7, #28]
 8009cf2:	f000 f8b1 	bl	8009e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	e002      	b.n	8009d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d02:	69bb      	ldr	r3, [r7, #24]
	}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	461a      	mov	r2, r3
 8009d24:	21a5      	movs	r1, #165	; 0xa5
 8009d26:	f001 ffc6 	bl	800bcb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d34:	3b01      	subs	r3, #1
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f023 0307 	bic.w	r3, r3, #7
 8009d42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	617b      	str	r3, [r7, #20]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d01f      	beq.n	8009daa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	e012      	b.n	8009d96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	7819      	ldrb	r1, [r3, #0]
 8009d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	3334      	adds	r3, #52	; 0x34
 8009d80:	460a      	mov	r2, r1
 8009d82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	4413      	add	r3, r2
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	3301      	adds	r3, #1
 8009d94:	61fb      	str	r3, [r7, #28]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b0f      	cmp	r3, #15
 8009d9a:	d9e9      	bls.n	8009d70 <prvInitialiseNewTask+0x64>
 8009d9c:	e000      	b.n	8009da0 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009da8:	e003      	b.n	8009db2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	2b37      	cmp	r3, #55	; 0x37
 8009db6:	d901      	bls.n	8009dbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009db8:	2337      	movs	r3, #55	; 0x37
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	2200      	movs	r2, #0
 8009dcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff f8be 	bl	8008f54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	3318      	adds	r3, #24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff f8b9 	bl	8008f54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009df6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	3354      	adds	r3, #84	; 0x54
 8009e0c:	2260      	movs	r2, #96	; 0x60
 8009e0e:	2100      	movs	r1, #0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 ff50 	bl	800bcb6 <memset>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <prvInitialiseNewTask+0x140>)
 8009e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	; (8009e50 <prvInitialiseNewTask+0x144>)
 8009e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <prvInitialiseNewTask+0x148>)
 8009e26:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	69b8      	ldr	r0, [r7, #24]
 8009e2e:	f001 f9d1 	bl	800b1d4 <pxPortInitialiseStack>
 8009e32:	4602      	mov	r2, r0
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e44:	bf00      	nop
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	0800d03c 	.word	0x0800d03c
 8009e50:	0800d05c 	.word	0x0800d05c
 8009e54:	0800d01c 	.word	0x0800d01c

08009e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e60:	f001 fae8 	bl	800b434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e64:	4b2d      	ldr	r3, [pc, #180]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	4a2c      	ldr	r2, [pc, #176]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e6e:	4b2c      	ldr	r3, [pc, #176]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d109      	bne.n	8009e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e7c:	4b27      	ldr	r3, [pc, #156]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d110      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e84:	f000 fcb6 	bl	800a7f4 <prvInitialiseTaskLists>
 8009e88:	e00d      	b.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e8a:	4b26      	ldr	r3, [pc, #152]	; (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e92:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d802      	bhi.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ea6:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a1e      	ldr	r2, [pc, #120]	; (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	; (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <prvAddNewTaskToReadyList+0xd4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d903      	bls.n	8009ecc <prvAddNewTaskToReadyList+0x74>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <prvAddNewTaskToReadyList+0xd4>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <prvAddNewTaskToReadyList+0xd8>)
 8009eda:	441a      	add	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7ff f843 	bl	8008f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee8:	f001 fad4 	bl	800b494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009eec:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00e      	beq.n	8009f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d207      	bcs.n	8009f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f02:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <prvAddNewTaskToReadyList+0xdc>)
 8009f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20003ed8 	.word	0x20003ed8
 8009f20:	20003a04 	.word	0x20003a04
 8009f24:	20003ee4 	.word	0x20003ee4
 8009f28:	20003ef4 	.word	0x20003ef4
 8009f2c:	20003ee0 	.word	0x20003ee0
 8009f30:	20003a08 	.word	0x20003a08
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d017      	beq.n	8009f7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f4a:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <vTaskDelay+0x60>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <vTaskDelay+0x30>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	60bb      	str	r3, [r7, #8]
}
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f68:	f000 f91a 	bl	800a1a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fd8e 	bl	800aa90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f74:	f000 f922 	bl	800a1bc <xTaskResumeAll>
 8009f78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f80:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <vTaskDelay+0x64>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20003f00 	.word	0x20003f00
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60fb      	str	r3, [r7, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	4a0a      	ldr	r2, [pc, #40]	; (8009ffc <prvTaskIsTaskSuspended+0x5c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d10a      	bne.n	8009fec <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fda:	4a09      	ldr	r2, [pc, #36]	; (800a000 <prvTaskIsTaskSuspended+0x60>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d005      	beq.n	8009fec <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fec:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009fee:	4618      	mov	r0, r3
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20003ec4 	.word	0x20003ec4
 800a000:	20003e98 	.word	0x20003e98

0800a004 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <vTaskResume+0x28>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	60bb      	str	r3, [r7, #8]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a02c:	4b20      	ldr	r3, [pc, #128]	; (800a0b0 <vTaskResume+0xac>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	429a      	cmp	r2, r3
 800a034:	d038      	beq.n	800a0a8 <vTaskResume+0xa4>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d035      	beq.n	800a0a8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a03c:	f001 f9fa 	bl	800b434 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff ffad 	bl	8009fa0 <prvTaskIsTaskSuspended>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d02b      	beq.n	800a0a4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3304      	adds	r3, #4
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe ffe9 	bl	8009028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05a:	4b16      	ldr	r3, [pc, #88]	; (800a0b4 <vTaskResume+0xb0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d903      	bls.n	800a06a <vTaskResume+0x66>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	4a13      	ldr	r2, [pc, #76]	; (800a0b4 <vTaskResume+0xb0>)
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4a10      	ldr	r2, [pc, #64]	; (800a0b8 <vTaskResume+0xb4>)
 800a078:	441a      	add	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe ff74 	bl	8008f6e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <vTaskResume+0xac>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	429a      	cmp	r2, r3
 800a092:	d307      	bcc.n	800a0a4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a094:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <vTaskResume+0xb8>)
 800a096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a0a4:	f001 f9f6 	bl	800b494 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20003a04 	.word	0x20003a04
 800a0b4:	20003ee0 	.word	0x20003ee0
 800a0b8:	20003a08 	.word	0x20003a08
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08a      	sub	sp, #40	; 0x28
 800a0c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0ce:	463a      	mov	r2, r7
 800a0d0:	1d39      	adds	r1, r7, #4
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fee8 	bl	8008eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	9202      	str	r2, [sp, #8]
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	460a      	mov	r2, r1
 800a0ee:	4924      	ldr	r1, [pc, #144]	; (800a180 <vTaskStartScheduler+0xc0>)
 800a0f0:	4824      	ldr	r0, [pc, #144]	; (800a184 <vTaskStartScheduler+0xc4>)
 800a0f2:	f7ff fd69 	bl	8009bc8 <xTaskCreateStatic>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4a23      	ldr	r2, [pc, #140]	; (800a188 <vTaskStartScheduler+0xc8>)
 800a0fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0fc:	4b22      	ldr	r3, [pc, #136]	; (800a188 <vTaskStartScheduler+0xc8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a104:	2301      	movs	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	e001      	b.n	800a10e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a114:	f000 fd10 	bl	800ab38 <xTimerCreateTimerTask>
 800a118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d11b      	bne.n	800a158 <vTaskStartScheduler+0x98>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a134:	4b15      	ldr	r3, [pc, #84]	; (800a18c <vTaskStartScheduler+0xcc>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3354      	adds	r3, #84	; 0x54
 800a13a:	4a15      	ldr	r2, [pc, #84]	; (800a190 <vTaskStartScheduler+0xd0>)
 800a13c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a13e:	4b15      	ldr	r3, [pc, #84]	; (800a194 <vTaskStartScheduler+0xd4>)
 800a140:	f04f 32ff 	mov.w	r2, #4294967295
 800a144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <vTaskStartScheduler+0xd8>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <vTaskStartScheduler+0xdc>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a152:	f001 f8cd 	bl	800b2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a156:	e00e      	b.n	800a176 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15e:	d10a      	bne.n	800a176 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	60fb      	str	r3, [r7, #12]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <vTaskStartScheduler+0xb4>
}
 800a176:	bf00      	nop
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	0800cea8 	.word	0x0800cea8
 800a184:	0800a7c5 	.word	0x0800a7c5
 800a188:	20003efc 	.word	0x20003efc
 800a18c:	20003a04 	.word	0x20003a04
 800a190:	2000016c 	.word	0x2000016c
 800a194:	20003ef8 	.word	0x20003ef8
 800a198:	20003ee4 	.word	0x20003ee4
 800a19c:	20003edc 	.word	0x20003edc

0800a1a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <vTaskSuspendAll+0x18>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	4a03      	ldr	r2, [pc, #12]	; (800a1b8 <vTaskSuspendAll+0x18>)
 800a1ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1ae:	bf00      	nop
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	20003f00 	.word	0x20003f00

0800a1bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1ca:	4b42      	ldr	r3, [pc, #264]	; (800a2d4 <xTaskResumeAll+0x118>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	603b      	str	r3, [r7, #0]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1e8:	f001 f924 	bl	800b434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1ec:	4b39      	ldr	r3, [pc, #228]	; (800a2d4 <xTaskResumeAll+0x118>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	4a38      	ldr	r2, [pc, #224]	; (800a2d4 <xTaskResumeAll+0x118>)
 800a1f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f6:	4b37      	ldr	r3, [pc, #220]	; (800a2d4 <xTaskResumeAll+0x118>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d162      	bne.n	800a2c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1fe:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <xTaskResumeAll+0x11c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d05e      	beq.n	800a2c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a206:	e02f      	b.n	800a268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a208:	4b34      	ldr	r3, [pc, #208]	; (800a2dc <xTaskResumeAll+0x120>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3318      	adds	r3, #24
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe ff07 	bl	8009028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe ff02 	bl	8009028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a228:	4b2d      	ldr	r3, [pc, #180]	; (800a2e0 <xTaskResumeAll+0x124>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d903      	bls.n	800a238 <xTaskResumeAll+0x7c>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	4a2a      	ldr	r2, [pc, #168]	; (800a2e0 <xTaskResumeAll+0x124>)
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4a27      	ldr	r2, [pc, #156]	; (800a2e4 <xTaskResumeAll+0x128>)
 800a246:	441a      	add	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3304      	adds	r3, #4
 800a24c:	4619      	mov	r1, r3
 800a24e:	4610      	mov	r0, r2
 800a250:	f7fe fe8d 	bl	8008f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a258:	4b23      	ldr	r3, [pc, #140]	; (800a2e8 <xTaskResumeAll+0x12c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a262:	4b22      	ldr	r3, [pc, #136]	; (800a2ec <xTaskResumeAll+0x130>)
 800a264:	2201      	movs	r2, #1
 800a266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a268:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <xTaskResumeAll+0x120>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1cb      	bne.n	800a208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a276:	f000 fb5f 	bl	800a938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a27a:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <xTaskResumeAll+0x134>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d010      	beq.n	800a2a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a286:	f000 f847 	bl	800a318 <xTaskIncrementTick>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a290:	4b16      	ldr	r3, [pc, #88]	; (800a2ec <xTaskResumeAll+0x130>)
 800a292:	2201      	movs	r2, #1
 800a294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3b01      	subs	r3, #1
 800a29a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f1      	bne.n	800a286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a2a2:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <xTaskResumeAll+0x134>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2a8:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <xTaskResumeAll+0x130>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <xTaskResumeAll+0x138>)
 800a2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2c4:	f001 f8e6 	bl	800b494 <vPortExitCritical>

	return xAlreadyYielded;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20003f00 	.word	0x20003f00
 800a2d8:	20003ed8 	.word	0x20003ed8
 800a2dc:	20003e98 	.word	0x20003e98
 800a2e0:	20003ee0 	.word	0x20003ee0
 800a2e4:	20003a08 	.word	0x20003a08
 800a2e8:	20003a04 	.word	0x20003a04
 800a2ec:	20003eec 	.word	0x20003eec
 800a2f0:	20003ee8 	.word	0x20003ee8
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <xTaskGetTickCount+0x1c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a304:	687b      	ldr	r3, [r7, #4]
}
 800a306:	4618      	mov	r0, r3
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20003edc 	.word	0x20003edc

0800a318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a31e:	2300      	movs	r3, #0
 800a320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a322:	4b4f      	ldr	r3, [pc, #316]	; (800a460 <xTaskIncrementTick+0x148>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	f040 808f 	bne.w	800a44a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a32c:	4b4d      	ldr	r3, [pc, #308]	; (800a464 <xTaskIncrementTick+0x14c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a334:	4a4b      	ldr	r2, [pc, #300]	; (800a464 <xTaskIncrementTick+0x14c>)
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d120      	bne.n	800a382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a340:	4b49      	ldr	r3, [pc, #292]	; (800a468 <xTaskIncrementTick+0x150>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <xTaskIncrementTick+0x48>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	603b      	str	r3, [r7, #0]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <xTaskIncrementTick+0x46>
 800a360:	4b41      	ldr	r3, [pc, #260]	; (800a468 <xTaskIncrementTick+0x150>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	4b41      	ldr	r3, [pc, #260]	; (800a46c <xTaskIncrementTick+0x154>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a3f      	ldr	r2, [pc, #252]	; (800a468 <xTaskIncrementTick+0x150>)
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	4a3f      	ldr	r2, [pc, #252]	; (800a46c <xTaskIncrementTick+0x154>)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <xTaskIncrementTick+0x158>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3301      	adds	r3, #1
 800a37a:	4a3d      	ldr	r2, [pc, #244]	; (800a470 <xTaskIncrementTick+0x158>)
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	f000 fadb 	bl	800a938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a382:	4b3c      	ldr	r3, [pc, #240]	; (800a474 <xTaskIncrementTick+0x15c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d349      	bcc.n	800a420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a38c:	4b36      	ldr	r3, [pc, #216]	; (800a468 <xTaskIncrementTick+0x150>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d104      	bne.n	800a3a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a396:	4b37      	ldr	r3, [pc, #220]	; (800a474 <xTaskIncrementTick+0x15c>)
 800a398:	f04f 32ff 	mov.w	r2, #4294967295
 800a39c:	601a      	str	r2, [r3, #0]
					break;
 800a39e:	e03f      	b.n	800a420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a0:	4b31      	ldr	r3, [pc, #196]	; (800a468 <xTaskIncrementTick+0x150>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d203      	bcs.n	800a3c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3b8:	4a2e      	ldr	r2, [pc, #184]	; (800a474 <xTaskIncrementTick+0x15c>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3be:	e02f      	b.n	800a420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fe2f 	bl	8009028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d004      	beq.n	800a3dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	3318      	adds	r3, #24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fe26 	bl	8009028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	4b25      	ldr	r3, [pc, #148]	; (800a478 <xTaskIncrementTick+0x160>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d903      	bls.n	800a3f0 <xTaskIncrementTick+0xd8>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	4a22      	ldr	r2, [pc, #136]	; (800a478 <xTaskIncrementTick+0x160>)
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4a1f      	ldr	r2, [pc, #124]	; (800a47c <xTaskIncrementTick+0x164>)
 800a3fe:	441a      	add	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7fe fdb1 	bl	8008f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <xTaskIncrementTick+0x168>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	429a      	cmp	r2, r3
 800a418:	d3b8      	bcc.n	800a38c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a41a:	2301      	movs	r3, #1
 800a41c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a41e:	e7b5      	b.n	800a38c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a420:	4b17      	ldr	r3, [pc, #92]	; (800a480 <xTaskIncrementTick+0x168>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a426:	4915      	ldr	r1, [pc, #84]	; (800a47c <xTaskIncrementTick+0x164>)
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	440b      	add	r3, r1
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d901      	bls.n	800a43c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a438:	2301      	movs	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a43c:	4b11      	ldr	r3, [pc, #68]	; (800a484 <xTaskIncrementTick+0x16c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d007      	beq.n	800a454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a444:	2301      	movs	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
 800a448:	e004      	b.n	800a454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <xTaskIncrementTick+0x170>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a0d      	ldr	r2, [pc, #52]	; (800a488 <xTaskIncrementTick+0x170>)
 800a452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a454:	697b      	ldr	r3, [r7, #20]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20003f00 	.word	0x20003f00
 800a464:	20003edc 	.word	0x20003edc
 800a468:	20003e90 	.word	0x20003e90
 800a46c:	20003e94 	.word	0x20003e94
 800a470:	20003ef0 	.word	0x20003ef0
 800a474:	20003ef8 	.word	0x20003ef8
 800a478:	20003ee0 	.word	0x20003ee0
 800a47c:	20003a08 	.word	0x20003a08
 800a480:	20003a04 	.word	0x20003a04
 800a484:	20003eec 	.word	0x20003eec
 800a488:	20003ee8 	.word	0x20003ee8

0800a48c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a492:	4b2a      	ldr	r3, [pc, #168]	; (800a53c <vTaskSwitchContext+0xb0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a49a:	4b29      	ldr	r3, [pc, #164]	; (800a540 <vTaskSwitchContext+0xb4>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4a0:	e046      	b.n	800a530 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a4a2:	4b27      	ldr	r3, [pc, #156]	; (800a540 <vTaskSwitchContext+0xb4>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a8:	4b26      	ldr	r3, [pc, #152]	; (800a544 <vTaskSwitchContext+0xb8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	e010      	b.n	800a4d2 <vTaskSwitchContext+0x46>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <vTaskSwitchContext+0x40>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	607b      	str	r3, [r7, #4]
}
 800a4c8:	bf00      	nop
 800a4ca:	e7fe      	b.n	800a4ca <vTaskSwitchContext+0x3e>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	491d      	ldr	r1, [pc, #116]	; (800a548 <vTaskSwitchContext+0xbc>)
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0e4      	beq.n	800a4b0 <vTaskSwitchContext+0x24>
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4a15      	ldr	r2, [pc, #84]	; (800a548 <vTaskSwitchContext+0xbc>)
 800a4f2:	4413      	add	r3, r2
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	605a      	str	r2, [r3, #4]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3308      	adds	r3, #8
 800a508:	429a      	cmp	r2, r3
 800a50a:	d104      	bne.n	800a516 <vTaskSwitchContext+0x8a>
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	4a0b      	ldr	r2, [pc, #44]	; (800a54c <vTaskSwitchContext+0xc0>)
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4a08      	ldr	r2, [pc, #32]	; (800a544 <vTaskSwitchContext+0xb8>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <vTaskSwitchContext+0xc0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3354      	adds	r3, #84	; 0x54
 800a52c:	4a08      	ldr	r2, [pc, #32]	; (800a550 <vTaskSwitchContext+0xc4>)
 800a52e:	6013      	str	r3, [r2, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20003f00 	.word	0x20003f00
 800a540:	20003eec 	.word	0x20003eec
 800a544:	20003ee0 	.word	0x20003ee0
 800a548:	20003a08 	.word	0x20003a08
 800a54c:	20003a04 	.word	0x20003a04
 800a550:	2000016c 	.word	0x2000016c

0800a554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	60fb      	str	r3, [r7, #12]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <vTaskPlaceOnEventList+0x44>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3318      	adds	r3, #24
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fe fd17 	bl	8008fb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a588:	2101      	movs	r1, #1
 800a58a:	6838      	ldr	r0, [r7, #0]
 800a58c:	f000 fa80 	bl	800aa90 <prvAddCurrentTaskToDelayedList>
}
 800a590:	bf00      	nop
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20003a04 	.word	0x20003a04

0800a59c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	617b      	str	r3, [r7, #20]
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3318      	adds	r3, #24
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7fe fcce 	bl	8008f6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	68b8      	ldr	r0, [r7, #8]
 800a5e2:	f000 fa55 	bl	800aa90 <prvAddCurrentTaskToDelayedList>
	}
 800a5e6:	bf00      	nop
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20003a04 	.word	0x20003a04

0800a5f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	60fb      	str	r3, [r7, #12]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	3318      	adds	r3, #24
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe fcff 	bl	8009028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a62a:	4b1e      	ldr	r3, [pc, #120]	; (800a6a4 <xTaskRemoveFromEventList+0xb0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d11d      	bne.n	800a66e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3304      	adds	r3, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fcf6 	bl	8009028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <xTaskRemoveFromEventList+0xb4>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d903      	bls.n	800a650 <xTaskRemoveFromEventList+0x5c>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <xTaskRemoveFromEventList+0xb4>)
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4a13      	ldr	r2, [pc, #76]	; (800a6ac <xTaskRemoveFromEventList+0xb8>)
 800a65e:	441a      	add	r2, r3
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	3304      	adds	r3, #4
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f7fe fc81 	bl	8008f6e <vListInsertEnd>
 800a66c:	e005      	b.n	800a67a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3318      	adds	r3, #24
 800a672:	4619      	mov	r1, r3
 800a674:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <xTaskRemoveFromEventList+0xbc>)
 800a676:	f7fe fc7a 	bl	8008f6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67e:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <xTaskRemoveFromEventList+0xc0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	429a      	cmp	r2, r3
 800a686:	d905      	bls.n	800a694 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a68c:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <xTaskRemoveFromEventList+0xc4>)
 800a68e:	2201      	movs	r2, #1
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	e001      	b.n	800a698 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a698:	697b      	ldr	r3, [r7, #20]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20003f00 	.word	0x20003f00
 800a6a8:	20003ee0 	.word	0x20003ee0
 800a6ac:	20003a08 	.word	0x20003a08
 800a6b0:	20003e98 	.word	0x20003e98
 800a6b4:	20003a04 	.word	0x20003a04
 800a6b8:	20003eec 	.word	0x20003eec

0800a6bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6c4:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <vTaskInternalSetTimeOutState+0x24>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <vTaskInternalSetTimeOutState+0x28>)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	605a      	str	r2, [r3, #4]
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	20003ef0 	.word	0x20003ef0
 800a6e4:	20003edc 	.word	0x20003edc

0800a6e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	613b      	str	r3, [r7, #16]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	60fb      	str	r3, [r7, #12]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a72a:	f000 fe83 	bl	800b434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <xTaskCheckForTimeOut+0xbc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a746:	d102      	bne.n	800a74e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a748:	2300      	movs	r3, #0
 800a74a:	61fb      	str	r3, [r7, #28]
 800a74c:	e023      	b.n	800a796 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <xTaskCheckForTimeOut+0xc0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	429a      	cmp	r2, r3
 800a758:	d007      	beq.n	800a76a <xTaskCheckForTimeOut+0x82>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	429a      	cmp	r2, r3
 800a762:	d302      	bcc.n	800a76a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	61fb      	str	r3, [r7, #28]
 800a768:	e015      	b.n	800a796 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	429a      	cmp	r2, r3
 800a772:	d20b      	bcs.n	800a78c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	1ad2      	subs	r2, r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff ff9b 	bl	800a6bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	e004      	b.n	800a796 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a792:	2301      	movs	r3, #1
 800a794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a796:	f000 fe7d 	bl	800b494 <vPortExitCritical>

	return xReturn;
 800a79a:	69fb      	ldr	r3, [r7, #28]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20003edc 	.word	0x20003edc
 800a7a8:	20003ef0 	.word	0x20003ef0

0800a7ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7b0:	4b03      	ldr	r3, [pc, #12]	; (800a7c0 <vTaskMissedYield+0x14>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	20003eec 	.word	0x20003eec

0800a7c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7cc:	f000 f852 	bl	800a874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <prvIdleTask+0x28>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d9f9      	bls.n	800a7cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7d8:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <prvIdleTask+0x2c>)
 800a7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7e8:	e7f0      	b.n	800a7cc <prvIdleTask+0x8>
 800a7ea:	bf00      	nop
 800a7ec:	20003a08 	.word	0x20003a08
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	607b      	str	r3, [r7, #4]
 800a7fe:	e00c      	b.n	800a81a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	4613      	mov	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4413      	add	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4a12      	ldr	r2, [pc, #72]	; (800a854 <prvInitialiseTaskLists+0x60>)
 800a80c:	4413      	add	r3, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fb80 	bl	8008f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3301      	adds	r3, #1
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b37      	cmp	r3, #55	; 0x37
 800a81e:	d9ef      	bls.n	800a800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a820:	480d      	ldr	r0, [pc, #52]	; (800a858 <prvInitialiseTaskLists+0x64>)
 800a822:	f7fe fb77 	bl	8008f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a826:	480d      	ldr	r0, [pc, #52]	; (800a85c <prvInitialiseTaskLists+0x68>)
 800a828:	f7fe fb74 	bl	8008f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a82c:	480c      	ldr	r0, [pc, #48]	; (800a860 <prvInitialiseTaskLists+0x6c>)
 800a82e:	f7fe fb71 	bl	8008f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a832:	480c      	ldr	r0, [pc, #48]	; (800a864 <prvInitialiseTaskLists+0x70>)
 800a834:	f7fe fb6e 	bl	8008f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a838:	480b      	ldr	r0, [pc, #44]	; (800a868 <prvInitialiseTaskLists+0x74>)
 800a83a:	f7fe fb6b 	bl	8008f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a83e:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <prvInitialiseTaskLists+0x78>)
 800a840:	4a05      	ldr	r2, [pc, #20]	; (800a858 <prvInitialiseTaskLists+0x64>)
 800a842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <prvInitialiseTaskLists+0x7c>)
 800a846:	4a05      	ldr	r2, [pc, #20]	; (800a85c <prvInitialiseTaskLists+0x68>)
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20003a08 	.word	0x20003a08
 800a858:	20003e68 	.word	0x20003e68
 800a85c:	20003e7c 	.word	0x20003e7c
 800a860:	20003e98 	.word	0x20003e98
 800a864:	20003eac 	.word	0x20003eac
 800a868:	20003ec4 	.word	0x20003ec4
 800a86c:	20003e90 	.word	0x20003e90
 800a870:	20003e94 	.word	0x20003e94

0800a874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a87a:	e019      	b.n	800a8b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a87c:	f000 fdda 	bl	800b434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a880:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <prvCheckTasksWaitingTermination+0x50>)
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fe fbcb 	bl	8009028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a892:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <prvCheckTasksWaitingTermination+0x54>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3b01      	subs	r3, #1
 800a898:	4a0b      	ldr	r2, [pc, #44]	; (800a8c8 <prvCheckTasksWaitingTermination+0x54>)
 800a89a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a89c:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <prvCheckTasksWaitingTermination+0x58>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <prvCheckTasksWaitingTermination+0x58>)
 800a8a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8a6:	f000 fdf5 	bl	800b494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f810 	bl	800a8d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8b0:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <prvCheckTasksWaitingTermination+0x58>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1e1      	bne.n	800a87c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20003eac 	.word	0x20003eac
 800a8c8:	20003ed8 	.word	0x20003ed8
 800a8cc:	20003ec0 	.word	0x20003ec0

0800a8d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3354      	adds	r3, #84	; 0x54
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f001 fb6f 	bl	800bfc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d108      	bne.n	800a8fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 ff8d 	bl	800b810 <vPortFree>
				vPortFree( pxTCB );
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 ff8a 	bl	800b810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8fc:	e018      	b.n	800a930 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a904:	2b01      	cmp	r3, #1
 800a906:	d103      	bne.n	800a910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 ff81 	bl	800b810 <vPortFree>
	}
 800a90e:	e00f      	b.n	800a930 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a916:	2b02      	cmp	r3, #2
 800a918:	d00a      	beq.n	800a930 <prvDeleteTCB+0x60>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	60fb      	str	r3, [r7, #12]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <prvDeleteTCB+0x5e>
	}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <prvResetNextTaskUnblockTime+0x38>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d104      	bne.n	800a952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a948:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <prvResetNextTaskUnblockTime+0x3c>)
 800a94a:	f04f 32ff 	mov.w	r2, #4294967295
 800a94e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a950:	e008      	b.n	800a964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <prvResetNextTaskUnblockTime+0x38>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4a04      	ldr	r2, [pc, #16]	; (800a974 <prvResetNextTaskUnblockTime+0x3c>)
 800a962:	6013      	str	r3, [r2, #0]
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	20003e90 	.word	0x20003e90
 800a974:	20003ef8 	.word	0x20003ef8

0800a978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <xTaskGetSchedulerState+0x34>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a986:	2301      	movs	r3, #1
 800a988:	607b      	str	r3, [r7, #4]
 800a98a:	e008      	b.n	800a99e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a98c:	4b08      	ldr	r3, [pc, #32]	; (800a9b0 <xTaskGetSchedulerState+0x38>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a994:	2302      	movs	r3, #2
 800a996:	607b      	str	r3, [r7, #4]
 800a998:	e001      	b.n	800a99e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a99a:	2300      	movs	r3, #0
 800a99c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a99e:	687b      	ldr	r3, [r7, #4]
	}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20003ee4 	.word	0x20003ee4
 800a9b0:	20003f00 	.word	0x20003f00

0800a9b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d056      	beq.n	800aa78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9ca:	4b2e      	ldr	r3, [pc, #184]	; (800aa84 <xTaskPriorityDisinherit+0xd0>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d00a      	beq.n	800a9ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	60fb      	str	r3, [r7, #12]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10a      	bne.n	800aa08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	60bb      	str	r3, [r7, #8]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0c:	1e5a      	subs	r2, r3, #1
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d02c      	beq.n	800aa78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d128      	bne.n	800aa78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fafc 	bl	8009028 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa48:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <xTaskPriorityDisinherit+0xd4>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d903      	bls.n	800aa58 <xTaskPriorityDisinherit+0xa4>
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa54:	4a0c      	ldr	r2, [pc, #48]	; (800aa88 <xTaskPriorityDisinherit+0xd4>)
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4a09      	ldr	r2, [pc, #36]	; (800aa8c <xTaskPriorityDisinherit+0xd8>)
 800aa66:	441a      	add	r2, r3
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4610      	mov	r0, r2
 800aa70:	f7fe fa7d 	bl	8008f6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa74:	2301      	movs	r3, #1
 800aa76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa78:	697b      	ldr	r3, [r7, #20]
	}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20003a04 	.word	0x20003a04
 800aa88:	20003ee0 	.word	0x20003ee0
 800aa8c:	20003a08 	.word	0x20003a08

0800aa90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa9a:	4b21      	ldr	r3, [pc, #132]	; (800ab20 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa0:	4b20      	ldr	r3, [pc, #128]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fabe 	bl	8009028 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d10a      	bne.n	800aaca <prvAddCurrentTaskToDelayedList+0x3a>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d007      	beq.n	800aaca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaba:	4b1a      	ldr	r3, [pc, #104]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4819      	ldr	r0, [pc, #100]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x98>)
 800aac4:	f7fe fa53 	bl	8008f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aac8:	e026      	b.n	800ab18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4413      	add	r3, r2
 800aad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aad2:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d209      	bcs.n	800aaf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	4b0f      	ldr	r3, [pc, #60]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f7fe fa61 	bl	8008fb6 <vListInsert>
}
 800aaf4:	e010      	b.n	800ab18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaf6:	4b0e      	ldr	r3, [pc, #56]	; (800ab30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4619      	mov	r1, r3
 800ab02:	4610      	mov	r0, r2
 800ab04:	f7fe fa57 	bl	8008fb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d202      	bcs.n	800ab18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab12:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6013      	str	r3, [r2, #0]
}
 800ab18:	bf00      	nop
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20003edc 	.word	0x20003edc
 800ab24:	20003a04 	.word	0x20003a04
 800ab28:	20003ec4 	.word	0x20003ec4
 800ab2c:	20003e94 	.word	0x20003e94
 800ab30:	20003e90 	.word	0x20003e90
 800ab34:	20003ef8 	.word	0x20003ef8

0800ab38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	; 0x28
 800ab3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab42:	f000 fb07 	bl	800b154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab46:	4b1c      	ldr	r3, [pc, #112]	; (800abb8 <xTimerCreateTimerTask+0x80>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d021      	beq.n	800ab92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab56:	1d3a      	adds	r2, r7, #4
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	f107 030c 	add.w	r3, r7, #12
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe f9bd 	bl	8008ee0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	9202      	str	r2, [sp, #8]
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	2302      	movs	r3, #2
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	2300      	movs	r3, #0
 800ab76:	460a      	mov	r2, r1
 800ab78:	4910      	ldr	r1, [pc, #64]	; (800abbc <xTimerCreateTimerTask+0x84>)
 800ab7a:	4811      	ldr	r0, [pc, #68]	; (800abc0 <xTimerCreateTimerTask+0x88>)
 800ab7c:	f7ff f824 	bl	8009bc8 <xTaskCreateStatic>
 800ab80:	4603      	mov	r3, r0
 800ab82:	4a10      	ldr	r2, [pc, #64]	; (800abc4 <xTimerCreateTimerTask+0x8c>)
 800ab84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <xTimerCreateTimerTask+0x8c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	613b      	str	r3, [r7, #16]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abae:	697b      	ldr	r3, [r7, #20]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20003f34 	.word	0x20003f34
 800abbc:	0800cec0 	.word	0x0800cec0
 800abc0:	0800acfd 	.word	0x0800acfd
 800abc4:	20003f38 	.word	0x20003f38

0800abc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	623b      	str	r3, [r7, #32]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abf6:	4b1a      	ldr	r3, [pc, #104]	; (800ac60 <xTimerGenericCommand+0x98>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d02a      	beq.n	800ac54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b05      	cmp	r3, #5
 800ac0e:	dc18      	bgt.n	800ac42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac10:	f7ff feb2 	bl	800a978 <xTaskGetSchedulerState>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d109      	bne.n	800ac2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac1a:	4b11      	ldr	r3, [pc, #68]	; (800ac60 <xTimerGenericCommand+0x98>)
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f107 0110 	add.w	r1, r7, #16
 800ac22:	2300      	movs	r3, #0
 800ac24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac26:	f7fe fb67 	bl	80092f8 <xQueueGenericSend>
 800ac2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ac2c:	e012      	b.n	800ac54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <xTimerGenericCommand+0x98>)
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f107 0110 	add.w	r1, r7, #16
 800ac36:	2300      	movs	r3, #0
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f7fe fb5d 	bl	80092f8 <xQueueGenericSend>
 800ac3e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac40:	e008      	b.n	800ac54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac42:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <xTimerGenericCommand+0x98>)
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	f107 0110 	add.w	r1, r7, #16
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	f7fe fc51 	bl	80094f4 <xQueueGenericSendFromISR>
 800ac52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3728      	adds	r7, #40	; 0x28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20003f34 	.word	0x20003f34

0800ac64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6e:	4b22      	ldr	r3, [pc, #136]	; (800acf8 <prvProcessExpiredTimer+0x94>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe f9d3 	bl	8009028 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d022      	beq.n	800acd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	699a      	ldr	r2, [r3, #24]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	18d1      	adds	r1, r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	6978      	ldr	r0, [r7, #20]
 800ac9e:	f000 f8d1 	bl	800ae44 <prvInsertTimerInActiveList>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01f      	beq.n	800ace8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aca8:	2300      	movs	r3, #0
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	2300      	movs	r3, #0
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	2100      	movs	r1, #0
 800acb2:	6978      	ldr	r0, [r7, #20]
 800acb4:	f7ff ff88 	bl	800abc8 <xTimerGenericCommand>
 800acb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d113      	bne.n	800ace8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	60fb      	str	r3, [r7, #12]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	6978      	ldr	r0, [r7, #20]
 800acee:	4798      	blx	r3
}
 800acf0:	bf00      	nop
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20003f2c 	.word	0x20003f2c

0800acfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f857 	bl	800adbc <prvGetNextExpireTime>
 800ad0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4619      	mov	r1, r3
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f803 	bl	800ad20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad1a:	f000 f8d5 	bl	800aec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad1e:	e7f1      	b.n	800ad04 <prvTimerTask+0x8>

0800ad20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad2a:	f7ff fa39 	bl	800a1a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f866 	bl	800ae04 <prvSampleTimeNow>
 800ad38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d130      	bne.n	800ada2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10a      	bne.n	800ad5c <prvProcessTimerOrBlockTask+0x3c>
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d806      	bhi.n	800ad5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad4e:	f7ff fa35 	bl	800a1bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ff85 	bl	800ac64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad5a:	e024      	b.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d008      	beq.n	800ad74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad62:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <prvProcessTimerOrBlockTask+0x90>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <prvProcessTimerOrBlockTask+0x50>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <prvProcessTimerOrBlockTask+0x52>
 800ad70:	2300      	movs	r3, #0
 800ad72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad74:	4b0f      	ldr	r3, [pc, #60]	; (800adb4 <prvProcessTimerOrBlockTask+0x94>)
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	f7fe feed 	bl	8009b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad86:	f7ff fa19 	bl	800a1bc <xTaskResumeAll>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <prvProcessTimerOrBlockTask+0x98>)
 800ad92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
}
 800ada0:	e001      	b.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ada2:	f7ff fa0b 	bl	800a1bc <xTaskResumeAll>
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20003f30 	.word	0x20003f30
 800adb4:	20003f34 	.word	0x20003f34
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adc4:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <prvGetNextExpireTime+0x44>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <prvGetNextExpireTime+0x16>
 800adce:	2201      	movs	r2, #1
 800add0:	e000      	b.n	800add4 <prvGetNextExpireTime+0x18>
 800add2:	2200      	movs	r2, #0
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d105      	bne.n	800adec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <prvGetNextExpireTime+0x44>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	e001      	b.n	800adf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adf0:	68fb      	ldr	r3, [r7, #12]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20003f2c 	.word	0x20003f2c

0800ae04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae0c:	f7ff fa74 	bl	800a2f8 <xTaskGetTickCount>
 800ae10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae12:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <prvSampleTimeNow+0x3c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d205      	bcs.n	800ae28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae1c:	f000 f936 	bl	800b08c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	e002      	b.n	800ae2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae2e:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <prvSampleTimeNow+0x3c>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae34:	68fb      	ldr	r3, [r7, #12]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20003f3c 	.word	0x20003f3c

0800ae44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d812      	bhi.n	800ae90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d302      	bcc.n	800ae7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e01b      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae7e:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <prvInsertTimerInActiveList+0x7c>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f7fe f894 	bl	8008fb6 <vListInsert>
 800ae8e:	e012      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d206      	bcs.n	800aea6 <prvInsertTimerInActiveList+0x62>
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d302      	bcc.n	800aea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aea0:	2301      	movs	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e007      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aea6:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <prvInsertTimerInActiveList+0x80>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7fe f880 	bl	8008fb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aeb6:	697b      	ldr	r3, [r7, #20]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20003f30 	.word	0x20003f30
 800aec4:	20003f2c 	.word	0x20003f2c

0800aec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08e      	sub	sp, #56	; 0x38
 800aecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aece:	e0ca      	b.n	800b066 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da18      	bge.n	800af08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aed6:	1d3b      	adds	r3, r7, #4
 800aed8:	3304      	adds	r3, #4
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10a      	bne.n	800aef8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	61fb      	str	r3, [r7, #28]
}
 800aef4:	bf00      	nop
 800aef6:	e7fe      	b.n	800aef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefe:	6850      	ldr	r0, [r2, #4]
 800af00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af02:	6892      	ldr	r2, [r2, #8]
 800af04:	4611      	mov	r1, r2
 800af06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f2c0 80aa 	blt.w	800b064 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	3304      	adds	r3, #4
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe f881 	bl	8009028 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af26:	463b      	mov	r3, r7
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff ff6b 	bl	800ae04 <prvSampleTimeNow>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b09      	cmp	r3, #9
 800af34:	f200 8097 	bhi.w	800b066 <prvProcessReceivedCommands+0x19e>
 800af38:	a201      	add	r2, pc, #4	; (adr r2, 800af40 <prvProcessReceivedCommands+0x78>)
 800af3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af69 	.word	0x0800af69
 800af48:	0800af69 	.word	0x0800af69
 800af4c:	0800afdd 	.word	0x0800afdd
 800af50:	0800aff1 	.word	0x0800aff1
 800af54:	0800b03b 	.word	0x0800b03b
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af69 	.word	0x0800af69
 800af60:	0800afdd 	.word	0x0800afdd
 800af64:	0800aff1 	.word	0x0800aff1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	b2da      	uxtb	r2, r3
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	18d1      	adds	r1, r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af88:	f7ff ff5c 	bl	800ae44 <prvInsertTimerInActiveList>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d069      	beq.n	800b066 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05e      	beq.n	800b066 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	441a      	add	r2, r3
 800afb0:	2300      	movs	r3, #0
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2300      	movs	r3, #0
 800afb6:	2100      	movs	r1, #0
 800afb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afba:	f7ff fe05 	bl	800abc8 <xTimerGenericCommand>
 800afbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d14f      	bne.n	800b066 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	61bb      	str	r3, [r7, #24]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afe2:	f023 0301 	bic.w	r3, r3, #1
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afee:	e03a      	b.n	800b066 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff6:	f043 0301 	orr.w	r3, r3, #1
 800affa:	b2da      	uxtb	r2, r3
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	617b      	str	r3, [r7, #20]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	699a      	ldr	r2, [r3, #24]
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	18d1      	adds	r1, r2, r3
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b034:	f7ff ff06 	bl	800ae44 <prvInsertTimerInActiveList>
					break;
 800b038:	e015      	b.n	800b066 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b04a:	f000 fbe1 	bl	800b810 <vPortFree>
 800b04e:	e00a      	b.n	800b066 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b056:	f023 0301 	bic.w	r3, r3, #1
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b062:	e000      	b.n	800b066 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b066:	4b08      	ldr	r3, [pc, #32]	; (800b088 <prvProcessReceivedCommands+0x1c0>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	1d39      	adds	r1, r7, #4
 800b06c:	2200      	movs	r2, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fadc 	bl	800962c <xQueueReceive>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	f47f af2a 	bne.w	800aed0 <prvProcessReceivedCommands+0x8>
	}
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	3730      	adds	r7, #48	; 0x30
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20003f34 	.word	0x20003f34

0800b08c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b092:	e048      	b.n	800b126 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b094:	4b2d      	ldr	r3, [pc, #180]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b09e:	4b2b      	ldr	r3, [pc, #172]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fd ffbb 	bl	8009028 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02e      	beq.n	800b126 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d90e      	bls.n	800b0f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0e6:	4b19      	ldr	r3, [pc, #100]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fd ff60 	bl	8008fb6 <vListInsert>
 800b0f6:	e016      	b.n	800b126 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	2100      	movs	r1, #0
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fd60 	bl	800abc8 <xTimerGenericCommand>
 800b108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	603b      	str	r3, [r7, #0]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1b1      	bne.n	800b094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b130:	4b06      	ldr	r3, [pc, #24]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b136:	4b06      	ldr	r3, [pc, #24]	; (800b150 <prvSwitchTimerLists+0xc4>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a04      	ldr	r2, [pc, #16]	; (800b14c <prvSwitchTimerLists+0xc0>)
 800b13c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b13e:	4a04      	ldr	r2, [pc, #16]	; (800b150 <prvSwitchTimerLists+0xc4>)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	6013      	str	r3, [r2, #0]
}
 800b144:	bf00      	nop
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20003f2c 	.word	0x20003f2c
 800b150:	20003f30 	.word	0x20003f30

0800b154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b15a:	f000 f96b 	bl	800b434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <prvCheckForValidListAndQueue+0x60>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d120      	bne.n	800b1a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b166:	4814      	ldr	r0, [pc, #80]	; (800b1b8 <prvCheckForValidListAndQueue+0x64>)
 800b168:	f7fd fed4 	bl	8008f14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b16c:	4813      	ldr	r0, [pc, #76]	; (800b1bc <prvCheckForValidListAndQueue+0x68>)
 800b16e:	f7fd fed1 	bl	8008f14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <prvCheckForValidListAndQueue+0x6c>)
 800b174:	4a10      	ldr	r2, [pc, #64]	; (800b1b8 <prvCheckForValidListAndQueue+0x64>)
 800b176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b178:	4b12      	ldr	r3, [pc, #72]	; (800b1c4 <prvCheckForValidListAndQueue+0x70>)
 800b17a:	4a10      	ldr	r2, [pc, #64]	; (800b1bc <prvCheckForValidListAndQueue+0x68>)
 800b17c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b17e:	2300      	movs	r3, #0
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <prvCheckForValidListAndQueue+0x74>)
 800b184:	4a11      	ldr	r2, [pc, #68]	; (800b1cc <prvCheckForValidListAndQueue+0x78>)
 800b186:	2110      	movs	r1, #16
 800b188:	200a      	movs	r0, #10
 800b18a:	f7fd ffdf 	bl	800914c <xQueueGenericCreateStatic>
 800b18e:	4603      	mov	r3, r0
 800b190:	4a08      	ldr	r2, [pc, #32]	; (800b1b4 <prvCheckForValidListAndQueue+0x60>)
 800b192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <prvCheckForValidListAndQueue+0x60>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b19c:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <prvCheckForValidListAndQueue+0x60>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	490b      	ldr	r1, [pc, #44]	; (800b1d0 <prvCheckForValidListAndQueue+0x7c>)
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fcb2 	bl	8009b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1a8:	f000 f974 	bl	800b494 <vPortExitCritical>
}
 800b1ac:	bf00      	nop
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20003f34 	.word	0x20003f34
 800b1b8:	20003f04 	.word	0x20003f04
 800b1bc:	20003f18 	.word	0x20003f18
 800b1c0:	20003f2c 	.word	0x20003f2c
 800b1c4:	20003f30 	.word	0x20003f30
 800b1c8:	20003fe0 	.word	0x20003fe0
 800b1cc:	20003f40 	.word	0x20003f40
 800b1d0:	0800cec8 	.word	0x0800cec8

0800b1d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3b04      	subs	r3, #4
 800b1e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3b04      	subs	r3, #4
 800b1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f023 0201 	bic.w	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3b04      	subs	r3, #4
 800b202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b204:	4a0c      	ldr	r2, [pc, #48]	; (800b238 <pxPortInitialiseStack+0x64>)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3b14      	subs	r3, #20
 800b20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3b04      	subs	r3, #4
 800b21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f06f 0202 	mvn.w	r2, #2
 800b222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3b20      	subs	r3, #32
 800b228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b22a:	68fb      	ldr	r3, [r7, #12]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	0800b23d 	.word	0x0800b23d

0800b23c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b246:	4b12      	ldr	r3, [pc, #72]	; (800b290 <prvTaskExitError+0x54>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24e:	d00a      	beq.n	800b266 <prvTaskExitError+0x2a>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <prvTaskExitError+0x28>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60bb      	str	r3, [r7, #8]
}
 800b278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b27a:	bf00      	nop
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0fc      	beq.n	800b27c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	20000168 	.word	0x20000168
	...

0800b2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <pxCurrentTCBConst2>)
 800b2a2:	6819      	ldr	r1, [r3, #0]
 800b2a4:	6808      	ldr	r0, [r1, #0]
 800b2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2aa:	f380 8809 	msr	PSP, r0
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8811 	msr	BASEPRI, r0
 800b2ba:	4770      	bx	lr
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst2>:
 800b2c0:	20003a04 	.word	0x20003a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2c8:	4808      	ldr	r0, [pc, #32]	; (800b2ec <prvPortStartFirstTask+0x24>)
 800b2ca:	6800      	ldr	r0, [r0, #0]
 800b2cc:	6800      	ldr	r0, [r0, #0]
 800b2ce:	f380 8808 	msr	MSP, r0
 800b2d2:	f04f 0000 	mov.w	r0, #0
 800b2d6:	f380 8814 	msr	CONTROL, r0
 800b2da:	b662      	cpsie	i
 800b2dc:	b661      	cpsie	f
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	df00      	svc	0
 800b2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ea:	bf00      	nop
 800b2ec:	e000ed08 	.word	0xe000ed08

0800b2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2f6:	4b46      	ldr	r3, [pc, #280]	; (800b410 <xPortStartScheduler+0x120>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a46      	ldr	r2, [pc, #280]	; (800b414 <xPortStartScheduler+0x124>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10a      	bne.n	800b316 <xPortStartScheduler+0x26>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	613b      	str	r3, [r7, #16]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b316:	4b3e      	ldr	r3, [pc, #248]	; (800b410 <xPortStartScheduler+0x120>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a3f      	ldr	r2, [pc, #252]	; (800b418 <xPortStartScheduler+0x128>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10a      	bne.n	800b336 <xPortStartScheduler+0x46>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b336:	4b39      	ldr	r3, [pc, #228]	; (800b41c <xPortStartScheduler+0x12c>)
 800b338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	22ff      	movs	r2, #255	; 0xff
 800b346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	4b31      	ldr	r3, [pc, #196]	; (800b420 <xPortStartScheduler+0x130>)
 800b35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b35e:	4b31      	ldr	r3, [pc, #196]	; (800b424 <xPortStartScheduler+0x134>)
 800b360:	2207      	movs	r2, #7
 800b362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b364:	e009      	b.n	800b37a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <xPortStartScheduler+0x134>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <xPortStartScheduler+0x134>)
 800b36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	b2db      	uxtb	r3, r3
 800b378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d0ef      	beq.n	800b366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <xPortStartScheduler+0x134>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1c3 0307 	rsb	r3, r3, #7
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d00a      	beq.n	800b3a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60bb      	str	r3, [r7, #8]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <xPortStartScheduler+0x134>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3ba:	4a1a      	ldr	r2, [pc, #104]	; (800b424 <xPortStartScheduler+0x134>)
 800b3bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3c6:	4b18      	ldr	r3, [pc, #96]	; (800b428 <xPortStartScheduler+0x138>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a17      	ldr	r2, [pc, #92]	; (800b428 <xPortStartScheduler+0x138>)
 800b3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3d2:	4b15      	ldr	r3, [pc, #84]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a14      	ldr	r2, [pc, #80]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3de:	f000 f8dd 	bl	800b59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <xPortStartScheduler+0x13c>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3e8:	f000 f8fc 	bl	800b5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3ec:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xPortStartScheduler+0x140>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <xPortStartScheduler+0x140>)
 800b3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3f8:	f7ff ff66 	bl	800b2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3fc:	f7ff f846 	bl	800a48c <vTaskSwitchContext>
	prvTaskExitError();
 800b400:	f7ff ff1c 	bl	800b23c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	e000ed00 	.word	0xe000ed00
 800b414:	410fc271 	.word	0x410fc271
 800b418:	410fc270 	.word	0x410fc270
 800b41c:	e000e400 	.word	0xe000e400
 800b420:	20004030 	.word	0x20004030
 800b424:	20004034 	.word	0x20004034
 800b428:	e000ed20 	.word	0xe000ed20
 800b42c:	20000168 	.word	0x20000168
 800b430:	e000ef34 	.word	0xe000ef34

0800b434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	607b      	str	r3, [r7, #4]
}
 800b44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <vPortEnterCritical+0x58>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	4a0d      	ldr	r2, [pc, #52]	; (800b48c <vPortEnterCritical+0x58>)
 800b456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <vPortEnterCritical+0x58>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10f      	bne.n	800b480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b460:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <vPortEnterCritical+0x5c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <vPortEnterCritical+0x4c>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	603b      	str	r3, [r7, #0]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <vPortEnterCritical+0x4a>
	}
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20000168 	.word	0x20000168
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b49a:	4b12      	ldr	r3, [pc, #72]	; (800b4e4 <vPortExitCritical+0x50>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <vPortExitCritical+0x24>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	607b      	str	r3, [r7, #4]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	4a09      	ldr	r2, [pc, #36]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4c2:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <vPortExitCritical+0x42>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f383 8811 	msr	BASEPRI, r3
}
 800b4d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000168 	.word	0x20000168
	...

0800b4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4f0:	f3ef 8009 	mrs	r0, PSP
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	4b15      	ldr	r3, [pc, #84]	; (800b550 <pxCurrentTCBConst>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	f01e 0f10 	tst.w	lr, #16
 800b500:	bf08      	it	eq
 800b502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	6010      	str	r0, [r2, #0]
 800b50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b514:	f380 8811 	msr	BASEPRI, r0
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f7fe ffb4 	bl	800a48c <vTaskSwitchContext>
 800b524:	f04f 0000 	mov.w	r0, #0
 800b528:	f380 8811 	msr	BASEPRI, r0
 800b52c:	bc09      	pop	{r0, r3}
 800b52e:	6819      	ldr	r1, [r3, #0]
 800b530:	6808      	ldr	r0, [r1, #0]
 800b532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b536:	f01e 0f10 	tst.w	lr, #16
 800b53a:	bf08      	it	eq
 800b53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b540:	f380 8809 	msr	PSP, r0
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst>:
 800b550:	20003a04 	.word	0x20003a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b572:	f7fe fed1 	bl	800a318 <xTaskIncrementTick>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b57c:	4b06      	ldr	r3, [pc, #24]	; (800b598 <xPortSysTickHandler+0x40>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	2300      	movs	r3, #0
 800b586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	f383 8811 	msr	BASEPRI, r3
}
 800b58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <vPortSetupTimerInterrupt+0x38>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <vPortSetupTimerInterrupt+0x3c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <vPortSetupTimerInterrupt+0x40>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	099b      	lsrs	r3, r3, #6
 800b5b8:	4a09      	ldr	r2, [pc, #36]	; (800b5e0 <vPortSetupTimerInterrupt+0x44>)
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5be:	4b04      	ldr	r3, [pc, #16]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5c0:	2207      	movs	r2, #7
 800b5c2:	601a      	str	r2, [r3, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	e000e010 	.word	0xe000e010
 800b5d4:	e000e018 	.word	0xe000e018
 800b5d8:	20000158 	.word	0x20000158
 800b5dc:	10624dd3 	.word	0x10624dd3
 800b5e0:	e000e014 	.word	0xe000e014

0800b5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5f4 <vPortEnableVFP+0x10>
 800b5e8:	6801      	ldr	r1, [r0, #0]
 800b5ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ee:	6001      	str	r1, [r0, #0]
 800b5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5f2:	bf00      	nop
 800b5f4:	e000ed88 	.word	0xe000ed88

0800b5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5fe:	f3ef 8305 	mrs	r3, IPSR
 800b602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d914      	bls.n	800b634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b60a:	4a17      	ldr	r2, [pc, #92]	; (800b668 <vPortValidateInterruptPriority+0x70>)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b614:	4b15      	ldr	r3, [pc, #84]	; (800b66c <vPortValidateInterruptPriority+0x74>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	7afa      	ldrb	r2, [r7, #11]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d20a      	bcs.n	800b634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <vPortValidateInterruptPriority+0x78>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <vPortValidateInterruptPriority+0x7c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d90a      	bls.n	800b65a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	603b      	str	r3, [r7, #0]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <vPortValidateInterruptPriority+0x60>
	}
 800b65a:	bf00      	nop
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	e000e3f0 	.word	0xe000e3f0
 800b66c:	20004030 	.word	0x20004030
 800b670:	e000ed0c 	.word	0xe000ed0c
 800b674:	20004034 	.word	0x20004034

0800b678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b684:	f7fe fd8c 	bl	800a1a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b688:	4b5b      	ldr	r3, [pc, #364]	; (800b7f8 <pvPortMalloc+0x180>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b690:	f000 f920 	bl	800b8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b694:	4b59      	ldr	r3, [pc, #356]	; (800b7fc <pvPortMalloc+0x184>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f040 8093 	bne.w	800b7c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01d      	beq.n	800b6e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d014      	beq.n	800b6e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f023 0307 	bic.w	r3, r3, #7
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	617b      	str	r3, [r7, #20]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d06e      	beq.n	800b7c8 <pvPortMalloc+0x150>
 800b6ea:	4b45      	ldr	r3, [pc, #276]	; (800b800 <pvPortMalloc+0x188>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d869      	bhi.n	800b7c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6f4:	4b43      	ldr	r3, [pc, #268]	; (800b804 <pvPortMalloc+0x18c>)
 800b6f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6f8:	4b42      	ldr	r3, [pc, #264]	; (800b804 <pvPortMalloc+0x18c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6fe:	e004      	b.n	800b70a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d903      	bls.n	800b71c <pvPortMalloc+0xa4>
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f1      	bne.n	800b700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b71c:	4b36      	ldr	r3, [pc, #216]	; (800b7f8 <pvPortMalloc+0x180>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	429a      	cmp	r2, r3
 800b724:	d050      	beq.n	800b7c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2208      	movs	r2, #8
 800b72c:	4413      	add	r3, r2
 800b72e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	2308      	movs	r3, #8
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	429a      	cmp	r2, r3
 800b746:	d91f      	bls.n	800b788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <pvPortMalloc+0xf8>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	613b      	str	r3, [r7, #16]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	1ad2      	subs	r2, r2, r3
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b782:	69b8      	ldr	r0, [r7, #24]
 800b784:	f000 f908 	bl	800b998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b788:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <pvPortMalloc+0x188>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	4a1b      	ldr	r2, [pc, #108]	; (800b800 <pvPortMalloc+0x188>)
 800b794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <pvPortMalloc+0x188>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <pvPortMalloc+0x190>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d203      	bcs.n	800b7aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <pvPortMalloc+0x188>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <pvPortMalloc+0x190>)
 800b7a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <pvPortMalloc+0x184>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <pvPortMalloc+0x194>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4a11      	ldr	r2, [pc, #68]	; (800b80c <pvPortMalloc+0x194>)
 800b7c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7c8:	f7fe fcf8 	bl	800a1bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <pvPortMalloc+0x174>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60fb      	str	r3, [r7, #12]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <pvPortMalloc+0x172>
	return pvReturn;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3728      	adds	r7, #40	; 0x28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2000c040 	.word	0x2000c040
 800b7fc:	2000c054 	.word	0x2000c054
 800b800:	2000c044 	.word	0x2000c044
 800b804:	2000c038 	.word	0x2000c038
 800b808:	2000c048 	.word	0x2000c048
 800b80c:	2000c04c 	.word	0x2000c04c

0800b810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d04d      	beq.n	800b8be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b822:	2308      	movs	r3, #8
 800b824:	425b      	negs	r3, r3
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4413      	add	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <vPortFree+0xb8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4013      	ands	r3, r2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <vPortFree+0x44>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	60fb      	str	r3, [r7, #12]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <vPortFree+0x62>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	60bb      	str	r3, [r7, #8]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <vPortFree+0xb8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d01e      	beq.n	800b8be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d11a      	bne.n	800b8be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <vPortFree+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	43db      	mvns	r3, r3
 800b892:	401a      	ands	r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b898:	f7fe fc82 	bl	800a1a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <vPortFree+0xbc>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	4a09      	ldr	r2, [pc, #36]	; (800b8cc <vPortFree+0xbc>)
 800b8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8aa:	6938      	ldr	r0, [r7, #16]
 800b8ac:	f000 f874 	bl	800b998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <vPortFree+0xc0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	4a06      	ldr	r2, [pc, #24]	; (800b8d0 <vPortFree+0xc0>)
 800b8b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8ba:	f7fe fc7f 	bl	800a1bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8be:	bf00      	nop
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000c054 	.word	0x2000c054
 800b8cc:	2000c044 	.word	0x2000c044
 800b8d0:	2000c050 	.word	0x2000c050

0800b8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8e0:	4b27      	ldr	r3, [pc, #156]	; (800b980 <prvHeapInit+0xac>)
 800b8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0307 	bic.w	r3, r3, #7
 800b8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <prvHeapInit+0xac>)
 800b904:	4413      	add	r3, r2
 800b906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b90c:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <prvHeapInit+0xb0>)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b912:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <prvHeapInit+0xb0>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b920:	2208      	movs	r2, #8
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1a9b      	subs	r3, r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a15      	ldr	r2, [pc, #84]	; (800b988 <prvHeapInit+0xb4>)
 800b934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <prvHeapInit+0xb4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2200      	movs	r2, #0
 800b93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <prvHeapInit+0xb4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b954:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <prvHeapInit+0xb4>)
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4a0a      	ldr	r2, [pc, #40]	; (800b98c <prvHeapInit+0xb8>)
 800b962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4a09      	ldr	r2, [pc, #36]	; (800b990 <prvHeapInit+0xbc>)
 800b96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b96c:	4b09      	ldr	r3, [pc, #36]	; (800b994 <prvHeapInit+0xc0>)
 800b96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b972:	601a      	str	r2, [r3, #0]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20004038 	.word	0x20004038
 800b984:	2000c038 	.word	0x2000c038
 800b988:	2000c040 	.word	0x2000c040
 800b98c:	2000c048 	.word	0x2000c048
 800b990:	2000c044 	.word	0x2000c044
 800b994:	2000c054 	.word	0x2000c054

0800b998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <prvInsertBlockIntoFreeList+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e002      	b.n	800b9ac <prvInsertBlockIntoFreeList+0x14>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d8f7      	bhi.n	800b9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d108      	bne.n	800b9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	441a      	add	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	441a      	add	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d118      	bne.n	800ba20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4b15      	ldr	r3, [pc, #84]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d00d      	beq.n	800ba16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	441a      	add	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e008      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e003      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d002      	beq.n	800ba36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2000c038 	.word	0x2000c038
 800ba48:	2000c040 	.word	0x2000c040

0800ba4c <atoi>:
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	2100      	movs	r1, #0
 800ba50:	f000 bbfc 	b.w	800c24c <strtol>

0800ba54 <__errno>:
 800ba54:	4b01      	ldr	r3, [pc, #4]	; (800ba5c <__errno+0x8>)
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	2000016c 	.word	0x2000016c

0800ba60 <std>:
 800ba60:	2300      	movs	r3, #0
 800ba62:	b510      	push	{r4, lr}
 800ba64:	4604      	mov	r4, r0
 800ba66:	e9c0 3300 	strd	r3, r3, [r0]
 800ba6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba6e:	6083      	str	r3, [r0, #8]
 800ba70:	8181      	strh	r1, [r0, #12]
 800ba72:	6643      	str	r3, [r0, #100]	; 0x64
 800ba74:	81c2      	strh	r2, [r0, #14]
 800ba76:	6183      	str	r3, [r0, #24]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	2208      	movs	r2, #8
 800ba7c:	305c      	adds	r0, #92	; 0x5c
 800ba7e:	f000 f91a 	bl	800bcb6 <memset>
 800ba82:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <std+0x38>)
 800ba84:	6263      	str	r3, [r4, #36]	; 0x24
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <std+0x3c>)
 800ba88:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <std+0x40>)
 800ba8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <std+0x44>)
 800ba90:	6224      	str	r4, [r4, #32]
 800ba92:	6323      	str	r3, [r4, #48]	; 0x30
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	bf00      	nop
 800ba98:	0800c099 	.word	0x0800c099
 800ba9c:	0800c0bb 	.word	0x0800c0bb
 800baa0:	0800c0f3 	.word	0x0800c0f3
 800baa4:	0800c117 	.word	0x0800c117

0800baa8 <_cleanup_r>:
 800baa8:	4901      	ldr	r1, [pc, #4]	; (800bab0 <_cleanup_r+0x8>)
 800baaa:	f000 b8af 	b.w	800bc0c <_fwalk_reent>
 800baae:	bf00      	nop
 800bab0:	0800c531 	.word	0x0800c531

0800bab4 <__sfmoreglue>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	2268      	movs	r2, #104	; 0x68
 800bab8:	1e4d      	subs	r5, r1, #1
 800baba:	4355      	muls	r5, r2
 800babc:	460e      	mov	r6, r1
 800babe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bac2:	f000 f96d 	bl	800bda0 <_malloc_r>
 800bac6:	4604      	mov	r4, r0
 800bac8:	b140      	cbz	r0, 800badc <__sfmoreglue+0x28>
 800baca:	2100      	movs	r1, #0
 800bacc:	e9c0 1600 	strd	r1, r6, [r0]
 800bad0:	300c      	adds	r0, #12
 800bad2:	60a0      	str	r0, [r4, #8]
 800bad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bad8:	f000 f8ed 	bl	800bcb6 <memset>
 800badc:	4620      	mov	r0, r4
 800bade:	bd70      	pop	{r4, r5, r6, pc}

0800bae0 <__sfp_lock_acquire>:
 800bae0:	4801      	ldr	r0, [pc, #4]	; (800bae8 <__sfp_lock_acquire+0x8>)
 800bae2:	f000 b8d8 	b.w	800bc96 <__retarget_lock_acquire_recursive>
 800bae6:	bf00      	nop
 800bae8:	2000c059 	.word	0x2000c059

0800baec <__sfp_lock_release>:
 800baec:	4801      	ldr	r0, [pc, #4]	; (800baf4 <__sfp_lock_release+0x8>)
 800baee:	f000 b8d3 	b.w	800bc98 <__retarget_lock_release_recursive>
 800baf2:	bf00      	nop
 800baf4:	2000c059 	.word	0x2000c059

0800baf8 <__sinit_lock_acquire>:
 800baf8:	4801      	ldr	r0, [pc, #4]	; (800bb00 <__sinit_lock_acquire+0x8>)
 800bafa:	f000 b8cc 	b.w	800bc96 <__retarget_lock_acquire_recursive>
 800bafe:	bf00      	nop
 800bb00:	2000c05a 	.word	0x2000c05a

0800bb04 <__sinit_lock_release>:
 800bb04:	4801      	ldr	r0, [pc, #4]	; (800bb0c <__sinit_lock_release+0x8>)
 800bb06:	f000 b8c7 	b.w	800bc98 <__retarget_lock_release_recursive>
 800bb0a:	bf00      	nop
 800bb0c:	2000c05a 	.word	0x2000c05a

0800bb10 <__sinit>:
 800bb10:	b510      	push	{r4, lr}
 800bb12:	4604      	mov	r4, r0
 800bb14:	f7ff fff0 	bl	800baf8 <__sinit_lock_acquire>
 800bb18:	69a3      	ldr	r3, [r4, #24]
 800bb1a:	b11b      	cbz	r3, 800bb24 <__sinit+0x14>
 800bb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb20:	f7ff bff0 	b.w	800bb04 <__sinit_lock_release>
 800bb24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb28:	6523      	str	r3, [r4, #80]	; 0x50
 800bb2a:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <__sinit+0x68>)
 800bb2c:	4a13      	ldr	r2, [pc, #76]	; (800bb7c <__sinit+0x6c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	bf04      	itt	eq
 800bb36:	2301      	moveq	r3, #1
 800bb38:	61a3      	streq	r3, [r4, #24]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 f820 	bl	800bb80 <__sfp>
 800bb40:	6060      	str	r0, [r4, #4]
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f81c 	bl	800bb80 <__sfp>
 800bb48:	60a0      	str	r0, [r4, #8]
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f000 f818 	bl	800bb80 <__sfp>
 800bb50:	2200      	movs	r2, #0
 800bb52:	60e0      	str	r0, [r4, #12]
 800bb54:	2104      	movs	r1, #4
 800bb56:	6860      	ldr	r0, [r4, #4]
 800bb58:	f7ff ff82 	bl	800ba60 <std>
 800bb5c:	68a0      	ldr	r0, [r4, #8]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	2109      	movs	r1, #9
 800bb62:	f7ff ff7d 	bl	800ba60 <std>
 800bb66:	68e0      	ldr	r0, [r4, #12]
 800bb68:	2202      	movs	r2, #2
 800bb6a:	2112      	movs	r1, #18
 800bb6c:	f7ff ff78 	bl	800ba60 <std>
 800bb70:	2301      	movs	r3, #1
 800bb72:	61a3      	str	r3, [r4, #24]
 800bb74:	e7d2      	b.n	800bb1c <__sinit+0xc>
 800bb76:	bf00      	nop
 800bb78:	0800d07c 	.word	0x0800d07c
 800bb7c:	0800baa9 	.word	0x0800baa9

0800bb80 <__sfp>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	4607      	mov	r7, r0
 800bb84:	f7ff ffac 	bl	800bae0 <__sfp_lock_acquire>
 800bb88:	4b1e      	ldr	r3, [pc, #120]	; (800bc04 <__sfp+0x84>)
 800bb8a:	681e      	ldr	r6, [r3, #0]
 800bb8c:	69b3      	ldr	r3, [r6, #24]
 800bb8e:	b913      	cbnz	r3, 800bb96 <__sfp+0x16>
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7ff ffbd 	bl	800bb10 <__sinit>
 800bb96:	3648      	adds	r6, #72	; 0x48
 800bb98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	d503      	bpl.n	800bba8 <__sfp+0x28>
 800bba0:	6833      	ldr	r3, [r6, #0]
 800bba2:	b30b      	cbz	r3, 800bbe8 <__sfp+0x68>
 800bba4:	6836      	ldr	r6, [r6, #0]
 800bba6:	e7f7      	b.n	800bb98 <__sfp+0x18>
 800bba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbac:	b9d5      	cbnz	r5, 800bbe4 <__sfp+0x64>
 800bbae:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <__sfp+0x88>)
 800bbb0:	60e3      	str	r3, [r4, #12]
 800bbb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbb6:	6665      	str	r5, [r4, #100]	; 0x64
 800bbb8:	f000 f86c 	bl	800bc94 <__retarget_lock_init_recursive>
 800bbbc:	f7ff ff96 	bl	800baec <__sfp_lock_release>
 800bbc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbc8:	6025      	str	r5, [r4, #0]
 800bbca:	61a5      	str	r5, [r4, #24]
 800bbcc:	2208      	movs	r2, #8
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbd4:	f000 f86f 	bl	800bcb6 <memset>
 800bbd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe4:	3468      	adds	r4, #104	; 0x68
 800bbe6:	e7d9      	b.n	800bb9c <__sfp+0x1c>
 800bbe8:	2104      	movs	r1, #4
 800bbea:	4638      	mov	r0, r7
 800bbec:	f7ff ff62 	bl	800bab4 <__sfmoreglue>
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	6030      	str	r0, [r6, #0]
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d1d5      	bne.n	800bba4 <__sfp+0x24>
 800bbf8:	f7ff ff78 	bl	800baec <__sfp_lock_release>
 800bbfc:	230c      	movs	r3, #12
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	e7ee      	b.n	800bbe0 <__sfp+0x60>
 800bc02:	bf00      	nop
 800bc04:	0800d07c 	.word	0x0800d07c
 800bc08:	ffff0001 	.word	0xffff0001

0800bc0c <_fwalk_reent>:
 800bc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc10:	4606      	mov	r6, r0
 800bc12:	4688      	mov	r8, r1
 800bc14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc18:	2700      	movs	r7, #0
 800bc1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc1e:	f1b9 0901 	subs.w	r9, r9, #1
 800bc22:	d505      	bpl.n	800bc30 <_fwalk_reent+0x24>
 800bc24:	6824      	ldr	r4, [r4, #0]
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	d1f7      	bne.n	800bc1a <_fwalk_reent+0xe>
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d907      	bls.n	800bc46 <_fwalk_reent+0x3a>
 800bc36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	d003      	beq.n	800bc46 <_fwalk_reent+0x3a>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4630      	mov	r0, r6
 800bc42:	47c0      	blx	r8
 800bc44:	4307      	orrs	r7, r0
 800bc46:	3568      	adds	r5, #104	; 0x68
 800bc48:	e7e9      	b.n	800bc1e <_fwalk_reent+0x12>
	...

0800bc4c <__libc_init_array>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4d0d      	ldr	r5, [pc, #52]	; (800bc84 <__libc_init_array+0x38>)
 800bc50:	4c0d      	ldr	r4, [pc, #52]	; (800bc88 <__libc_init_array+0x3c>)
 800bc52:	1b64      	subs	r4, r4, r5
 800bc54:	10a4      	asrs	r4, r4, #2
 800bc56:	2600      	movs	r6, #0
 800bc58:	42a6      	cmp	r6, r4
 800bc5a:	d109      	bne.n	800bc70 <__libc_init_array+0x24>
 800bc5c:	4d0b      	ldr	r5, [pc, #44]	; (800bc8c <__libc_init_array+0x40>)
 800bc5e:	4c0c      	ldr	r4, [pc, #48]	; (800bc90 <__libc_init_array+0x44>)
 800bc60:	f001 f848 	bl	800ccf4 <_init>
 800bc64:	1b64      	subs	r4, r4, r5
 800bc66:	10a4      	asrs	r4, r4, #2
 800bc68:	2600      	movs	r6, #0
 800bc6a:	42a6      	cmp	r6, r4
 800bc6c:	d105      	bne.n	800bc7a <__libc_init_array+0x2e>
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc74:	4798      	blx	r3
 800bc76:	3601      	adds	r6, #1
 800bc78:	e7ee      	b.n	800bc58 <__libc_init_array+0xc>
 800bc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7e:	4798      	blx	r3
 800bc80:	3601      	adds	r6, #1
 800bc82:	e7f2      	b.n	800bc6a <__libc_init_array+0x1e>
 800bc84:	0800d1bc 	.word	0x0800d1bc
 800bc88:	0800d1bc 	.word	0x0800d1bc
 800bc8c:	0800d1bc 	.word	0x0800d1bc
 800bc90:	0800d1c0 	.word	0x0800d1c0

0800bc94 <__retarget_lock_init_recursive>:
 800bc94:	4770      	bx	lr

0800bc96 <__retarget_lock_acquire_recursive>:
 800bc96:	4770      	bx	lr

0800bc98 <__retarget_lock_release_recursive>:
 800bc98:	4770      	bx	lr

0800bc9a <memcpy>:
 800bc9a:	440a      	add	r2, r1
 800bc9c:	4291      	cmp	r1, r2
 800bc9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca2:	d100      	bne.n	800bca6 <memcpy+0xc>
 800bca4:	4770      	bx	lr
 800bca6:	b510      	push	{r4, lr}
 800bca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb0:	4291      	cmp	r1, r2
 800bcb2:	d1f9      	bne.n	800bca8 <memcpy+0xe>
 800bcb4:	bd10      	pop	{r4, pc}

0800bcb6 <memset>:
 800bcb6:	4402      	add	r2, r0
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d100      	bne.n	800bcc0 <memset+0xa>
 800bcbe:	4770      	bx	lr
 800bcc0:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc4:	e7f9      	b.n	800bcba <memset+0x4>
	...

0800bcc8 <_free_r>:
 800bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcca:	2900      	cmp	r1, #0
 800bccc:	d044      	beq.n	800bd58 <_free_r+0x90>
 800bcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd2:	9001      	str	r0, [sp, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcda:	bfb8      	it	lt
 800bcdc:	18e4      	addlt	r4, r4, r3
 800bcde:	f000 fcdb 	bl	800c698 <__malloc_lock>
 800bce2:	4a1e      	ldr	r2, [pc, #120]	; (800bd5c <_free_r+0x94>)
 800bce4:	9801      	ldr	r0, [sp, #4]
 800bce6:	6813      	ldr	r3, [r2, #0]
 800bce8:	b933      	cbnz	r3, 800bcf8 <_free_r+0x30>
 800bcea:	6063      	str	r3, [r4, #4]
 800bcec:	6014      	str	r4, [r2, #0]
 800bcee:	b003      	add	sp, #12
 800bcf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcf4:	f000 bcd6 	b.w	800c6a4 <__malloc_unlock>
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d908      	bls.n	800bd0e <_free_r+0x46>
 800bcfc:	6825      	ldr	r5, [r4, #0]
 800bcfe:	1961      	adds	r1, r4, r5
 800bd00:	428b      	cmp	r3, r1
 800bd02:	bf01      	itttt	eq
 800bd04:	6819      	ldreq	r1, [r3, #0]
 800bd06:	685b      	ldreq	r3, [r3, #4]
 800bd08:	1949      	addeq	r1, r1, r5
 800bd0a:	6021      	streq	r1, [r4, #0]
 800bd0c:	e7ed      	b.n	800bcea <_free_r+0x22>
 800bd0e:	461a      	mov	r2, r3
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	b10b      	cbz	r3, 800bd18 <_free_r+0x50>
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	d9fa      	bls.n	800bd0e <_free_r+0x46>
 800bd18:	6811      	ldr	r1, [r2, #0]
 800bd1a:	1855      	adds	r5, r2, r1
 800bd1c:	42a5      	cmp	r5, r4
 800bd1e:	d10b      	bne.n	800bd38 <_free_r+0x70>
 800bd20:	6824      	ldr	r4, [r4, #0]
 800bd22:	4421      	add	r1, r4
 800bd24:	1854      	adds	r4, r2, r1
 800bd26:	42a3      	cmp	r3, r4
 800bd28:	6011      	str	r1, [r2, #0]
 800bd2a:	d1e0      	bne.n	800bcee <_free_r+0x26>
 800bd2c:	681c      	ldr	r4, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	6053      	str	r3, [r2, #4]
 800bd32:	4421      	add	r1, r4
 800bd34:	6011      	str	r1, [r2, #0]
 800bd36:	e7da      	b.n	800bcee <_free_r+0x26>
 800bd38:	d902      	bls.n	800bd40 <_free_r+0x78>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	e7d6      	b.n	800bcee <_free_r+0x26>
 800bd40:	6825      	ldr	r5, [r4, #0]
 800bd42:	1961      	adds	r1, r4, r5
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf04      	itt	eq
 800bd48:	6819      	ldreq	r1, [r3, #0]
 800bd4a:	685b      	ldreq	r3, [r3, #4]
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	bf04      	itt	eq
 800bd50:	1949      	addeq	r1, r1, r5
 800bd52:	6021      	streq	r1, [r4, #0]
 800bd54:	6054      	str	r4, [r2, #4]
 800bd56:	e7ca      	b.n	800bcee <_free_r+0x26>
 800bd58:	b003      	add	sp, #12
 800bd5a:	bd30      	pop	{r4, r5, pc}
 800bd5c:	2000c05c 	.word	0x2000c05c

0800bd60 <sbrk_aligned>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	4e0e      	ldr	r6, [pc, #56]	; (800bd9c <sbrk_aligned+0x3c>)
 800bd64:	460c      	mov	r4, r1
 800bd66:	6831      	ldr	r1, [r6, #0]
 800bd68:	4605      	mov	r5, r0
 800bd6a:	b911      	cbnz	r1, 800bd72 <sbrk_aligned+0x12>
 800bd6c:	f000 f984 	bl	800c078 <_sbrk_r>
 800bd70:	6030      	str	r0, [r6, #0]
 800bd72:	4621      	mov	r1, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	f000 f97f 	bl	800c078 <_sbrk_r>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	d00a      	beq.n	800bd94 <sbrk_aligned+0x34>
 800bd7e:	1cc4      	adds	r4, r0, #3
 800bd80:	f024 0403 	bic.w	r4, r4, #3
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d007      	beq.n	800bd98 <sbrk_aligned+0x38>
 800bd88:	1a21      	subs	r1, r4, r0
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 f974 	bl	800c078 <_sbrk_r>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d101      	bne.n	800bd98 <sbrk_aligned+0x38>
 800bd94:	f04f 34ff 	mov.w	r4, #4294967295
 800bd98:	4620      	mov	r0, r4
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	2000c060 	.word	0x2000c060

0800bda0 <_malloc_r>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	1ccd      	adds	r5, r1, #3
 800bda6:	f025 0503 	bic.w	r5, r5, #3
 800bdaa:	3508      	adds	r5, #8
 800bdac:	2d0c      	cmp	r5, #12
 800bdae:	bf38      	it	cc
 800bdb0:	250c      	movcc	r5, #12
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	db01      	blt.n	800bdbc <_malloc_r+0x1c>
 800bdb8:	42a9      	cmp	r1, r5
 800bdba:	d905      	bls.n	800bdc8 <_malloc_r+0x28>
 800bdbc:	230c      	movs	r3, #12
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	2600      	movs	r6, #0
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc8:	4e2e      	ldr	r6, [pc, #184]	; (800be84 <_malloc_r+0xe4>)
 800bdca:	f000 fc65 	bl	800c698 <__malloc_lock>
 800bdce:	6833      	ldr	r3, [r6, #0]
 800bdd0:	461c      	mov	r4, r3
 800bdd2:	bb34      	cbnz	r4, 800be22 <_malloc_r+0x82>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f7ff ffc2 	bl	800bd60 <sbrk_aligned>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	4604      	mov	r4, r0
 800bde0:	d14d      	bne.n	800be7e <_malloc_r+0xde>
 800bde2:	6834      	ldr	r4, [r6, #0]
 800bde4:	4626      	mov	r6, r4
 800bde6:	2e00      	cmp	r6, #0
 800bde8:	d140      	bne.n	800be6c <_malloc_r+0xcc>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	4631      	mov	r1, r6
 800bdee:	4638      	mov	r0, r7
 800bdf0:	eb04 0803 	add.w	r8, r4, r3
 800bdf4:	f000 f940 	bl	800c078 <_sbrk_r>
 800bdf8:	4580      	cmp	r8, r0
 800bdfa:	d13a      	bne.n	800be72 <_malloc_r+0xd2>
 800bdfc:	6821      	ldr	r1, [r4, #0]
 800bdfe:	3503      	adds	r5, #3
 800be00:	1a6d      	subs	r5, r5, r1
 800be02:	f025 0503 	bic.w	r5, r5, #3
 800be06:	3508      	adds	r5, #8
 800be08:	2d0c      	cmp	r5, #12
 800be0a:	bf38      	it	cc
 800be0c:	250c      	movcc	r5, #12
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ffa5 	bl	800bd60 <sbrk_aligned>
 800be16:	3001      	adds	r0, #1
 800be18:	d02b      	beq.n	800be72 <_malloc_r+0xd2>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	442b      	add	r3, r5
 800be1e:	6023      	str	r3, [r4, #0]
 800be20:	e00e      	b.n	800be40 <_malloc_r+0xa0>
 800be22:	6822      	ldr	r2, [r4, #0]
 800be24:	1b52      	subs	r2, r2, r5
 800be26:	d41e      	bmi.n	800be66 <_malloc_r+0xc6>
 800be28:	2a0b      	cmp	r2, #11
 800be2a:	d916      	bls.n	800be5a <_malloc_r+0xba>
 800be2c:	1961      	adds	r1, r4, r5
 800be2e:	42a3      	cmp	r3, r4
 800be30:	6025      	str	r5, [r4, #0]
 800be32:	bf18      	it	ne
 800be34:	6059      	strne	r1, [r3, #4]
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	bf08      	it	eq
 800be3a:	6031      	streq	r1, [r6, #0]
 800be3c:	5162      	str	r2, [r4, r5]
 800be3e:	604b      	str	r3, [r1, #4]
 800be40:	4638      	mov	r0, r7
 800be42:	f104 060b 	add.w	r6, r4, #11
 800be46:	f000 fc2d 	bl	800c6a4 <__malloc_unlock>
 800be4a:	f026 0607 	bic.w	r6, r6, #7
 800be4e:	1d23      	adds	r3, r4, #4
 800be50:	1af2      	subs	r2, r6, r3
 800be52:	d0b6      	beq.n	800bdc2 <_malloc_r+0x22>
 800be54:	1b9b      	subs	r3, r3, r6
 800be56:	50a3      	str	r3, [r4, r2]
 800be58:	e7b3      	b.n	800bdc2 <_malloc_r+0x22>
 800be5a:	6862      	ldr	r2, [r4, #4]
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	bf0c      	ite	eq
 800be60:	6032      	streq	r2, [r6, #0]
 800be62:	605a      	strne	r2, [r3, #4]
 800be64:	e7ec      	b.n	800be40 <_malloc_r+0xa0>
 800be66:	4623      	mov	r3, r4
 800be68:	6864      	ldr	r4, [r4, #4]
 800be6a:	e7b2      	b.n	800bdd2 <_malloc_r+0x32>
 800be6c:	4634      	mov	r4, r6
 800be6e:	6876      	ldr	r6, [r6, #4]
 800be70:	e7b9      	b.n	800bde6 <_malloc_r+0x46>
 800be72:	230c      	movs	r3, #12
 800be74:	603b      	str	r3, [r7, #0]
 800be76:	4638      	mov	r0, r7
 800be78:	f000 fc14 	bl	800c6a4 <__malloc_unlock>
 800be7c:	e7a1      	b.n	800bdc2 <_malloc_r+0x22>
 800be7e:	6025      	str	r5, [r4, #0]
 800be80:	e7de      	b.n	800be40 <_malloc_r+0xa0>
 800be82:	bf00      	nop
 800be84:	2000c05c 	.word	0x2000c05c

0800be88 <iprintf>:
 800be88:	b40f      	push	{r0, r1, r2, r3}
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <iprintf+0x2c>)
 800be8c:	b513      	push	{r0, r1, r4, lr}
 800be8e:	681c      	ldr	r4, [r3, #0]
 800be90:	b124      	cbz	r4, 800be9c <iprintf+0x14>
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	b913      	cbnz	r3, 800be9c <iprintf+0x14>
 800be96:	4620      	mov	r0, r4
 800be98:	f7ff fe3a 	bl	800bb10 <__sinit>
 800be9c:	ab05      	add	r3, sp, #20
 800be9e:	9a04      	ldr	r2, [sp, #16]
 800bea0:	68a1      	ldr	r1, [r4, #8]
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 fc2d 	bl	800c704 <_vfiprintf_r>
 800beaa:	b002      	add	sp, #8
 800beac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb0:	b004      	add	sp, #16
 800beb2:	4770      	bx	lr
 800beb4:	2000016c 	.word	0x2000016c

0800beb8 <_puts_r>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	460e      	mov	r6, r1
 800bebc:	4605      	mov	r5, r0
 800bebe:	b118      	cbz	r0, 800bec8 <_puts_r+0x10>
 800bec0:	6983      	ldr	r3, [r0, #24]
 800bec2:	b90b      	cbnz	r3, 800bec8 <_puts_r+0x10>
 800bec4:	f7ff fe24 	bl	800bb10 <__sinit>
 800bec8:	69ab      	ldr	r3, [r5, #24]
 800beca:	68ac      	ldr	r4, [r5, #8]
 800becc:	b913      	cbnz	r3, 800bed4 <_puts_r+0x1c>
 800bece:	4628      	mov	r0, r5
 800bed0:	f7ff fe1e 	bl	800bb10 <__sinit>
 800bed4:	4b2c      	ldr	r3, [pc, #176]	; (800bf88 <_puts_r+0xd0>)
 800bed6:	429c      	cmp	r4, r3
 800bed8:	d120      	bne.n	800bf1c <_puts_r+0x64>
 800beda:	686c      	ldr	r4, [r5, #4]
 800bedc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bede:	07db      	lsls	r3, r3, #31
 800bee0:	d405      	bmi.n	800beee <_puts_r+0x36>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	0598      	lsls	r0, r3, #22
 800bee6:	d402      	bmi.n	800beee <_puts_r+0x36>
 800bee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beea:	f7ff fed4 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	0719      	lsls	r1, r3, #28
 800bef2:	d51d      	bpl.n	800bf30 <_puts_r+0x78>
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	b1db      	cbz	r3, 800bf30 <_puts_r+0x78>
 800bef8:	3e01      	subs	r6, #1
 800befa:	68a3      	ldr	r3, [r4, #8]
 800befc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf00:	3b01      	subs	r3, #1
 800bf02:	60a3      	str	r3, [r4, #8]
 800bf04:	bb39      	cbnz	r1, 800bf56 <_puts_r+0x9e>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da38      	bge.n	800bf7c <_puts_r+0xc4>
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	210a      	movs	r1, #10
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 f9a6 	bl	800c260 <__swbuf_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d011      	beq.n	800bf3c <_puts_r+0x84>
 800bf18:	250a      	movs	r5, #10
 800bf1a:	e011      	b.n	800bf40 <_puts_r+0x88>
 800bf1c:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <_puts_r+0xd4>)
 800bf1e:	429c      	cmp	r4, r3
 800bf20:	d101      	bne.n	800bf26 <_puts_r+0x6e>
 800bf22:	68ac      	ldr	r4, [r5, #8]
 800bf24:	e7da      	b.n	800bedc <_puts_r+0x24>
 800bf26:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <_puts_r+0xd8>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	bf08      	it	eq
 800bf2c:	68ec      	ldreq	r4, [r5, #12]
 800bf2e:	e7d5      	b.n	800bedc <_puts_r+0x24>
 800bf30:	4621      	mov	r1, r4
 800bf32:	4628      	mov	r0, r5
 800bf34:	f000 f9f8 	bl	800c328 <__swsetup_r>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d0dd      	beq.n	800bef8 <_puts_r+0x40>
 800bf3c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf42:	07da      	lsls	r2, r3, #31
 800bf44:	d405      	bmi.n	800bf52 <_puts_r+0x9a>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	059b      	lsls	r3, r3, #22
 800bf4a:	d402      	bmi.n	800bf52 <_puts_r+0x9a>
 800bf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4e:	f7ff fea3 	bl	800bc98 <__retarget_lock_release_recursive>
 800bf52:	4628      	mov	r0, r5
 800bf54:	bd70      	pop	{r4, r5, r6, pc}
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da04      	bge.n	800bf64 <_puts_r+0xac>
 800bf5a:	69a2      	ldr	r2, [r4, #24]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	dc06      	bgt.n	800bf6e <_puts_r+0xb6>
 800bf60:	290a      	cmp	r1, #10
 800bf62:	d004      	beq.n	800bf6e <_puts_r+0xb6>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	6022      	str	r2, [r4, #0]
 800bf6a:	7019      	strb	r1, [r3, #0]
 800bf6c:	e7c5      	b.n	800befa <_puts_r+0x42>
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 f975 	bl	800c260 <__swbuf_r>
 800bf76:	3001      	adds	r0, #1
 800bf78:	d1bf      	bne.n	800befa <_puts_r+0x42>
 800bf7a:	e7df      	b.n	800bf3c <_puts_r+0x84>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	250a      	movs	r5, #10
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	6022      	str	r2, [r4, #0]
 800bf84:	701d      	strb	r5, [r3, #0]
 800bf86:	e7db      	b.n	800bf40 <_puts_r+0x88>
 800bf88:	0800d03c 	.word	0x0800d03c
 800bf8c:	0800d05c 	.word	0x0800d05c
 800bf90:	0800d01c 	.word	0x0800d01c

0800bf94 <puts>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <puts+0xc>)
 800bf96:	4601      	mov	r1, r0
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f7ff bf8d 	b.w	800beb8 <_puts_r>
 800bf9e:	bf00      	nop
 800bfa0:	2000016c 	.word	0x2000016c

0800bfa4 <cleanup_glue>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	6809      	ldr	r1, [r1, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	b109      	cbz	r1, 800bfb2 <cleanup_glue+0xe>
 800bfae:	f7ff fff9 	bl	800bfa4 <cleanup_glue>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfba:	f7ff be85 	b.w	800bcc8 <_free_r>
	...

0800bfc0 <_reclaim_reent>:
 800bfc0:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <_reclaim_reent+0xb4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	b570      	push	{r4, r5, r6, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	d051      	beq.n	800c070 <_reclaim_reent+0xb0>
 800bfcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfce:	b143      	cbz	r3, 800bfe2 <_reclaim_reent+0x22>
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d14a      	bne.n	800c06c <_reclaim_reent+0xac>
 800bfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd8:	6819      	ldr	r1, [r3, #0]
 800bfda:	b111      	cbz	r1, 800bfe2 <_reclaim_reent+0x22>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7ff fe73 	bl	800bcc8 <_free_r>
 800bfe2:	6961      	ldr	r1, [r4, #20]
 800bfe4:	b111      	cbz	r1, 800bfec <_reclaim_reent+0x2c>
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff fe6e 	bl	800bcc8 <_free_r>
 800bfec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfee:	b111      	cbz	r1, 800bff6 <_reclaim_reent+0x36>
 800bff0:	4620      	mov	r0, r4
 800bff2:	f7ff fe69 	bl	800bcc8 <_free_r>
 800bff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bff8:	b111      	cbz	r1, 800c000 <_reclaim_reent+0x40>
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7ff fe64 	bl	800bcc8 <_free_r>
 800c000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c002:	b111      	cbz	r1, 800c00a <_reclaim_reent+0x4a>
 800c004:	4620      	mov	r0, r4
 800c006:	f7ff fe5f 	bl	800bcc8 <_free_r>
 800c00a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c00c:	b111      	cbz	r1, 800c014 <_reclaim_reent+0x54>
 800c00e:	4620      	mov	r0, r4
 800c010:	f7ff fe5a 	bl	800bcc8 <_free_r>
 800c014:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c016:	b111      	cbz	r1, 800c01e <_reclaim_reent+0x5e>
 800c018:	4620      	mov	r0, r4
 800c01a:	f7ff fe55 	bl	800bcc8 <_free_r>
 800c01e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c020:	b111      	cbz	r1, 800c028 <_reclaim_reent+0x68>
 800c022:	4620      	mov	r0, r4
 800c024:	f7ff fe50 	bl	800bcc8 <_free_r>
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	b111      	cbz	r1, 800c032 <_reclaim_reent+0x72>
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff fe4b 	bl	800bcc8 <_free_r>
 800c032:	69a3      	ldr	r3, [r4, #24]
 800c034:	b1e3      	cbz	r3, 800c070 <_reclaim_reent+0xb0>
 800c036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c038:	4620      	mov	r0, r4
 800c03a:	4798      	blx	r3
 800c03c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c03e:	b1b9      	cbz	r1, 800c070 <_reclaim_reent+0xb0>
 800c040:	4620      	mov	r0, r4
 800c042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c046:	f7ff bfad 	b.w	800bfa4 <cleanup_glue>
 800c04a:	5949      	ldr	r1, [r1, r5]
 800c04c:	b941      	cbnz	r1, 800c060 <_reclaim_reent+0xa0>
 800c04e:	3504      	adds	r5, #4
 800c050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c052:	2d80      	cmp	r5, #128	; 0x80
 800c054:	68d9      	ldr	r1, [r3, #12]
 800c056:	d1f8      	bne.n	800c04a <_reclaim_reent+0x8a>
 800c058:	4620      	mov	r0, r4
 800c05a:	f7ff fe35 	bl	800bcc8 <_free_r>
 800c05e:	e7ba      	b.n	800bfd6 <_reclaim_reent+0x16>
 800c060:	680e      	ldr	r6, [r1, #0]
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fe30 	bl	800bcc8 <_free_r>
 800c068:	4631      	mov	r1, r6
 800c06a:	e7ef      	b.n	800c04c <_reclaim_reent+0x8c>
 800c06c:	2500      	movs	r5, #0
 800c06e:	e7ef      	b.n	800c050 <_reclaim_reent+0x90>
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	bf00      	nop
 800c074:	2000016c 	.word	0x2000016c

0800c078 <_sbrk_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d06      	ldr	r5, [pc, #24]	; (800c094 <_sbrk_r+0x1c>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	602b      	str	r3, [r5, #0]
 800c084:	f7f8 f886 	bl	8004194 <_sbrk>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_sbrk_r+0x1a>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_sbrk_r+0x1a>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	2000c064 	.word	0x2000c064

0800c098 <__sread>:
 800c098:	b510      	push	{r4, lr}
 800c09a:	460c      	mov	r4, r1
 800c09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a0:	f000 fdf4 	bl	800cc8c <_read_r>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	bfab      	itete	ge
 800c0a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c0ac:	181b      	addge	r3, r3, r0
 800c0ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0b2:	bfac      	ite	ge
 800c0b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0b6:	81a3      	strhlt	r3, [r4, #12]
 800c0b8:	bd10      	pop	{r4, pc}

0800c0ba <__swrite>:
 800c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	461f      	mov	r7, r3
 800c0c0:	898b      	ldrh	r3, [r1, #12]
 800c0c2:	05db      	lsls	r3, r3, #23
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	d505      	bpl.n	800c0d8 <__swrite+0x1e>
 800c0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f000 fa68 	bl	800c5a8 <_lseek_r>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ee:	f000 b909 	b.w	800c304 <_write_r>

0800c0f2 <__sseek>:
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fa:	f000 fa55 	bl	800c5a8 <_lseek_r>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	bf15      	itete	ne
 800c104:	6560      	strne	r0, [r4, #84]	; 0x54
 800c106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c10a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c10e:	81a3      	strheq	r3, [r4, #12]
 800c110:	bf18      	it	ne
 800c112:	81a3      	strhne	r3, [r4, #12]
 800c114:	bd10      	pop	{r4, pc}

0800c116 <__sclose>:
 800c116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11a:	f000 b973 	b.w	800c404 <_close_r>

0800c11e <strncmp>:
 800c11e:	b510      	push	{r4, lr}
 800c120:	b17a      	cbz	r2, 800c142 <strncmp+0x24>
 800c122:	4603      	mov	r3, r0
 800c124:	3901      	subs	r1, #1
 800c126:	1884      	adds	r4, r0, r2
 800c128:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c12c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c130:	4290      	cmp	r0, r2
 800c132:	d101      	bne.n	800c138 <strncmp+0x1a>
 800c134:	42a3      	cmp	r3, r4
 800c136:	d101      	bne.n	800c13c <strncmp+0x1e>
 800c138:	1a80      	subs	r0, r0, r2
 800c13a:	bd10      	pop	{r4, pc}
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d1f3      	bne.n	800c128 <strncmp+0xa>
 800c140:	e7fa      	b.n	800c138 <strncmp+0x1a>
 800c142:	4610      	mov	r0, r2
 800c144:	e7f9      	b.n	800c13a <strncmp+0x1c>
	...

0800c148 <_strtol_l.constprop.0>:
 800c148:	2b01      	cmp	r3, #1
 800c14a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14e:	d001      	beq.n	800c154 <_strtol_l.constprop.0+0xc>
 800c150:	2b24      	cmp	r3, #36	; 0x24
 800c152:	d906      	bls.n	800c162 <_strtol_l.constprop.0+0x1a>
 800c154:	f7ff fc7e 	bl	800ba54 <__errno>
 800c158:	2316      	movs	r3, #22
 800c15a:	6003      	str	r3, [r0, #0]
 800c15c:	2000      	movs	r0, #0
 800c15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c162:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c248 <_strtol_l.constprop.0+0x100>
 800c166:	460d      	mov	r5, r1
 800c168:	462e      	mov	r6, r5
 800c16a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c16e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c172:	f017 0708 	ands.w	r7, r7, #8
 800c176:	d1f7      	bne.n	800c168 <_strtol_l.constprop.0+0x20>
 800c178:	2c2d      	cmp	r4, #45	; 0x2d
 800c17a:	d132      	bne.n	800c1e2 <_strtol_l.constprop.0+0x9a>
 800c17c:	782c      	ldrb	r4, [r5, #0]
 800c17e:	2701      	movs	r7, #1
 800c180:	1cb5      	adds	r5, r6, #2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d05b      	beq.n	800c23e <_strtol_l.constprop.0+0xf6>
 800c186:	2b10      	cmp	r3, #16
 800c188:	d109      	bne.n	800c19e <_strtol_l.constprop.0+0x56>
 800c18a:	2c30      	cmp	r4, #48	; 0x30
 800c18c:	d107      	bne.n	800c19e <_strtol_l.constprop.0+0x56>
 800c18e:	782c      	ldrb	r4, [r5, #0]
 800c190:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c194:	2c58      	cmp	r4, #88	; 0x58
 800c196:	d14d      	bne.n	800c234 <_strtol_l.constprop.0+0xec>
 800c198:	786c      	ldrb	r4, [r5, #1]
 800c19a:	2310      	movs	r3, #16
 800c19c:	3502      	adds	r5, #2
 800c19e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c1a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1a6:	f04f 0c00 	mov.w	ip, #0
 800c1aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800c1ae:	4666      	mov	r6, ip
 800c1b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c1b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c1b8:	f1be 0f09 	cmp.w	lr, #9
 800c1bc:	d816      	bhi.n	800c1ec <_strtol_l.constprop.0+0xa4>
 800c1be:	4674      	mov	r4, lr
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	dd24      	ble.n	800c20e <_strtol_l.constprop.0+0xc6>
 800c1c4:	f1bc 0f00 	cmp.w	ip, #0
 800c1c8:	db1e      	blt.n	800c208 <_strtol_l.constprop.0+0xc0>
 800c1ca:	45b1      	cmp	r9, r6
 800c1cc:	d31c      	bcc.n	800c208 <_strtol_l.constprop.0+0xc0>
 800c1ce:	d101      	bne.n	800c1d4 <_strtol_l.constprop.0+0x8c>
 800c1d0:	45a2      	cmp	sl, r4
 800c1d2:	db19      	blt.n	800c208 <_strtol_l.constprop.0+0xc0>
 800c1d4:	fb06 4603 	mla	r6, r6, r3, r4
 800c1d8:	f04f 0c01 	mov.w	ip, #1
 800c1dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1e0:	e7e8      	b.n	800c1b4 <_strtol_l.constprop.0+0x6c>
 800c1e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c1e4:	bf04      	itt	eq
 800c1e6:	782c      	ldrbeq	r4, [r5, #0]
 800c1e8:	1cb5      	addeq	r5, r6, #2
 800c1ea:	e7ca      	b.n	800c182 <_strtol_l.constprop.0+0x3a>
 800c1ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c1f0:	f1be 0f19 	cmp.w	lr, #25
 800c1f4:	d801      	bhi.n	800c1fa <_strtol_l.constprop.0+0xb2>
 800c1f6:	3c37      	subs	r4, #55	; 0x37
 800c1f8:	e7e2      	b.n	800c1c0 <_strtol_l.constprop.0+0x78>
 800c1fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1fe:	f1be 0f19 	cmp.w	lr, #25
 800c202:	d804      	bhi.n	800c20e <_strtol_l.constprop.0+0xc6>
 800c204:	3c57      	subs	r4, #87	; 0x57
 800c206:	e7db      	b.n	800c1c0 <_strtol_l.constprop.0+0x78>
 800c208:	f04f 3cff 	mov.w	ip, #4294967295
 800c20c:	e7e6      	b.n	800c1dc <_strtol_l.constprop.0+0x94>
 800c20e:	f1bc 0f00 	cmp.w	ip, #0
 800c212:	da05      	bge.n	800c220 <_strtol_l.constprop.0+0xd8>
 800c214:	2322      	movs	r3, #34	; 0x22
 800c216:	6003      	str	r3, [r0, #0]
 800c218:	4646      	mov	r6, r8
 800c21a:	b942      	cbnz	r2, 800c22e <_strtol_l.constprop.0+0xe6>
 800c21c:	4630      	mov	r0, r6
 800c21e:	e79e      	b.n	800c15e <_strtol_l.constprop.0+0x16>
 800c220:	b107      	cbz	r7, 800c224 <_strtol_l.constprop.0+0xdc>
 800c222:	4276      	negs	r6, r6
 800c224:	2a00      	cmp	r2, #0
 800c226:	d0f9      	beq.n	800c21c <_strtol_l.constprop.0+0xd4>
 800c228:	f1bc 0f00 	cmp.w	ip, #0
 800c22c:	d000      	beq.n	800c230 <_strtol_l.constprop.0+0xe8>
 800c22e:	1e69      	subs	r1, r5, #1
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	e7f3      	b.n	800c21c <_strtol_l.constprop.0+0xd4>
 800c234:	2430      	movs	r4, #48	; 0x30
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1b1      	bne.n	800c19e <_strtol_l.constprop.0+0x56>
 800c23a:	2308      	movs	r3, #8
 800c23c:	e7af      	b.n	800c19e <_strtol_l.constprop.0+0x56>
 800c23e:	2c30      	cmp	r4, #48	; 0x30
 800c240:	d0a5      	beq.n	800c18e <_strtol_l.constprop.0+0x46>
 800c242:	230a      	movs	r3, #10
 800c244:	e7ab      	b.n	800c19e <_strtol_l.constprop.0+0x56>
 800c246:	bf00      	nop
 800c248:	0800d081 	.word	0x0800d081

0800c24c <strtol>:
 800c24c:	4613      	mov	r3, r2
 800c24e:	460a      	mov	r2, r1
 800c250:	4601      	mov	r1, r0
 800c252:	4802      	ldr	r0, [pc, #8]	; (800c25c <strtol+0x10>)
 800c254:	6800      	ldr	r0, [r0, #0]
 800c256:	f7ff bf77 	b.w	800c148 <_strtol_l.constprop.0>
 800c25a:	bf00      	nop
 800c25c:	2000016c 	.word	0x2000016c

0800c260 <__swbuf_r>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	460e      	mov	r6, r1
 800c264:	4614      	mov	r4, r2
 800c266:	4605      	mov	r5, r0
 800c268:	b118      	cbz	r0, 800c272 <__swbuf_r+0x12>
 800c26a:	6983      	ldr	r3, [r0, #24]
 800c26c:	b90b      	cbnz	r3, 800c272 <__swbuf_r+0x12>
 800c26e:	f7ff fc4f 	bl	800bb10 <__sinit>
 800c272:	4b21      	ldr	r3, [pc, #132]	; (800c2f8 <__swbuf_r+0x98>)
 800c274:	429c      	cmp	r4, r3
 800c276:	d12b      	bne.n	800c2d0 <__swbuf_r+0x70>
 800c278:	686c      	ldr	r4, [r5, #4]
 800c27a:	69a3      	ldr	r3, [r4, #24]
 800c27c:	60a3      	str	r3, [r4, #8]
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	071a      	lsls	r2, r3, #28
 800c282:	d52f      	bpl.n	800c2e4 <__swbuf_r+0x84>
 800c284:	6923      	ldr	r3, [r4, #16]
 800c286:	b36b      	cbz	r3, 800c2e4 <__swbuf_r+0x84>
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	6820      	ldr	r0, [r4, #0]
 800c28c:	1ac0      	subs	r0, r0, r3
 800c28e:	6963      	ldr	r3, [r4, #20]
 800c290:	b2f6      	uxtb	r6, r6
 800c292:	4283      	cmp	r3, r0
 800c294:	4637      	mov	r7, r6
 800c296:	dc04      	bgt.n	800c2a2 <__swbuf_r+0x42>
 800c298:	4621      	mov	r1, r4
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 f948 	bl	800c530 <_fflush_r>
 800c2a0:	bb30      	cbnz	r0, 800c2f0 <__swbuf_r+0x90>
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	60a3      	str	r3, [r4, #8]
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	6022      	str	r2, [r4, #0]
 800c2ae:	701e      	strb	r6, [r3, #0]
 800c2b0:	6963      	ldr	r3, [r4, #20]
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	4283      	cmp	r3, r0
 800c2b6:	d004      	beq.n	800c2c2 <__swbuf_r+0x62>
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	07db      	lsls	r3, r3, #31
 800c2bc:	d506      	bpl.n	800c2cc <__swbuf_r+0x6c>
 800c2be:	2e0a      	cmp	r6, #10
 800c2c0:	d104      	bne.n	800c2cc <__swbuf_r+0x6c>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f000 f933 	bl	800c530 <_fflush_r>
 800c2ca:	b988      	cbnz	r0, 800c2f0 <__swbuf_r+0x90>
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <__swbuf_r+0x9c>)
 800c2d2:	429c      	cmp	r4, r3
 800c2d4:	d101      	bne.n	800c2da <__swbuf_r+0x7a>
 800c2d6:	68ac      	ldr	r4, [r5, #8]
 800c2d8:	e7cf      	b.n	800c27a <__swbuf_r+0x1a>
 800c2da:	4b09      	ldr	r3, [pc, #36]	; (800c300 <__swbuf_r+0xa0>)
 800c2dc:	429c      	cmp	r4, r3
 800c2de:	bf08      	it	eq
 800c2e0:	68ec      	ldreq	r4, [r5, #12]
 800c2e2:	e7ca      	b.n	800c27a <__swbuf_r+0x1a>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 f81e 	bl	800c328 <__swsetup_r>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d0cb      	beq.n	800c288 <__swbuf_r+0x28>
 800c2f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c2f4:	e7ea      	b.n	800c2cc <__swbuf_r+0x6c>
 800c2f6:	bf00      	nop
 800c2f8:	0800d03c 	.word	0x0800d03c
 800c2fc:	0800d05c 	.word	0x0800d05c
 800c300:	0800d01c 	.word	0x0800d01c

0800c304 <_write_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	; (800c324 <_write_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f6 fd60 	bl	8002dd8 <_write>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_write_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_write_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	2000c064 	.word	0x2000c064

0800c328 <__swsetup_r>:
 800c328:	4b32      	ldr	r3, [pc, #200]	; (800c3f4 <__swsetup_r+0xcc>)
 800c32a:	b570      	push	{r4, r5, r6, lr}
 800c32c:	681d      	ldr	r5, [r3, #0]
 800c32e:	4606      	mov	r6, r0
 800c330:	460c      	mov	r4, r1
 800c332:	b125      	cbz	r5, 800c33e <__swsetup_r+0x16>
 800c334:	69ab      	ldr	r3, [r5, #24]
 800c336:	b913      	cbnz	r3, 800c33e <__swsetup_r+0x16>
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff fbe9 	bl	800bb10 <__sinit>
 800c33e:	4b2e      	ldr	r3, [pc, #184]	; (800c3f8 <__swsetup_r+0xd0>)
 800c340:	429c      	cmp	r4, r3
 800c342:	d10f      	bne.n	800c364 <__swsetup_r+0x3c>
 800c344:	686c      	ldr	r4, [r5, #4]
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c34c:	0719      	lsls	r1, r3, #28
 800c34e:	d42c      	bmi.n	800c3aa <__swsetup_r+0x82>
 800c350:	06dd      	lsls	r5, r3, #27
 800c352:	d411      	bmi.n	800c378 <__swsetup_r+0x50>
 800c354:	2309      	movs	r3, #9
 800c356:	6033      	str	r3, [r6, #0]
 800c358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	e03e      	b.n	800c3e2 <__swsetup_r+0xba>
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <__swsetup_r+0xd4>)
 800c366:	429c      	cmp	r4, r3
 800c368:	d101      	bne.n	800c36e <__swsetup_r+0x46>
 800c36a:	68ac      	ldr	r4, [r5, #8]
 800c36c:	e7eb      	b.n	800c346 <__swsetup_r+0x1e>
 800c36e:	4b24      	ldr	r3, [pc, #144]	; (800c400 <__swsetup_r+0xd8>)
 800c370:	429c      	cmp	r4, r3
 800c372:	bf08      	it	eq
 800c374:	68ec      	ldreq	r4, [r5, #12]
 800c376:	e7e6      	b.n	800c346 <__swsetup_r+0x1e>
 800c378:	0758      	lsls	r0, r3, #29
 800c37a:	d512      	bpl.n	800c3a2 <__swsetup_r+0x7a>
 800c37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c37e:	b141      	cbz	r1, 800c392 <__swsetup_r+0x6a>
 800c380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c384:	4299      	cmp	r1, r3
 800c386:	d002      	beq.n	800c38e <__swsetup_r+0x66>
 800c388:	4630      	mov	r0, r6
 800c38a:	f7ff fc9d 	bl	800bcc8 <_free_r>
 800c38e:	2300      	movs	r3, #0
 800c390:	6363      	str	r3, [r4, #52]	; 0x34
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c398:	81a3      	strh	r3, [r4, #12]
 800c39a:	2300      	movs	r3, #0
 800c39c:	6063      	str	r3, [r4, #4]
 800c39e:	6923      	ldr	r3, [r4, #16]
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	f043 0308 	orr.w	r3, r3, #8
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	b94b      	cbnz	r3, 800c3c2 <__swsetup_r+0x9a>
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3b8:	d003      	beq.n	800c3c2 <__swsetup_r+0x9a>
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f000 f92b 	bl	800c618 <__smakebuf_r>
 800c3c2:	89a0      	ldrh	r0, [r4, #12]
 800c3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3c8:	f010 0301 	ands.w	r3, r0, #1
 800c3cc:	d00a      	beq.n	800c3e4 <__swsetup_r+0xbc>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	6963      	ldr	r3, [r4, #20]
 800c3d4:	425b      	negs	r3, r3
 800c3d6:	61a3      	str	r3, [r4, #24]
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	b943      	cbnz	r3, 800c3ee <__swsetup_r+0xc6>
 800c3dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3e0:	d1ba      	bne.n	800c358 <__swsetup_r+0x30>
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	0781      	lsls	r1, r0, #30
 800c3e6:	bf58      	it	pl
 800c3e8:	6963      	ldrpl	r3, [r4, #20]
 800c3ea:	60a3      	str	r3, [r4, #8]
 800c3ec:	e7f4      	b.n	800c3d8 <__swsetup_r+0xb0>
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	e7f7      	b.n	800c3e2 <__swsetup_r+0xba>
 800c3f2:	bf00      	nop
 800c3f4:	2000016c 	.word	0x2000016c
 800c3f8:	0800d03c 	.word	0x0800d03c
 800c3fc:	0800d05c 	.word	0x0800d05c
 800c400:	0800d01c 	.word	0x0800d01c

0800c404 <_close_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d06      	ldr	r5, [pc, #24]	; (800c420 <_close_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	f7f7 fe8b 	bl	800412a <_close>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_close_r+0x1a>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_close_r+0x1a>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	2000c064 	.word	0x2000c064

0800c424 <__sflush_r>:
 800c424:	898a      	ldrh	r2, [r1, #12]
 800c426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42a:	4605      	mov	r5, r0
 800c42c:	0710      	lsls	r0, r2, #28
 800c42e:	460c      	mov	r4, r1
 800c430:	d458      	bmi.n	800c4e4 <__sflush_r+0xc0>
 800c432:	684b      	ldr	r3, [r1, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dc05      	bgt.n	800c444 <__sflush_r+0x20>
 800c438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dc02      	bgt.n	800c444 <__sflush_r+0x20>
 800c43e:	2000      	movs	r0, #0
 800c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c446:	2e00      	cmp	r6, #0
 800c448:	d0f9      	beq.n	800c43e <__sflush_r+0x1a>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c450:	682f      	ldr	r7, [r5, #0]
 800c452:	602b      	str	r3, [r5, #0]
 800c454:	d032      	beq.n	800c4bc <__sflush_r+0x98>
 800c456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	075a      	lsls	r2, r3, #29
 800c45c:	d505      	bpl.n	800c46a <__sflush_r+0x46>
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	1ac0      	subs	r0, r0, r3
 800c462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c464:	b10b      	cbz	r3, 800c46a <__sflush_r+0x46>
 800c466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c468:	1ac0      	subs	r0, r0, r3
 800c46a:	2300      	movs	r3, #0
 800c46c:	4602      	mov	r2, r0
 800c46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c470:	6a21      	ldr	r1, [r4, #32]
 800c472:	4628      	mov	r0, r5
 800c474:	47b0      	blx	r6
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	d106      	bne.n	800c48a <__sflush_r+0x66>
 800c47c:	6829      	ldr	r1, [r5, #0]
 800c47e:	291d      	cmp	r1, #29
 800c480:	d82c      	bhi.n	800c4dc <__sflush_r+0xb8>
 800c482:	4a2a      	ldr	r2, [pc, #168]	; (800c52c <__sflush_r+0x108>)
 800c484:	40ca      	lsrs	r2, r1
 800c486:	07d6      	lsls	r6, r2, #31
 800c488:	d528      	bpl.n	800c4dc <__sflush_r+0xb8>
 800c48a:	2200      	movs	r2, #0
 800c48c:	6062      	str	r2, [r4, #4]
 800c48e:	04d9      	lsls	r1, r3, #19
 800c490:	6922      	ldr	r2, [r4, #16]
 800c492:	6022      	str	r2, [r4, #0]
 800c494:	d504      	bpl.n	800c4a0 <__sflush_r+0x7c>
 800c496:	1c42      	adds	r2, r0, #1
 800c498:	d101      	bne.n	800c49e <__sflush_r+0x7a>
 800c49a:	682b      	ldr	r3, [r5, #0]
 800c49c:	b903      	cbnz	r3, 800c4a0 <__sflush_r+0x7c>
 800c49e:	6560      	str	r0, [r4, #84]	; 0x54
 800c4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4a2:	602f      	str	r7, [r5, #0]
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	d0ca      	beq.n	800c43e <__sflush_r+0x1a>
 800c4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ac:	4299      	cmp	r1, r3
 800c4ae:	d002      	beq.n	800c4b6 <__sflush_r+0x92>
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fc09 	bl	800bcc8 <_free_r>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ba:	e7c1      	b.n	800c440 <__sflush_r+0x1c>
 800c4bc:	6a21      	ldr	r1, [r4, #32]
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	47b0      	blx	r6
 800c4c4:	1c41      	adds	r1, r0, #1
 800c4c6:	d1c7      	bne.n	800c458 <__sflush_r+0x34>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0c4      	beq.n	800c458 <__sflush_r+0x34>
 800c4ce:	2b1d      	cmp	r3, #29
 800c4d0:	d001      	beq.n	800c4d6 <__sflush_r+0xb2>
 800c4d2:	2b16      	cmp	r3, #22
 800c4d4:	d101      	bne.n	800c4da <__sflush_r+0xb6>
 800c4d6:	602f      	str	r7, [r5, #0]
 800c4d8:	e7b1      	b.n	800c43e <__sflush_r+0x1a>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	e7ad      	b.n	800c440 <__sflush_r+0x1c>
 800c4e4:	690f      	ldr	r7, [r1, #16]
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d0a9      	beq.n	800c43e <__sflush_r+0x1a>
 800c4ea:	0793      	lsls	r3, r2, #30
 800c4ec:	680e      	ldr	r6, [r1, #0]
 800c4ee:	bf08      	it	eq
 800c4f0:	694b      	ldreq	r3, [r1, #20]
 800c4f2:	600f      	str	r7, [r1, #0]
 800c4f4:	bf18      	it	ne
 800c4f6:	2300      	movne	r3, #0
 800c4f8:	eba6 0807 	sub.w	r8, r6, r7
 800c4fc:	608b      	str	r3, [r1, #8]
 800c4fe:	f1b8 0f00 	cmp.w	r8, #0
 800c502:	dd9c      	ble.n	800c43e <__sflush_r+0x1a>
 800c504:	6a21      	ldr	r1, [r4, #32]
 800c506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c508:	4643      	mov	r3, r8
 800c50a:	463a      	mov	r2, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	47b0      	blx	r6
 800c510:	2800      	cmp	r0, #0
 800c512:	dc06      	bgt.n	800c522 <__sflush_r+0xfe>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	e78e      	b.n	800c440 <__sflush_r+0x1c>
 800c522:	4407      	add	r7, r0
 800c524:	eba8 0800 	sub.w	r8, r8, r0
 800c528:	e7e9      	b.n	800c4fe <__sflush_r+0xda>
 800c52a:	bf00      	nop
 800c52c:	20400001 	.word	0x20400001

0800c530 <_fflush_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	690b      	ldr	r3, [r1, #16]
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b913      	cbnz	r3, 800c540 <_fflush_r+0x10>
 800c53a:	2500      	movs	r5, #0
 800c53c:	4628      	mov	r0, r5
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	b118      	cbz	r0, 800c54a <_fflush_r+0x1a>
 800c542:	6983      	ldr	r3, [r0, #24]
 800c544:	b90b      	cbnz	r3, 800c54a <_fflush_r+0x1a>
 800c546:	f7ff fae3 	bl	800bb10 <__sinit>
 800c54a:	4b14      	ldr	r3, [pc, #80]	; (800c59c <_fflush_r+0x6c>)
 800c54c:	429c      	cmp	r4, r3
 800c54e:	d11b      	bne.n	800c588 <_fflush_r+0x58>
 800c550:	686c      	ldr	r4, [r5, #4]
 800c552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0ef      	beq.n	800c53a <_fflush_r+0xa>
 800c55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c55c:	07d0      	lsls	r0, r2, #31
 800c55e:	d404      	bmi.n	800c56a <_fflush_r+0x3a>
 800c560:	0599      	lsls	r1, r3, #22
 800c562:	d402      	bmi.n	800c56a <_fflush_r+0x3a>
 800c564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c566:	f7ff fb96 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800c56a:	4628      	mov	r0, r5
 800c56c:	4621      	mov	r1, r4
 800c56e:	f7ff ff59 	bl	800c424 <__sflush_r>
 800c572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c574:	07da      	lsls	r2, r3, #31
 800c576:	4605      	mov	r5, r0
 800c578:	d4e0      	bmi.n	800c53c <_fflush_r+0xc>
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	059b      	lsls	r3, r3, #22
 800c57e:	d4dd      	bmi.n	800c53c <_fflush_r+0xc>
 800c580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c582:	f7ff fb89 	bl	800bc98 <__retarget_lock_release_recursive>
 800c586:	e7d9      	b.n	800c53c <_fflush_r+0xc>
 800c588:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <_fflush_r+0x70>)
 800c58a:	429c      	cmp	r4, r3
 800c58c:	d101      	bne.n	800c592 <_fflush_r+0x62>
 800c58e:	68ac      	ldr	r4, [r5, #8]
 800c590:	e7df      	b.n	800c552 <_fflush_r+0x22>
 800c592:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <_fflush_r+0x74>)
 800c594:	429c      	cmp	r4, r3
 800c596:	bf08      	it	eq
 800c598:	68ec      	ldreq	r4, [r5, #12]
 800c59a:	e7da      	b.n	800c552 <_fflush_r+0x22>
 800c59c:	0800d03c 	.word	0x0800d03c
 800c5a0:	0800d05c 	.word	0x0800d05c
 800c5a4:	0800d01c 	.word	0x0800d01c

0800c5a8 <_lseek_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4d07      	ldr	r5, [pc, #28]	; (800c5c8 <_lseek_r+0x20>)
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	4608      	mov	r0, r1
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	602a      	str	r2, [r5, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f7f7 fdde 	bl	8004178 <_lseek>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_lseek_r+0x1e>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_lseek_r+0x1e>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	2000c064 	.word	0x2000c064

0800c5cc <__swhatbuf_r>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	460e      	mov	r6, r1
 800c5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	b096      	sub	sp, #88	; 0x58
 800c5d8:	4614      	mov	r4, r2
 800c5da:	461d      	mov	r5, r3
 800c5dc:	da08      	bge.n	800c5f0 <__swhatbuf_r+0x24>
 800c5de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	602a      	str	r2, [r5, #0]
 800c5e6:	061a      	lsls	r2, r3, #24
 800c5e8:	d410      	bmi.n	800c60c <__swhatbuf_r+0x40>
 800c5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ee:	e00e      	b.n	800c60e <__swhatbuf_r+0x42>
 800c5f0:	466a      	mov	r2, sp
 800c5f2:	f000 fb5d 	bl	800ccb0 <_fstat_r>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	dbf1      	blt.n	800c5de <__swhatbuf_r+0x12>
 800c5fa:	9a01      	ldr	r2, [sp, #4]
 800c5fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c600:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c604:	425a      	negs	r2, r3
 800c606:	415a      	adcs	r2, r3
 800c608:	602a      	str	r2, [r5, #0]
 800c60a:	e7ee      	b.n	800c5ea <__swhatbuf_r+0x1e>
 800c60c:	2340      	movs	r3, #64	; 0x40
 800c60e:	2000      	movs	r0, #0
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	b016      	add	sp, #88	; 0x58
 800c614:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c618 <__smakebuf_r>:
 800c618:	898b      	ldrh	r3, [r1, #12]
 800c61a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c61c:	079d      	lsls	r5, r3, #30
 800c61e:	4606      	mov	r6, r0
 800c620:	460c      	mov	r4, r1
 800c622:	d507      	bpl.n	800c634 <__smakebuf_r+0x1c>
 800c624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	6123      	str	r3, [r4, #16]
 800c62c:	2301      	movs	r3, #1
 800c62e:	6163      	str	r3, [r4, #20]
 800c630:	b002      	add	sp, #8
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	ab01      	add	r3, sp, #4
 800c636:	466a      	mov	r2, sp
 800c638:	f7ff ffc8 	bl	800c5cc <__swhatbuf_r>
 800c63c:	9900      	ldr	r1, [sp, #0]
 800c63e:	4605      	mov	r5, r0
 800c640:	4630      	mov	r0, r6
 800c642:	f7ff fbad 	bl	800bda0 <_malloc_r>
 800c646:	b948      	cbnz	r0, 800c65c <__smakebuf_r+0x44>
 800c648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64c:	059a      	lsls	r2, r3, #22
 800c64e:	d4ef      	bmi.n	800c630 <__smakebuf_r+0x18>
 800c650:	f023 0303 	bic.w	r3, r3, #3
 800c654:	f043 0302 	orr.w	r3, r3, #2
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	e7e3      	b.n	800c624 <__smakebuf_r+0xc>
 800c65c:	4b0d      	ldr	r3, [pc, #52]	; (800c694 <__smakebuf_r+0x7c>)
 800c65e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	6020      	str	r0, [r4, #0]
 800c664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c668:	81a3      	strh	r3, [r4, #12]
 800c66a:	9b00      	ldr	r3, [sp, #0]
 800c66c:	6163      	str	r3, [r4, #20]
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	6120      	str	r0, [r4, #16]
 800c672:	b15b      	cbz	r3, 800c68c <__smakebuf_r+0x74>
 800c674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c678:	4630      	mov	r0, r6
 800c67a:	f000 fb2b 	bl	800ccd4 <_isatty_r>
 800c67e:	b128      	cbz	r0, 800c68c <__smakebuf_r+0x74>
 800c680:	89a3      	ldrh	r3, [r4, #12]
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	89a0      	ldrh	r0, [r4, #12]
 800c68e:	4305      	orrs	r5, r0
 800c690:	81a5      	strh	r5, [r4, #12]
 800c692:	e7cd      	b.n	800c630 <__smakebuf_r+0x18>
 800c694:	0800baa9 	.word	0x0800baa9

0800c698 <__malloc_lock>:
 800c698:	4801      	ldr	r0, [pc, #4]	; (800c6a0 <__malloc_lock+0x8>)
 800c69a:	f7ff bafc 	b.w	800bc96 <__retarget_lock_acquire_recursive>
 800c69e:	bf00      	nop
 800c6a0:	2000c058 	.word	0x2000c058

0800c6a4 <__malloc_unlock>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	; (800c6ac <__malloc_unlock+0x8>)
 800c6a6:	f7ff baf7 	b.w	800bc98 <__retarget_lock_release_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	2000c058 	.word	0x2000c058

0800c6b0 <__sfputc_r>:
 800c6b0:	6893      	ldr	r3, [r2, #8]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	b410      	push	{r4}
 800c6b8:	6093      	str	r3, [r2, #8]
 800c6ba:	da08      	bge.n	800c6ce <__sfputc_r+0x1e>
 800c6bc:	6994      	ldr	r4, [r2, #24]
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	db01      	blt.n	800c6c6 <__sfputc_r+0x16>
 800c6c2:	290a      	cmp	r1, #10
 800c6c4:	d103      	bne.n	800c6ce <__sfputc_r+0x1e>
 800c6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ca:	f7ff bdc9 	b.w	800c260 <__swbuf_r>
 800c6ce:	6813      	ldr	r3, [r2, #0]
 800c6d0:	1c58      	adds	r0, r3, #1
 800c6d2:	6010      	str	r0, [r2, #0]
 800c6d4:	7019      	strb	r1, [r3, #0]
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <__sfputs_r>:
 800c6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	460f      	mov	r7, r1
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	18d5      	adds	r5, r2, r3
 800c6e8:	42ac      	cmp	r4, r5
 800c6ea:	d101      	bne.n	800c6f0 <__sfputs_r+0x12>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e007      	b.n	800c700 <__sfputs_r+0x22>
 800c6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f4:	463a      	mov	r2, r7
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff ffda 	bl	800c6b0 <__sfputc_r>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d1f3      	bne.n	800c6e8 <__sfputs_r+0xa>
 800c700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c704 <_vfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	460d      	mov	r5, r1
 800c70a:	b09d      	sub	sp, #116	; 0x74
 800c70c:	4614      	mov	r4, r2
 800c70e:	4698      	mov	r8, r3
 800c710:	4606      	mov	r6, r0
 800c712:	b118      	cbz	r0, 800c71c <_vfiprintf_r+0x18>
 800c714:	6983      	ldr	r3, [r0, #24]
 800c716:	b90b      	cbnz	r3, 800c71c <_vfiprintf_r+0x18>
 800c718:	f7ff f9fa 	bl	800bb10 <__sinit>
 800c71c:	4b89      	ldr	r3, [pc, #548]	; (800c944 <_vfiprintf_r+0x240>)
 800c71e:	429d      	cmp	r5, r3
 800c720:	d11b      	bne.n	800c75a <_vfiprintf_r+0x56>
 800c722:	6875      	ldr	r5, [r6, #4]
 800c724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c726:	07d9      	lsls	r1, r3, #31
 800c728:	d405      	bmi.n	800c736 <_vfiprintf_r+0x32>
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	059a      	lsls	r2, r3, #22
 800c72e:	d402      	bmi.n	800c736 <_vfiprintf_r+0x32>
 800c730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c732:	f7ff fab0 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	071b      	lsls	r3, r3, #28
 800c73a:	d501      	bpl.n	800c740 <_vfiprintf_r+0x3c>
 800c73c:	692b      	ldr	r3, [r5, #16]
 800c73e:	b9eb      	cbnz	r3, 800c77c <_vfiprintf_r+0x78>
 800c740:	4629      	mov	r1, r5
 800c742:	4630      	mov	r0, r6
 800c744:	f7ff fdf0 	bl	800c328 <__swsetup_r>
 800c748:	b1c0      	cbz	r0, 800c77c <_vfiprintf_r+0x78>
 800c74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74c:	07dc      	lsls	r4, r3, #31
 800c74e:	d50e      	bpl.n	800c76e <_vfiprintf_r+0x6a>
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	b01d      	add	sp, #116	; 0x74
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	4b7b      	ldr	r3, [pc, #492]	; (800c948 <_vfiprintf_r+0x244>)
 800c75c:	429d      	cmp	r5, r3
 800c75e:	d101      	bne.n	800c764 <_vfiprintf_r+0x60>
 800c760:	68b5      	ldr	r5, [r6, #8]
 800c762:	e7df      	b.n	800c724 <_vfiprintf_r+0x20>
 800c764:	4b79      	ldr	r3, [pc, #484]	; (800c94c <_vfiprintf_r+0x248>)
 800c766:	429d      	cmp	r5, r3
 800c768:	bf08      	it	eq
 800c76a:	68f5      	ldreq	r5, [r6, #12]
 800c76c:	e7da      	b.n	800c724 <_vfiprintf_r+0x20>
 800c76e:	89ab      	ldrh	r3, [r5, #12]
 800c770:	0598      	lsls	r0, r3, #22
 800c772:	d4ed      	bmi.n	800c750 <_vfiprintf_r+0x4c>
 800c774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c776:	f7ff fa8f 	bl	800bc98 <__retarget_lock_release_recursive>
 800c77a:	e7e9      	b.n	800c750 <_vfiprintf_r+0x4c>
 800c77c:	2300      	movs	r3, #0
 800c77e:	9309      	str	r3, [sp, #36]	; 0x24
 800c780:	2320      	movs	r3, #32
 800c782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c786:	f8cd 800c 	str.w	r8, [sp, #12]
 800c78a:	2330      	movs	r3, #48	; 0x30
 800c78c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c950 <_vfiprintf_r+0x24c>
 800c790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c794:	f04f 0901 	mov.w	r9, #1
 800c798:	4623      	mov	r3, r4
 800c79a:	469a      	mov	sl, r3
 800c79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a0:	b10a      	cbz	r2, 800c7a6 <_vfiprintf_r+0xa2>
 800c7a2:	2a25      	cmp	r2, #37	; 0x25
 800c7a4:	d1f9      	bne.n	800c79a <_vfiprintf_r+0x96>
 800c7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7aa:	d00b      	beq.n	800c7c4 <_vfiprintf_r+0xc0>
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff ff93 	bl	800c6de <__sfputs_r>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f000 80aa 	beq.w	800c912 <_vfiprintf_r+0x20e>
 800c7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c0:	445a      	add	r2, fp
 800c7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80a2 	beq.w	800c912 <_vfiprintf_r+0x20e>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d8:	f10a 0a01 	add.w	sl, sl, #1
 800c7dc:	9304      	str	r3, [sp, #16]
 800c7de:	9307      	str	r3, [sp, #28]
 800c7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7e6:	4654      	mov	r4, sl
 800c7e8:	2205      	movs	r2, #5
 800c7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ee:	4858      	ldr	r0, [pc, #352]	; (800c950 <_vfiprintf_r+0x24c>)
 800c7f0:	f7f3 fcee 	bl	80001d0 <memchr>
 800c7f4:	9a04      	ldr	r2, [sp, #16]
 800c7f6:	b9d8      	cbnz	r0, 800c830 <_vfiprintf_r+0x12c>
 800c7f8:	06d1      	lsls	r1, r2, #27
 800c7fa:	bf44      	itt	mi
 800c7fc:	2320      	movmi	r3, #32
 800c7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c802:	0713      	lsls	r3, r2, #28
 800c804:	bf44      	itt	mi
 800c806:	232b      	movmi	r3, #43	; 0x2b
 800c808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80c:	f89a 3000 	ldrb.w	r3, [sl]
 800c810:	2b2a      	cmp	r3, #42	; 0x2a
 800c812:	d015      	beq.n	800c840 <_vfiprintf_r+0x13c>
 800c814:	9a07      	ldr	r2, [sp, #28]
 800c816:	4654      	mov	r4, sl
 800c818:	2000      	movs	r0, #0
 800c81a:	f04f 0c0a 	mov.w	ip, #10
 800c81e:	4621      	mov	r1, r4
 800c820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c824:	3b30      	subs	r3, #48	; 0x30
 800c826:	2b09      	cmp	r3, #9
 800c828:	d94e      	bls.n	800c8c8 <_vfiprintf_r+0x1c4>
 800c82a:	b1b0      	cbz	r0, 800c85a <_vfiprintf_r+0x156>
 800c82c:	9207      	str	r2, [sp, #28]
 800c82e:	e014      	b.n	800c85a <_vfiprintf_r+0x156>
 800c830:	eba0 0308 	sub.w	r3, r0, r8
 800c834:	fa09 f303 	lsl.w	r3, r9, r3
 800c838:	4313      	orrs	r3, r2
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	46a2      	mov	sl, r4
 800c83e:	e7d2      	b.n	800c7e6 <_vfiprintf_r+0xe2>
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	1d19      	adds	r1, r3, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	9103      	str	r1, [sp, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bfbb      	ittet	lt
 800c84c:	425b      	neglt	r3, r3
 800c84e:	f042 0202 	orrlt.w	r2, r2, #2
 800c852:	9307      	strge	r3, [sp, #28]
 800c854:	9307      	strlt	r3, [sp, #28]
 800c856:	bfb8      	it	lt
 800c858:	9204      	strlt	r2, [sp, #16]
 800c85a:	7823      	ldrb	r3, [r4, #0]
 800c85c:	2b2e      	cmp	r3, #46	; 0x2e
 800c85e:	d10c      	bne.n	800c87a <_vfiprintf_r+0x176>
 800c860:	7863      	ldrb	r3, [r4, #1]
 800c862:	2b2a      	cmp	r3, #42	; 0x2a
 800c864:	d135      	bne.n	800c8d2 <_vfiprintf_r+0x1ce>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	1d1a      	adds	r2, r3, #4
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	9203      	str	r2, [sp, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfb8      	it	lt
 800c872:	f04f 33ff 	movlt.w	r3, #4294967295
 800c876:	3402      	adds	r4, #2
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c960 <_vfiprintf_r+0x25c>
 800c87e:	7821      	ldrb	r1, [r4, #0]
 800c880:	2203      	movs	r2, #3
 800c882:	4650      	mov	r0, sl
 800c884:	f7f3 fca4 	bl	80001d0 <memchr>
 800c888:	b140      	cbz	r0, 800c89c <_vfiprintf_r+0x198>
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	eba0 000a 	sub.w	r0, r0, sl
 800c890:	fa03 f000 	lsl.w	r0, r3, r0
 800c894:	9b04      	ldr	r3, [sp, #16]
 800c896:	4303      	orrs	r3, r0
 800c898:	3401      	adds	r4, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	482c      	ldr	r0, [pc, #176]	; (800c954 <_vfiprintf_r+0x250>)
 800c8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8a6:	2206      	movs	r2, #6
 800c8a8:	f7f3 fc92 	bl	80001d0 <memchr>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d03f      	beq.n	800c930 <_vfiprintf_r+0x22c>
 800c8b0:	4b29      	ldr	r3, [pc, #164]	; (800c958 <_vfiprintf_r+0x254>)
 800c8b2:	bb1b      	cbnz	r3, 800c8fc <_vfiprintf_r+0x1f8>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	3307      	adds	r3, #7
 800c8b8:	f023 0307 	bic.w	r3, r3, #7
 800c8bc:	3308      	adds	r3, #8
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c2:	443b      	add	r3, r7
 800c8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c6:	e767      	b.n	800c798 <_vfiprintf_r+0x94>
 800c8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7a5      	b.n	800c81e <_vfiprintf_r+0x11a>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f04f 0c0a 	mov.w	ip, #10
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e4:	3a30      	subs	r2, #48	; 0x30
 800c8e6:	2a09      	cmp	r2, #9
 800c8e8:	d903      	bls.n	800c8f2 <_vfiprintf_r+0x1ee>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0c5      	beq.n	800c87a <_vfiprintf_r+0x176>
 800c8ee:	9105      	str	r1, [sp, #20]
 800c8f0:	e7c3      	b.n	800c87a <_vfiprintf_r+0x176>
 800c8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e7f0      	b.n	800c8de <_vfiprintf_r+0x1da>
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462a      	mov	r2, r5
 800c902:	4b16      	ldr	r3, [pc, #88]	; (800c95c <_vfiprintf_r+0x258>)
 800c904:	a904      	add	r1, sp, #16
 800c906:	4630      	mov	r0, r6
 800c908:	f3af 8000 	nop.w
 800c90c:	4607      	mov	r7, r0
 800c90e:	1c78      	adds	r0, r7, #1
 800c910:	d1d6      	bne.n	800c8c0 <_vfiprintf_r+0x1bc>
 800c912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c914:	07d9      	lsls	r1, r3, #31
 800c916:	d405      	bmi.n	800c924 <_vfiprintf_r+0x220>
 800c918:	89ab      	ldrh	r3, [r5, #12]
 800c91a:	059a      	lsls	r2, r3, #22
 800c91c:	d402      	bmi.n	800c924 <_vfiprintf_r+0x220>
 800c91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c920:	f7ff f9ba 	bl	800bc98 <__retarget_lock_release_recursive>
 800c924:	89ab      	ldrh	r3, [r5, #12]
 800c926:	065b      	lsls	r3, r3, #25
 800c928:	f53f af12 	bmi.w	800c750 <_vfiprintf_r+0x4c>
 800c92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c92e:	e711      	b.n	800c754 <_vfiprintf_r+0x50>
 800c930:	ab03      	add	r3, sp, #12
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	462a      	mov	r2, r5
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <_vfiprintf_r+0x258>)
 800c938:	a904      	add	r1, sp, #16
 800c93a:	4630      	mov	r0, r6
 800c93c:	f000 f880 	bl	800ca40 <_printf_i>
 800c940:	e7e4      	b.n	800c90c <_vfiprintf_r+0x208>
 800c942:	bf00      	nop
 800c944:	0800d03c 	.word	0x0800d03c
 800c948:	0800d05c 	.word	0x0800d05c
 800c94c:	0800d01c 	.word	0x0800d01c
 800c950:	0800d181 	.word	0x0800d181
 800c954:	0800d18b 	.word	0x0800d18b
 800c958:	00000000 	.word	0x00000000
 800c95c:	0800c6df 	.word	0x0800c6df
 800c960:	0800d187 	.word	0x0800d187

0800c964 <_printf_common>:
 800c964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c968:	4616      	mov	r6, r2
 800c96a:	4699      	mov	r9, r3
 800c96c:	688a      	ldr	r2, [r1, #8]
 800c96e:	690b      	ldr	r3, [r1, #16]
 800c970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c974:	4293      	cmp	r3, r2
 800c976:	bfb8      	it	lt
 800c978:	4613      	movlt	r3, r2
 800c97a:	6033      	str	r3, [r6, #0]
 800c97c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c980:	4607      	mov	r7, r0
 800c982:	460c      	mov	r4, r1
 800c984:	b10a      	cbz	r2, 800c98a <_printf_common+0x26>
 800c986:	3301      	adds	r3, #1
 800c988:	6033      	str	r3, [r6, #0]
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	0699      	lsls	r1, r3, #26
 800c98e:	bf42      	ittt	mi
 800c990:	6833      	ldrmi	r3, [r6, #0]
 800c992:	3302      	addmi	r3, #2
 800c994:	6033      	strmi	r3, [r6, #0]
 800c996:	6825      	ldr	r5, [r4, #0]
 800c998:	f015 0506 	ands.w	r5, r5, #6
 800c99c:	d106      	bne.n	800c9ac <_printf_common+0x48>
 800c99e:	f104 0a19 	add.w	sl, r4, #25
 800c9a2:	68e3      	ldr	r3, [r4, #12]
 800c9a4:	6832      	ldr	r2, [r6, #0]
 800c9a6:	1a9b      	subs	r3, r3, r2
 800c9a8:	42ab      	cmp	r3, r5
 800c9aa:	dc26      	bgt.n	800c9fa <_printf_common+0x96>
 800c9ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9b0:	1e13      	subs	r3, r2, #0
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	bf18      	it	ne
 800c9b6:	2301      	movne	r3, #1
 800c9b8:	0692      	lsls	r2, r2, #26
 800c9ba:	d42b      	bmi.n	800ca14 <_printf_common+0xb0>
 800c9bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	47c0      	blx	r8
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	d01e      	beq.n	800ca08 <_printf_common+0xa4>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	68e5      	ldr	r5, [r4, #12]
 800c9ce:	6832      	ldr	r2, [r6, #0]
 800c9d0:	f003 0306 	and.w	r3, r3, #6
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	bf08      	it	eq
 800c9d8:	1aad      	subeq	r5, r5, r2
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	bf0c      	ite	eq
 800c9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9e4:	2500      	movne	r5, #0
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	bfc4      	itt	gt
 800c9ea:	1a9b      	subgt	r3, r3, r2
 800c9ec:	18ed      	addgt	r5, r5, r3
 800c9ee:	2600      	movs	r6, #0
 800c9f0:	341a      	adds	r4, #26
 800c9f2:	42b5      	cmp	r5, r6
 800c9f4:	d11a      	bne.n	800ca2c <_printf_common+0xc8>
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	e008      	b.n	800ca0c <_printf_common+0xa8>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	4652      	mov	r2, sl
 800c9fe:	4649      	mov	r1, r9
 800ca00:	4638      	mov	r0, r7
 800ca02:	47c0      	blx	r8
 800ca04:	3001      	adds	r0, #1
 800ca06:	d103      	bne.n	800ca10 <_printf_common+0xac>
 800ca08:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca10:	3501      	adds	r5, #1
 800ca12:	e7c6      	b.n	800c9a2 <_printf_common+0x3e>
 800ca14:	18e1      	adds	r1, r4, r3
 800ca16:	1c5a      	adds	r2, r3, #1
 800ca18:	2030      	movs	r0, #48	; 0x30
 800ca1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca1e:	4422      	add	r2, r4
 800ca20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca28:	3302      	adds	r3, #2
 800ca2a:	e7c7      	b.n	800c9bc <_printf_common+0x58>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	4622      	mov	r2, r4
 800ca30:	4649      	mov	r1, r9
 800ca32:	4638      	mov	r0, r7
 800ca34:	47c0      	blx	r8
 800ca36:	3001      	adds	r0, #1
 800ca38:	d0e6      	beq.n	800ca08 <_printf_common+0xa4>
 800ca3a:	3601      	adds	r6, #1
 800ca3c:	e7d9      	b.n	800c9f2 <_printf_common+0x8e>
	...

0800ca40 <_printf_i>:
 800ca40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca44:	7e0f      	ldrb	r7, [r1, #24]
 800ca46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca48:	2f78      	cmp	r7, #120	; 0x78
 800ca4a:	4691      	mov	r9, r2
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	460c      	mov	r4, r1
 800ca50:	469a      	mov	sl, r3
 800ca52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca56:	d807      	bhi.n	800ca68 <_printf_i+0x28>
 800ca58:	2f62      	cmp	r7, #98	; 0x62
 800ca5a:	d80a      	bhi.n	800ca72 <_printf_i+0x32>
 800ca5c:	2f00      	cmp	r7, #0
 800ca5e:	f000 80d8 	beq.w	800cc12 <_printf_i+0x1d2>
 800ca62:	2f58      	cmp	r7, #88	; 0x58
 800ca64:	f000 80a3 	beq.w	800cbae <_printf_i+0x16e>
 800ca68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca70:	e03a      	b.n	800cae8 <_printf_i+0xa8>
 800ca72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca76:	2b15      	cmp	r3, #21
 800ca78:	d8f6      	bhi.n	800ca68 <_printf_i+0x28>
 800ca7a:	a101      	add	r1, pc, #4	; (adr r1, 800ca80 <_printf_i+0x40>)
 800ca7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca80:	0800cad9 	.word	0x0800cad9
 800ca84:	0800caed 	.word	0x0800caed
 800ca88:	0800ca69 	.word	0x0800ca69
 800ca8c:	0800ca69 	.word	0x0800ca69
 800ca90:	0800ca69 	.word	0x0800ca69
 800ca94:	0800ca69 	.word	0x0800ca69
 800ca98:	0800caed 	.word	0x0800caed
 800ca9c:	0800ca69 	.word	0x0800ca69
 800caa0:	0800ca69 	.word	0x0800ca69
 800caa4:	0800ca69 	.word	0x0800ca69
 800caa8:	0800ca69 	.word	0x0800ca69
 800caac:	0800cbf9 	.word	0x0800cbf9
 800cab0:	0800cb1d 	.word	0x0800cb1d
 800cab4:	0800cbdb 	.word	0x0800cbdb
 800cab8:	0800ca69 	.word	0x0800ca69
 800cabc:	0800ca69 	.word	0x0800ca69
 800cac0:	0800cc1b 	.word	0x0800cc1b
 800cac4:	0800ca69 	.word	0x0800ca69
 800cac8:	0800cb1d 	.word	0x0800cb1d
 800cacc:	0800ca69 	.word	0x0800ca69
 800cad0:	0800ca69 	.word	0x0800ca69
 800cad4:	0800cbe3 	.word	0x0800cbe3
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	1d1a      	adds	r2, r3, #4
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	602a      	str	r2, [r5, #0]
 800cae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cae8:	2301      	movs	r3, #1
 800caea:	e0a3      	b.n	800cc34 <_printf_i+0x1f4>
 800caec:	6820      	ldr	r0, [r4, #0]
 800caee:	6829      	ldr	r1, [r5, #0]
 800caf0:	0606      	lsls	r6, r0, #24
 800caf2:	f101 0304 	add.w	r3, r1, #4
 800caf6:	d50a      	bpl.n	800cb0e <_printf_i+0xce>
 800caf8:	680e      	ldr	r6, [r1, #0]
 800cafa:	602b      	str	r3, [r5, #0]
 800cafc:	2e00      	cmp	r6, #0
 800cafe:	da03      	bge.n	800cb08 <_printf_i+0xc8>
 800cb00:	232d      	movs	r3, #45	; 0x2d
 800cb02:	4276      	negs	r6, r6
 800cb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb08:	485e      	ldr	r0, [pc, #376]	; (800cc84 <_printf_i+0x244>)
 800cb0a:	230a      	movs	r3, #10
 800cb0c:	e019      	b.n	800cb42 <_printf_i+0x102>
 800cb0e:	680e      	ldr	r6, [r1, #0]
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb16:	bf18      	it	ne
 800cb18:	b236      	sxthne	r6, r6
 800cb1a:	e7ef      	b.n	800cafc <_printf_i+0xbc>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	1d19      	adds	r1, r3, #4
 800cb22:	6029      	str	r1, [r5, #0]
 800cb24:	0601      	lsls	r1, r0, #24
 800cb26:	d501      	bpl.n	800cb2c <_printf_i+0xec>
 800cb28:	681e      	ldr	r6, [r3, #0]
 800cb2a:	e002      	b.n	800cb32 <_printf_i+0xf2>
 800cb2c:	0646      	lsls	r6, r0, #25
 800cb2e:	d5fb      	bpl.n	800cb28 <_printf_i+0xe8>
 800cb30:	881e      	ldrh	r6, [r3, #0]
 800cb32:	4854      	ldr	r0, [pc, #336]	; (800cc84 <_printf_i+0x244>)
 800cb34:	2f6f      	cmp	r7, #111	; 0x6f
 800cb36:	bf0c      	ite	eq
 800cb38:	2308      	moveq	r3, #8
 800cb3a:	230a      	movne	r3, #10
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb42:	6865      	ldr	r5, [r4, #4]
 800cb44:	60a5      	str	r5, [r4, #8]
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	bfa2      	ittt	ge
 800cb4a:	6821      	ldrge	r1, [r4, #0]
 800cb4c:	f021 0104 	bicge.w	r1, r1, #4
 800cb50:	6021      	strge	r1, [r4, #0]
 800cb52:	b90e      	cbnz	r6, 800cb58 <_printf_i+0x118>
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	d04d      	beq.n	800cbf4 <_printf_i+0x1b4>
 800cb58:	4615      	mov	r5, r2
 800cb5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb5e:	fb03 6711 	mls	r7, r3, r1, r6
 800cb62:	5dc7      	ldrb	r7, [r0, r7]
 800cb64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb68:	4637      	mov	r7, r6
 800cb6a:	42bb      	cmp	r3, r7
 800cb6c:	460e      	mov	r6, r1
 800cb6e:	d9f4      	bls.n	800cb5a <_printf_i+0x11a>
 800cb70:	2b08      	cmp	r3, #8
 800cb72:	d10b      	bne.n	800cb8c <_printf_i+0x14c>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	07de      	lsls	r6, r3, #31
 800cb78:	d508      	bpl.n	800cb8c <_printf_i+0x14c>
 800cb7a:	6923      	ldr	r3, [r4, #16]
 800cb7c:	6861      	ldr	r1, [r4, #4]
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	bfde      	ittt	le
 800cb82:	2330      	movle	r3, #48	; 0x30
 800cb84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb8c:	1b52      	subs	r2, r2, r5
 800cb8e:	6122      	str	r2, [r4, #16]
 800cb90:	f8cd a000 	str.w	sl, [sp]
 800cb94:	464b      	mov	r3, r9
 800cb96:	aa03      	add	r2, sp, #12
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4640      	mov	r0, r8
 800cb9c:	f7ff fee2 	bl	800c964 <_printf_common>
 800cba0:	3001      	adds	r0, #1
 800cba2:	d14c      	bne.n	800cc3e <_printf_i+0x1fe>
 800cba4:	f04f 30ff 	mov.w	r0, #4294967295
 800cba8:	b004      	add	sp, #16
 800cbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbae:	4835      	ldr	r0, [pc, #212]	; (800cc84 <_printf_i+0x244>)
 800cbb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbb4:	6829      	ldr	r1, [r5, #0]
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbbc:	6029      	str	r1, [r5, #0]
 800cbbe:	061d      	lsls	r5, r3, #24
 800cbc0:	d514      	bpl.n	800cbec <_printf_i+0x1ac>
 800cbc2:	07df      	lsls	r7, r3, #31
 800cbc4:	bf44      	itt	mi
 800cbc6:	f043 0320 	orrmi.w	r3, r3, #32
 800cbca:	6023      	strmi	r3, [r4, #0]
 800cbcc:	b91e      	cbnz	r6, 800cbd6 <_printf_i+0x196>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	f023 0320 	bic.w	r3, r3, #32
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	e7b0      	b.n	800cb3c <_printf_i+0xfc>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	f043 0320 	orr.w	r3, r3, #32
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	2378      	movs	r3, #120	; 0x78
 800cbe4:	4828      	ldr	r0, [pc, #160]	; (800cc88 <_printf_i+0x248>)
 800cbe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbea:	e7e3      	b.n	800cbb4 <_printf_i+0x174>
 800cbec:	0659      	lsls	r1, r3, #25
 800cbee:	bf48      	it	mi
 800cbf0:	b2b6      	uxthmi	r6, r6
 800cbf2:	e7e6      	b.n	800cbc2 <_printf_i+0x182>
 800cbf4:	4615      	mov	r5, r2
 800cbf6:	e7bb      	b.n	800cb70 <_printf_i+0x130>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	6826      	ldr	r6, [r4, #0]
 800cbfc:	6961      	ldr	r1, [r4, #20]
 800cbfe:	1d18      	adds	r0, r3, #4
 800cc00:	6028      	str	r0, [r5, #0]
 800cc02:	0635      	lsls	r5, r6, #24
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	d501      	bpl.n	800cc0c <_printf_i+0x1cc>
 800cc08:	6019      	str	r1, [r3, #0]
 800cc0a:	e002      	b.n	800cc12 <_printf_i+0x1d2>
 800cc0c:	0670      	lsls	r0, r6, #25
 800cc0e:	d5fb      	bpl.n	800cc08 <_printf_i+0x1c8>
 800cc10:	8019      	strh	r1, [r3, #0]
 800cc12:	2300      	movs	r3, #0
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	4615      	mov	r5, r2
 800cc18:	e7ba      	b.n	800cb90 <_printf_i+0x150>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	1d1a      	adds	r2, r3, #4
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	681d      	ldr	r5, [r3, #0]
 800cc22:	6862      	ldr	r2, [r4, #4]
 800cc24:	2100      	movs	r1, #0
 800cc26:	4628      	mov	r0, r5
 800cc28:	f7f3 fad2 	bl	80001d0 <memchr>
 800cc2c:	b108      	cbz	r0, 800cc32 <_printf_i+0x1f2>
 800cc2e:	1b40      	subs	r0, r0, r5
 800cc30:	6060      	str	r0, [r4, #4]
 800cc32:	6863      	ldr	r3, [r4, #4]
 800cc34:	6123      	str	r3, [r4, #16]
 800cc36:	2300      	movs	r3, #0
 800cc38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc3c:	e7a8      	b.n	800cb90 <_printf_i+0x150>
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	462a      	mov	r2, r5
 800cc42:	4649      	mov	r1, r9
 800cc44:	4640      	mov	r0, r8
 800cc46:	47d0      	blx	sl
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d0ab      	beq.n	800cba4 <_printf_i+0x164>
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	079b      	lsls	r3, r3, #30
 800cc50:	d413      	bmi.n	800cc7a <_printf_i+0x23a>
 800cc52:	68e0      	ldr	r0, [r4, #12]
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	4298      	cmp	r0, r3
 800cc58:	bfb8      	it	lt
 800cc5a:	4618      	movlt	r0, r3
 800cc5c:	e7a4      	b.n	800cba8 <_printf_i+0x168>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4632      	mov	r2, r6
 800cc62:	4649      	mov	r1, r9
 800cc64:	4640      	mov	r0, r8
 800cc66:	47d0      	blx	sl
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d09b      	beq.n	800cba4 <_printf_i+0x164>
 800cc6c:	3501      	adds	r5, #1
 800cc6e:	68e3      	ldr	r3, [r4, #12]
 800cc70:	9903      	ldr	r1, [sp, #12]
 800cc72:	1a5b      	subs	r3, r3, r1
 800cc74:	42ab      	cmp	r3, r5
 800cc76:	dcf2      	bgt.n	800cc5e <_printf_i+0x21e>
 800cc78:	e7eb      	b.n	800cc52 <_printf_i+0x212>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	f104 0619 	add.w	r6, r4, #25
 800cc80:	e7f5      	b.n	800cc6e <_printf_i+0x22e>
 800cc82:	bf00      	nop
 800cc84:	0800d192 	.word	0x0800d192
 800cc88:	0800d1a3 	.word	0x0800d1a3

0800cc8c <_read_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_read_r+0x20>)
 800cc90:	4604      	mov	r4, r0
 800cc92:	4608      	mov	r0, r1
 800cc94:	4611      	mov	r1, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	602a      	str	r2, [r5, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f7f7 fa28 	bl	80040f0 <_read>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_read_r+0x1e>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_read_r+0x1e>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	2000c064 	.word	0x2000c064

0800ccb0 <_fstat_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	; (800ccd0 <_fstat_r+0x20>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	f7f7 fa40 	bl	8004142 <_fstat>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d102      	bne.n	800cccc <_fstat_r+0x1c>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b103      	cbz	r3, 800cccc <_fstat_r+0x1c>
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
 800ccce:	bf00      	nop
 800ccd0:	2000c064 	.word	0x2000c064

0800ccd4 <_isatty_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	; (800ccf0 <_isatty_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f7 fa3f 	bl	8004162 <_isatty>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_isatty_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_isatty_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	2000c064 	.word	0x2000c064

0800ccf4 <_init>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	bf00      	nop
 800ccf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfa:	bc08      	pop	{r3}
 800ccfc:	469e      	mov	lr, r3
 800ccfe:	4770      	bx	lr

0800cd00 <_fini>:
 800cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd02:	bf00      	nop
 800cd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd06:	bc08      	pop	{r3}
 800cd08:	469e      	mov	lr, r3
 800cd0a:	4770      	bx	lr
